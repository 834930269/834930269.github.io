{"name":"Flask源码学习","slug":"Flask源码学习","count":1,"postlist":[{"title":"Flask 源码解读(一)","slug":"flask-sc1","date":"2017-11-04T08:53:02.000Z","updated":"2019-07-03T13:51:36.859Z","comments":true,"path":"api/articles/flask-sc1.json","excerpt":"","keywords":null,"cover":null,"content":"<p>其中<code>Flask</code>用于处理Web应用的路由,request,response等模块的核心是<code>werkzeug</code>. <code>werkzeug</code> 提供了 python web WSGI 开发相关的功能：</p>\n<ul>\n<li>路由处理：怎么根据请求中的 url 找到它的处理函数</li>\n<li>request 和 response 封装：可以更好地读取 request 的数据，也容易生成响应</li>\n<li>一个自带的 WSGI server，可以用来测试环境运行自己的应用</li>\n</ul>\n<p>比如，我们可以使用 <code>werkzeug</code> 编写一个简单的 hello world 的 WSGI app：</p>\n<pre><code>from werkzeug.wrappers import Request,Response\n\ndef application(environ,start_response):\n    request = Request(environ)\n    text = &apos;Hello %s&apos; % request.args.get(&apos;name&apos;,&apos;World&apos;)\n    response = Response(text,mimetype=&apos;text/plain&apos;)\n    return response(environ,start_response)</code></pre><p>除了和 web WSGI 相关的功能，werkzeug 还实现了很多非常有用的数据结构和函数。比如用来处理一个 key 对应多个值的 MultiDict，不支持修改的字典 ImmutableDict ，可以缓存类属性的 cache_property 等等。</p>\n","text":"其中Flask用于处理Web应用的路由,request,response等模块的核心是werkzeug. werkzeug 提供了 python web WSGI 开发相关的功能：路由处理：怎么根据请求中的 url 找到它的处理函数request 和 response 封装：可以","link":"","raw":null,"photos":[],"categories":[{"name":"Flask","slug":"Flask","count":18,"path":"api/categories/Flask.json"},{"name":"flask源码学习","slug":"Flask/flask源码学习","count":1,"path":"api/categories/Flask/flask源码学习.json"},{"name":"Python","slug":"Flask/flask源码学习/Python","count":1,"path":"api/categories/Flask/flask源码学习/Python.json"}],"tags":[{"name":"Flask","slug":"Flask","count":20,"path":"api/tags/Flask.json"},{"name":"Python","slug":"Python","count":65,"path":"api/tags/Python.json"},{"name":"Flask源码学习","slug":"Flask源码学习","count":1,"path":"api/tags/Flask源码学习.json"}]}]}