{"name":"Egret","slug":"Egret","count":3,"postlist":[{"title":"Egret学习笔记","slug":"egret","date":"2017-09-24T08:15:06.000Z","updated":"2019-07-03T13:51:36.852Z","comments":true,"path":"api/articles/egret.json","excerpt":"","keywords":null,"cover":"http://cdn.dev.egret.com/egret-docs/Engine2D/displayObjecContainer/depthManagement/566d13d822cef.png","content":"<h3 id=\"【添加与显示对象】\"><a href=\"#【添加与显示对象】\" class=\"headerlink\" title=\"【添加与显示对象】\"></a><strong>【添加与显示对象】</strong></h3><p>1.同一个显示对象只能被添加一次,无论添加多少次只显示最后一个. 2.删除对象是用父对象.removeChild(显示对象),即被删除对象必须有父级对象. 3.判断是否有父级对象存在:</p>\n<pre><code>if( spr.parent ) {\n    spr.parent.removeChild( spr );\n}</code></pre><h3 id=\"【深度管理】\"><a href=\"#【深度管理】\" class=\"headerlink\" title=\"【深度管理】\"></a><strong>【深度管理】</strong></h3><p>1.比较像html中的z-index 2.如果想在一个容器的某个深度添加子节点对象时,要用:</p>\n<pre><code>容器.addChildAt( 显示对象, 深度值 )</code></pre><p>这就很像在队列中插入一个元素: <a href=\"http://cdn.dev.egret.com/egret-docs/Engine2D/displayObjecContainer/depthManagement/566d13d822cef.png\" target=\"_blank\" rel=\"noopener\"><img src=\"http://cdn.dev.egret.com/egret-docs/Engine2D/displayObjecContainer/depthManagement/566d13d822cef.png\" alt></a> 3.删除某深度的子对象:</p>\n<pre><code>容器.removeChildAt( 深度值 )</code></pre><p>4.删除掉所有对象:</p>\n<pre><code>容器.removeChildren();</code></pre><p>5.交换不同对象:</p>\n<pre><code>容器.swapChildren( 显示对象, 显示对象 )\n\n容器.swapChildrenAt( 深度值, 深度值 )</code></pre><p>6.重设深度值:</p>\n<pre><code>容器.setChildIndex( 显示对象, 新的深度值 );</code></pre><h3 id=\"【访问容器子对象】\"><a href=\"#【访问容器子对象】\" class=\"headerlink\" title=\"【访问容器子对象】\"></a><strong>【访问容器子对象】</strong></h3><p>1.通过深度获取:</p>\n<pre><code>容器.getChildAt( 深度值 );</code></pre><p>2.设置灰度值:</p>\n<pre><code>对象.alpha = 0.5;</code></pre><p>3.通过name值获取: 设置name的方法:</p>\n<pre><code>对象.name=&quot;&quot;;</code></pre><p>获取方法:</p>\n<pre><code>容器.getChildByName(&quot;&quot;);</code></pre><p>4.方法对比后还是通过深度获取效率更好.</p>\n","text":"【添加与显示对象】1.同一个显示对象只能被添加一次,无论添加多少次只显示最后一个. 2.删除对象是用父对象.removeChild(显示对象),即被删除对象必须有父级对象. 3.判断是否有父级对象存在:if( spr.parent ) {    spr.parent.remove","link":"","raw":null,"photos":[],"categories":[{"name":"Egret","slug":"Egret","count":3,"path":"api/categories/Egret.json"}],"tags":[{"name":"Egret","slug":"Egret","count":3,"path":"api/tags/Egret.json"}]},{"title":"Egret事件","slug":"egret-event","date":"2017-10-01T06:48:46.000Z","updated":"2019-07-03T13:51:36.853Z","comments":true,"path":"api/articles/egret-event.json","excerpt":"","keywords":null,"cover":"http://be-sunshine.cn/wp-content/uploads/2017/10/QQ%E6%88%AA%E5%9B%BE20171001144253.png","content":"<p>先贴跟随书上的问题代码: 项目截图: <img src=\"http://be-sunshine.cn/wp-content/uploads/2017/10/QQ%E6%88%AA%E5%9B%BE20171001144253.png\" alt=\"Aaron\"> 代码:</p>\n<pre><code>//Circle.ts\nclass Circle extends egret.Sprite{\n    public constructor(cx:number,cy:number,cr:number){\n        super();\n        this.init(cx,cy,cr);\n    }\n    private shape:egret.Shape;\n    private shapex:number;\n    private shapey:number;\n    private shaper:number;\n    private color:number;\n    public static Event_Click:string=&quot;event_click&quot;;\n    private colorList = [13408665, 16777113, 6710937, 16750848, 16776960, 39372, 13421721, 13382553, 10079232, 16737894, 16776960, 3381708, 13395456, 10066329, 13421619, 16750899, 16777164, 39219, 39372, 13421772, 16737894, 16737792, 16777062, 39270, 13395507, 16764057, 13395456, 13369446, 39321, 16763955];\n    private randmColor():number{\n        return this.colorList[Math.round(Math.random()*this.colorList.length)];\n    }\n    private init(cx:number,cy:number,cr:number){\n        this.color=this.randmColor();\n        this.shape=new egret.Shape();\n        this.shape.graphics.beginFill(this.color);\n        this.shape.graphics.drawCircle(0,0,cr);\n        this.shape.graphics.endFill();\n        //设定矢量圆的位置为父类中心点\n        this.shape.x=-cr;\n        this.shape.y=-cr;\n\n        this.shapex=cx;\n        this.shapey=cy;\n        this.shaper=cr;\n        this.touchEnabled=!0;\n\n        //侦听用户的移动与触摸事件\n        this.addEventListener(egret.TouchEvent.TOUCH_TAP,this.onTouch,this,!1);\n        this.addChild(this.shape);\n        this.x=cx;\n        this.y=cy;\n    }\n    private onTouch(e:egret.TouchEvent):void{\n        var par=this.parent;\n        par.dispatchEventWith(Circle.Event_Click,false,this.color);\n        this.touchEnabled=!1;\n        var tween:egret.Tween=egret.Tween.get(this);\n        tween.to({alpha:0.1},500,egret.Ease.sineOut);\n        tween.call(function(){\n            this.visible=!1;\n            par.removeChild(this);\n            this.removeEventListener(egret.TouchEvent.TOUCH_TAP,this.onTouch,this);\n        },this);\n\n        var circleList:Circle[]=[];\n        var tweenList:egret.Tween[]=[];\n        var redius:number=this.shaper&gt;&gt;1;\n        var tempx:number;\n        var tempy:number;\n        var tempr:number;\n\n        var g:number=0;\n        for(var i:number=0;i&lt;2;++i){\n            for(var t:number=0;t&lt;2;++t){\n                tempx=this.shapex-this.shaper+redius*2*t;\n                tempy=this.shapey-this.shaper+redius*2*i;\n                circleList[g]=new Circle(tempx,tempy,redius);\n                circleList[g].alpha=0.1;\n                circleList[g].scaleX=0.8;\n                circleList[g].scaleY=0.8;\n                par.addChild(circleList[g]);\n                tweenList[g]=egret.Tween.get(circleList[g]);\n                tweenList[g].to({alpha:1,scaleX:1,scaleY:1},1000,egret.Ease.sineIn);\n                g++;\n            }\n        }\n\n    }\n}\n\n\n\n//Main.ts\n    public constructor() {\n        super();\n        this.addEventListener(egret.Event.ADDED_TO_STAGE, this.onAddToStage, this);\n        this.addEventListener(Circle.Event_Click,this.onClickCircle,this);\n    }\n\n    private textCount:egret.TextField;\n    private textTimer:egret.TextField;\n    private textDes:egret.TextField;\n    private timer:egret.Timer;\n    private color:number; \n\n    private onAddToStage(event: egret.Event) {\n        var stageW:number=this.stage.stageWidth;\n        var stageH:number=this.stage.stageHeight;\n\n        var bg=new egret.Shape();\n        bg.graphics.beginFill(0xfccfcc);\n        bg.graphics.drawRect(0,0,stageW,stageH);\n        bg.graphics.endFill();\n\n        this.textCount=new egret.TextField();\n        this.textCount.textColor=0xffffff;\n        this.textCount.y=630;\n        this.textCount.text=&quot;分数 : 0&quot;;\n\n        this.textTimer=new egret.TextField();\n        this.textTimer.textColor=0xffffff;\n        this.textTimer.y=720;\n        this.textTimer.text=&quot;倒计时&quot;;\n\n        this.textDes=new egret.TextField();\n        this.textDes.text=&quot;点击第一个颜色开始&quot;;\n        this.textDes.y=800;\n\n        this.textCount.textAlign=\n            this.textTimer.textAlign=\n                this.textDes.textAlign=\n                    egret.HorizontalAlign.CENTER;\n\n        this.textCount.width=\n            this.textDes.width=\n                this.textTimer.width=stageW;\n\n        this.textCount.textColor=\n            this.textDes.textColor=\n                this.textTimer.textColor=0x000000;\n\n        this.addChild(bg);\n        this.addChild(this.textCount);\n        this.addChild(this.textDes);\n        this.addChild(this.textTimer);\n\n        this.timer=new egret.Timer(1000,30);\n        this.timer.addEventListener(egret.TimerEvent.TIMER,this.onTimer,this);\n        this.timer.addEventListener(egret.TimerEvent.TIMER_COMPLETE,this.onTimerComplete,this);\n\n        var radius:number=60;\n        for(var i:number=0;i&lt;4;++i){\n            for(var t:number=0;t&lt;4;++t){\n                var tempx:number=200+radius*2*t;\n                var tempy:number=190+radius*2*i;\n                var circle:Circle=new Circle(tempx,tempy,radius);\n                this.addChild(circle);\n            }\n        }\n    }\n\n    private count:number=0;\n    private onClickCircle(e:any):void{\n        //e是触发时的事件对象\n        console.log(e,this.color,&quot;   &quot;,e.data);\n        if(this.count==0){\n            this.color=e.data;\n            //console.log(e,&quot;   &quot;,e.data);\n            this.textCount.text=&quot;分数 : &quot;+(++this.count);\n            this.timer.start();\n        }else if(this.color==e.data){\n            this.textCount.text=&quot;分数 : &quot;+(++this.count);\n        }\n    }\n\n    private onTimer(e:egret.TimerEvent):void{\n        this.textTimer.text=&quot;倒计时 : &quot;+(this.timer.repeatCount-this.timer.currentCount);\n    }\n\n    private onTimerComplete(e:egret.TimerEvent):void{\n        this.textDes.text=&quot;这不是极限,刷新再来一次! &quot;;\n        this.removeEventListener(Circle.Event_Click,this.onClickCircle,this);\n    }</code></pre><p>其中我不解的是</p>\n<pre><code>e:any</code></pre><p>和</p>\n<pre><code>e.data</code></pre><p>为什么是color:number类型的.所以准备系统搞一遍Event. **------------ 1.开始… 首先是构造函数中的三个参数，type、bubbles和cancelable。</p>\n<pre><code>type:触发事件的类型.\nbubbles:是指定事件是否参与事件流的冒泡阶段，关于事件流，会在后面的小节中介绍。\ncancelable:表示是否要取消Event对象。</code></pre><p>这里我们用约会的例子来说明一下. 首先定义一个约会的类:</p>\n<pre><code>class DateEvent extends egret.Event\n{\n    public static DATE:string = &quot;约会&quot;;\n    public _year:number = 0;\n    public _month:number = 0;\n    public _date:number = 0;\n    public _where:string = &quot;&quot;;\n    public _todo:string = &quot;&quot;;\n    public constructor(type:string, bubbles:boolean=false, cancelable:boolean=false)\n    {\n        super(type,bubbles,cancelable);\n    }\n}</code></pre><p>其中</p>\n<pre><code>static DATE:string</code></pre><p>代表DATE事件. **------------ 2.侦听器 事件侦听器也就是事件的处理者，负责接收事件携带的信息，并在接收到该事件后执行特定的代码。 Egret中，事件的侦听器必须是一个函数。事件的发送者必须是 egret.EventDispatcher 类或者子类的实例。只有事件发送者才能侦听事件，并且可以 注册侦听器。 注册侦听器:addEventListener(). 侦听器的定义:</p>\n<pre><code>public addEventListener(type:string, listener:Function, thisObject:any, useCapture:boolean = false, priority:number = 0)</code></pre><p>type: 事件类型. listener: 用来处理事件的侦听器,即函数. thisObject: this即可. 注册侦听器: 事件发送者.addEventListener(事件类型, 侦听器, this); 移除侦听器: 事件发送者.removeEventListener(事件类型, 侦听器, this); 最后一个 priority 参数的设置即侦听器的优先级. 而 侦听器 有一个参数是 e:Event.或者 e:any. e.data 即为发送过来的数据. 在项目中 Circle 有这样一个句:</p>\n<pre><code>par.dispatchEventWith(Circle.Event_Click,false,this.color);</code></pre><p>即当事件触发时 打包发送 this.color. 将其改为 0Xffffff 试试: <a href=\"http://be-sunshine.cn/wp-content/uploads/2017/10/QQ%E6%88%AA%E5%9B%BE20171001151826.png\" target=\"_blank\" rel=\"noopener\"><img src=\"http://be-sunshine.cn/wp-content/uploads/2017/10/QQ%E6%88%AA%E5%9B%BE20171001151826.png\" alt></a> 果然如此. 问题解决!****</p>\n","text":"先贴跟随书上的问题代码: 项目截图:  [Figure]  果然如此. 问题解决!****","link":"","raw":null,"photos":[],"categories":[{"name":"Egret","slug":"Egret","count":3,"path":"api/categories/Egret.json"}],"tags":[{"name":"Egret","slug":"Egret","count":3,"path":"api/tags/Egret.json"}]},{"title":"Egret 滤镜","slug":"egret-filter","date":"2017-10-06T09:15:46.000Z","updated":"2019-07-03T13:51:36.858Z","comments":true,"path":"api/articles/egret-filter.json","excerpt":"","keywords":null,"cover":"http://be-sunshine.cn/wp-content/uploads/2017/10/QQ%E6%88%AA%E5%9B%BE20171006171157.png","content":"<p>效果图如下: <a href=\"http://be-sunshine.cn/wp-content/uploads/2017/10/QQ%E6%88%AA%E5%9B%BE20171006171157.png\" target=\"_blank\" rel=\"noopener\"><img src=\"http://be-sunshine.cn/wp-content/uploads/2017/10/QQ%E6%88%AA%E5%9B%BE20171006171157.png\" alt></a> 在之前需要在资源文件.json下添加该文件进组,以便加载时可以一起加载. Egret不能在使用时动态加载位图,只能在使用前加载. Main.ts代码如下:</p>\n<pre><code>//Main.ts\n\nclass Main extends egret.DisplayObjectContainer {\n\n    /**\n     * 加载进度界面\n     * Process interface loading\n     */\n    private loadingView: LoadingUI;\n\n    public constructor() {\n        super();\n        this.addEventListener(egret.Event.ADDED_TO_STAGE, this.onAddToStage, this);\n    }\n\n    private onAddToStage(event: egret.Event) {\n\n        egret.lifecycle.addLifecycleListener((context) =&gt; {\n            // custom lifecycle plugin\n\n            context.onUpdate = () =&gt; {\n                console.log(&apos;hello,world&apos;)\n            }\n        })\n\n        egret.lifecycle.onPause = () =&gt; {\n            egret.ticker.pause();\n        }\n\n        egret.lifecycle.onResume = () =&gt; {\n            egret.ticker.resume();\n        }\n\n\n        //设置加载进度界面\n        //Config to load process interface\n        this.loadingView = new LoadingUI();\n        this.stage.addChild(this.loadingView);\n\n        //初始化Resource资源加载库\n        //initiate Resource loading library\n        RES.addEventListener(RES.ResourceEvent.CONFIG_COMPLETE, this.onConfigComplete, this);\n        RES.loadConfig(&quot;resource/default.res.json&quot;, &quot;resource/&quot;);\n    }\n\n    /**\n     * 配置文件加载完成,开始预加载preload资源组。\n     * configuration file loading is completed, start to pre-load the preload resource group\n     */\n    private onConfigComplete(event: RES.ResourceEvent): void {\n        RES.removeEventListener(RES.ResourceEvent.CONFIG_COMPLETE, this.onConfigComplete, this);\n        RES.addEventListener(RES.ResourceEvent.GROUP_COMPLETE, this.onResourceLoadComplete, this);\n        RES.addEventListener(RES.ResourceEvent.GROUP_LOAD_ERROR, this.onResourceLoadError, this);\n        RES.addEventListener(RES.ResourceEvent.GROUP_PROGRESS, this.onResourceProgress, this);\n        RES.addEventListener(RES.ResourceEvent.ITEM_LOAD_ERROR, this.onItemLoadError, this);\n        RES.loadGroup(&quot;preload&quot;);\n    }\n\n    /**\n     * preload资源组加载完成\n     * Preload resource group is loaded\n     */\n    private onResourceLoadComplete(event: RES.ResourceEvent) {\n        if (event.groupName == &quot;preload&quot;) {\n            this.stage.removeChild(this.loadingView);\n            RES.removeEventListener(RES.ResourceEvent.GROUP_COMPLETE, this.onResourceLoadComplete, this);\n            RES.removeEventListener(RES.ResourceEvent.GROUP_LOAD_ERROR, this.onResourceLoadError, this);\n            RES.removeEventListener(RES.ResourceEvent.GROUP_PROGRESS, this.onResourceProgress, this);\n            RES.removeEventListener(RES.ResourceEvent.ITEM_LOAD_ERROR, this.onItemLoadError, this);\n            this.createGameScene();\n        }\n    }\n\n    /**\n     * 资源组加载出错\n     *  The resource group loading failed\n     */\n    private onItemLoadError(event: RES.ResourceEvent) {\n        console.warn(&quot;Url:&quot; + event.resItem.url + &quot; has failed to load&quot;);\n    }\n\n    /**\n     * 资源组加载出错\n     *  The resource group loading failed\n     */\n    private onResourceLoadError(event: RES.ResourceEvent) {\n        //TODO\n        console.warn(&quot;Group:&quot; + event.groupName + &quot; has failed to load&quot;);\n        //忽略加载失败的项目\n        //Ignore the loading failed projects\n        this.onResourceLoadComplete(event);\n    }\n\n    /**\n     * preload资源组加载进度\n     * Loading process of preload resource group\n     */\n    private onResourceProgress(event: RES.ResourceEvent) {\n        if (event.groupName == &quot;preload&quot;) {\n            this.loadingView.setProgress(event.itemsLoaded, event.itemsTotal);\n        }\n    }\n\n    private textfield: egret.TextField;\n\n    /**\n     * 创建游戏场景\n     * Create a game scene\n     */\n    private createGameScene() {\n/*        let sky = this.createBitmapByName(&quot;bg_jpg&quot;);\n        this.addChild(sky);\n        let stageW = this.stage.stageWidth;\n        let stageH = this.stage.stageHeight;\n        sky.width = stageW;\n        sky.height = stageH;\n\n        let topMask = new egret.Shape();\n        topMask.graphics.beginFill(0x000000, 0.5);\n        topMask.graphics.drawRect(0, 0, stageW, 172);\n        topMask.graphics.endFill();\n        topMask.y = 33;\n        this.addChild(topMask);\n\n        let icon = this.createBitmapByName(&quot;egret_icon_png&quot;);\n        this.addChild(icon);\n        icon.x = 26;\n        icon.y = 33;\n\n        let line = new egret.Shape();\n        line.graphics.lineStyle(2, 0xffffff);\n        line.graphics.moveTo(0, 0);\n        line.graphics.lineTo(0, 117);\n        line.graphics.endFill();\n        line.x = 172;\n        line.y = 61;\n        this.addChild(line);\n\n\n        let colorLabel = new egret.TextField();\n        colorLabel.textColor = 0xffffff;\n        colorLabel.width = stageW - 172;\n        colorLabel.textAlign = &quot;center&quot;;\n        colorLabel.text = &quot;Hello Egret&quot;;\n        colorLabel.size = 24;\n        colorLabel.x = 172;\n        colorLabel.y = 80;\n        this.addChild(colorLabel);\n\n        let textfield = new egret.TextField();\n        this.addChild(textfield);\n        textfield.alpha = 0;\n        textfield.width = stageW - 172;\n        textfield.textAlign = egret.HorizontalAlign.CENTER;\n        textfield.size = 24;\n        textfield.textColor = 0xffffff;\n        textfield.x = 172;\n        textfield.y = 135;\n        this.textfield = textfield;*/\n\n        //根据name关键字，异步获取一个json配置文件，name属性请参考resources/resource.json配置文件的内容。\n        // Get asynchronously a json configuration file according to name keyword. As for the property of name please refer to the configuration file of resources/resource.json.\n        let qb=this.createBitmapByName(&apos;cartoon-egret_00_png&apos;);\n        this.addChild(qb);\n        qb.y=100;\n\n        let qb1=this.createBitmapByName(&apos;cartoon-egret_00_png&apos;);\n        this.addChild(qb1);\n        qb1.y=100;\n        qb1.x=300;\n\n        this.applyGlowFilter(qb1);\n        //RES.getResAsync(&quot;description_json&quot;, this.startAnimation, this)\n    }\n    private applyGlowFilter(disp:egret.DisplayObject):void{\n        var color:number=0x33CCFF;\n        //光晕的颜色\n        var alpha:number=0.8;\n        //透明度\n        var blurX:number=35;//水平模糊量\n        var blurY:number=35;//垂直模糊量\n        var strength:number=2;//压印的强度,值越大,压印的颜色越深\n        var quality:number=egret.BitmapFilterQuality.HIGH;//应用滤镜的次数\n        var inner:boolean=false;//制定发光是否为内侧发光\n        var knockout:boolean=false;//指定对象是否具有挖空效果\n        var glowFilter:egret.GlowFilter=new egret.GlowFilter(color,alpha,blurX,blurY,strength,quality,inner,knockout);\n        disp.filters=[glowFilter]; \n    }\n    /**\n     * 根据name关键字创建一个Bitmap对象。name属性请参考resources/resource.json配置文件的内容。\n     * Create a Bitmap object according to name keyword.As for the property of name please refer to the configuration file of resources/resource.json.\n     */\n    private createBitmapByName(name: string) {\n        let result = new egret.Bitmap();\n        let texture: egret.Texture = RES.getRes(name);\n        result.texture = texture;\n        return result;\n    }\n\n    /**\n     * 描述文件加载成功，开始播放动画\n     * Description file loading is successful, start to play the animation\n     */\n    private startAnimation(result: string[]) {\n        let parser = new egret.HtmlTextParser();\n\n        let textflowArr = result.map(text =&gt; parser.parse(text));\n        let textfield = this.textfield;\n        let count = -1;\n        let change = () =&gt; {\n            count++;\n            if (count &gt;= textflowArr.length) {\n                count = 0;\n            }\n            let textFlow = textflowArr[count];\n\n            // 切换描述内容\n            // Switch to described content\n            textfield.textFlow = textFlow;\n            let tw = egret.Tween.get(textfield);\n            tw.to({ &quot;alpha&quot;: 1 }, 200);\n            tw.wait(2000);\n            tw.to({ &quot;alpha&quot;: 0 }, 200);\n            tw.call(change, this);\n        };\n\n        change();\n    }\n}</code></pre>","text":"效果图如下:  [Figure]  在之前需要在资源文件.json下添加该文件进组,以便加载时可以一起加载. Egret不能在使用时动态加载位图,只能在使用前加载. Main.ts代码如下://Main.tsclass Main extends egret.DisplayObje","link":"","raw":null,"photos":[],"categories":[{"name":"Egret","slug":"Egret","count":3,"path":"api/categories/Egret.json"}],"tags":[{"name":"Egret","slug":"Egret","count":3,"path":"api/tags/Egret.json"}]}]}