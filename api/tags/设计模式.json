{"name":"设计模式","slug":"设计模式","count":2,"postlist":[{"title":"23种设计模式","slug":"23-sort-dp","date":"2018-07-09T08:54:25.000Z","updated":"2019-07-03T13:51:36.863Z","comments":true,"path":"api/articles/23-sort-dp.json","excerpt":"","keywords":null,"cover":"http://be-sunshine.cn/wp-content/uploads/2018/07/8c8553195537694e12194e5ed24b72fd.png","content":"<h1><span id=\"开题\">开题</span></h1><h2><span id=\"设计模式作用\">设计模式作用?</span></h2><p>需求敲定了,模块划完了,你们要开工了,但是问题出来了,如果不是一个人开发,那代码如何统一起来?不扯犊子的话你总不能一个人一种代码习惯,然后找人把他们整合起来?这复杂度有点高吧… 那就解耦吧,高内聚低耦合嘛,为什么低耦合,就是为了整合规则,让每个人的代码都不能违反规则.然后在规则上将每个人的代码分开.这就叫解耦,其实解耦这个概念在很多地方都用到了,架构上也有.可得见解耦是多么的重要. 设计模式就起了这个作用.只给小组程序猿提供接口.</p>\n<h2><span id=\"优点目的\">优点/目的？</span></h2><ul>\n<li>面向接口编程</li>\n<li>降低耦合度</li>\n<li>增加灵活度</li>\n</ul>\n<h2><span id=\"分类\">分类?</span></h2><ul>\n<li>创建模式(解决如何在创建的过程中创建对象/对象结构)</li>\n<li>结构模式(专注于结构化的划分和设计)</li>\n<li>行为模式(专注于行为设计,如何更灵活,更大程度上可扩展,或降低耦合度)</li>\n</ul>\n<h3><span id=\"创建模式\">创建模式</span></h3><ul>\n<li>简单工厂模式(静态工厂方法模式)</li>\n<li>工厂方法模式</li>\n<li>抽象工厂模式</li>\n<li>单例模式</li>\n<li>建造模式</li>\n<li>原始模型模式</li>\n</ul>\n<h3><span id=\"结构模式\">结构模式</span></h3><h3><span id=\"行为模式\">行为模式</span></h3><h2><span id=\"学习的时候要注意什么\">学习的时候要注意什么?</span></h2><ul>\n<li>每个模式的类图</li>\n<li>模式的结构</li>\n<li>每个模式的角色</li>\n<li>模式的实例</li>\n<li>优缺点</li>\n<li>每个模式的应用场景</li>\n</ul>\n<h1><span id=\"简单工厂模式\">简单工厂模式</span></h1><h2><span id=\"类图\">类图</span></h2><p><img src=\"http://be-sunshine.cn/wp-content/uploads/2018/07/8c8553195537694e12194e5ed24b72fd.png\" alt></p>\n<h2><span id=\"角色\">角色</span></h2><p><img src=\"http://be-sunshine.cn/wp-content/uploads/2018/07/4e335b0476fe377bf2de07c32b93f643.png\" alt></p>\n<h2><span id=\"实例\">实例</span></h2><p>两种方式创建工厂类,一个是利用Java反射机制,一个是根据规定创建. <a href=\"https://github.com/834930269/Design-pattern/tree/master/DP/src/simplefactory\" target=\"_blank\" rel=\"noopener\">https://github.com/834930269/Design-pattern/tree/master/DP/src/simplefactory</a></p>\n","text":"开题设计模式作用?需求敲定了,模块划完了,你们要开工了,但是问题出来了,如果不是一个人开发,那代码如何统一起来?不扯犊子的话你总不能一个人一种代码习惯,然后找人把他们整合起来?这复杂度有点高吧… 那就解耦吧,高内聚低耦合嘛,为什么低耦合,就是为了整合规则,让每个人的代码都不能违反","link":"","raw":null,"photos":[],"categories":[{"name":"设计模式","slug":"设计模式","count":1,"path":"api/categories/设计模式.json"}],"tags":[{"name":"设计模式","slug":"设计模式","count":2,"path":"api/tags/设计模式.json"}]},{"title":"计划:技术栈完善4-设计模式","slug":"design-model","date":"2018-06-20T09:11:49.000Z","updated":"2019-07-03T13:51:36.844Z","comments":true,"path":"api/articles/design-model.json","excerpt":"","keywords":null,"cover":null,"content":"<p>Link: 总共23种: <a href=\"http://be-sunshine.cn/index.php/2018/07/09/23-sort-dp/\" target=\"_blank\" rel=\"noopener\">http://be-sunshine.cn/index.php/2018/07/09/23-sort-dp/</a></p>\n","text":"Link: 总共23种: http://be-sunshine.cn/index.php/2018/07/09/23-sort-dp/","link":"","raw":null,"photos":[],"categories":[{"name":"技术","slug":"技术","count":10,"path":"api/categories/技术.json"},{"name":"设计模式","slug":"技术/设计模式","count":1,"path":"api/categories/技术/设计模式.json"}],"tags":[{"name":"设计模式","slug":"设计模式","count":2,"path":"api/tags/设计模式.json"},{"name":"技术","slug":"技术","count":14,"path":"api/tags/技术.json"}]}]}