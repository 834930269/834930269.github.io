{"name":"第八届ACM山东省赛","slug":"第八届ACM山东省赛","count":3,"postlist":[{"title":"第八届ACM省赛 K CF","slug":"acm-k-cf","date":"2018-01-18T07:35:38.000Z","updated":"2019-07-03T13:51:36.860Z","comments":true,"path":"api/articles/acm-k-cf.json","excerpt":"","keywords":null,"cover":"http://acm.sdut.edu.cn/image/3903.png","content":"<h3 id=\"CF\"><a href=\"#CF\" class=\"headerlink\" title=\"CF\"></a>CF</h3><p><strong>sdut 3903</strong> Time Limit: 1000MS Memory Limit: 65536KB</p>\n<h4 id=\"Problem-Description\"><a href=\"#Problem-Description\" class=\"headerlink\" title=\"Problem Description\"></a>Problem Description</h4><p><img src=\"http://acm.sdut.edu.cn/image/3903.png\" alt> LYD loves codeforces since there are many Russian contests. In an contest lasting for <em>T</em> minutes there are <em>n</em> problems, and for the <em>i__th</em> problem you can get <em>a__i_−_d__i_∗_t__i</em> points, where <em>a__i</em> indicates the initial points, <em>d__i</em> indicates the points decreased per minute (count from the beginning of the contest), and <em>t__i</em> stands for the passed minutes when you solved the problem (count from the begining of the contest).<br>Now you know LYD can solve the <em>i__th</em> problem in <em>c__i</em> minutes. He can’t perform as a multi-core processor, so he can think of only one problem at a moment. Can you help him get as many points as he can?</p>\n<h4 id=\"Input\"><a href=\"#Input\" class=\"headerlink\" title=\"Input\"></a>Input</h4><p>The first line contains two integers <em>n</em>,<em>T</em>(0≤<em>n</em>≤2000,0≤<em>T</em>≤5000).<br>The second line contains <em>n</em> integers <em>a</em>1,<em>a</em>2,..,<em>a__n</em>(0&lt;<em>a__i_≤6000).<br>The third line contains _n</em> integers <em>d</em>1,<em>d</em>2,..,<em>d__n</em>(0&lt;<em>d__i_≤50).<br>The forth line contains _n</em> integers <em>c</em>1,<em>c</em>2,..,<em>c__n</em>(0&lt;_c__i_≤400).</p>\n<h4 id=\"Output\"><a href=\"#Output\" class=\"headerlink\" title=\"Output\"></a>Output</h4><p>Output an integer in a single line, indicating the maximum points LYD can get.</p>\n<h4 id=\"Example-Input\"><a href=\"#Example-Input\" class=\"headerlink\" title=\"Example Input\"></a>Example Input</h4><p>3 10<br>100 200 250<br>5 6 7<br>2 4 10</p>\n<h4 id=\"Example-Output\"><a href=\"#Example-Output\" class=\"headerlink\" title=\"Example Output\"></a>Example Output</h4><p>254</p>\n<h4 id=\"题意\"><a href=\"#题意\" class=\"headerlink\" title=\"题意\"></a><strong>题意</strong></h4><p>有 n 道题目，每一道题都有一个初始分值 ai ，每个单位时间这道题的分数便会减少 di ，而我们可以在 ci 时间内做出这道题而得到分数，求在时间 T 内最多可以获得的分数。</p>\n<h4 id=\"题解\"><a href=\"#题解\" class=\"headerlink\" title=\"题解\"></a><strong>题解</strong></h4><p>首先可以感觉出这是道0-1背包问题,然后我们需要知道,当我们做题时,会一两个角度来选择题目,其一是选择做题速度最快的,其二是选择做分值降低速度最快的.那么我们的衡量标准就可以看成先做单位时间内做题最多的那道. 然后我们根据上述规则排一下序. 在用排序后的数组进行0-1背包.在背包过程中记录最大值,即为最后的结果.</p>\n<pre><code>#include&lt;bits/stdc++.h&gt;\nusing namespace std;\nconst int maxn=3000;\n\nstruct pro{\n    int a,d,c;\n    //按单位时间内减少分值排序\n    bool operator &lt;(const pro &amp;pt)const{\n        return 1.0*d/c&gt;(1.0*pt.d/pt.c);\n    }\n};\n\nint n,T;\npro p[maxn];\nint dp[5010];\nint main(){\n    while(~scanf(&quot;%d%d&quot;,&amp;n,&amp;T)){\n        memset(dp,0,sizeof(dp));\n        for(int i=0;i&lt;n;++i){\n            scanf(&quot;%d&quot;,&amp;p[i].a);\n        }\n        for(int i=0;i&lt;n;++i){\n            scanf(&quot;%d&quot;,&amp;p[i].d);\n        }\n        for(int i=0;i&lt;n;++i){\n            scanf(&quot;%d&quot;,&amp;p[i].c);\n        }\n        sort(p,p+n);\n        int mx=-1;\n        for(int i=0;i&lt;n;++i){\n            for(int j=T;j&gt;=0;--j){\n                if(j&gt;=p[i].c){\n                    dp[j]=max(dp[j],dp[j-p[i].c]+p[i].a-j*p[i].d);\n                }\n                mx=max(mx,dp[j]);\n            }\n        }\n        printf(&quot;%d\\n&quot;,mx);\n    }\n    return 0;\n}</code></pre>","text":"CFsdut 3903 Time Limit: 1000MS Memory Limit: 65536KBProblem Description [Figure] 2 4 10Example Output254题意有 n 道题目，每一道题都有一个初始分值 ai ，每个单位时间这道题","link":"","raw":null,"photos":[],"categories":[{"name":"Sdut","slug":"Sdut","count":11,"path":"api/categories/Sdut.json"},{"name":"动态规划","slug":"Sdut/动态规划","count":2,"path":"api/categories/Sdut/动态规划.json"},{"name":"第八届ACM山东省赛","slug":"Sdut/动态规划/第八届ACM山东省赛","count":1,"path":"api/categories/Sdut/动态规划/第八届ACM山东省赛.json"}],"tags":[{"name":"动态规划","slug":"动态规划","count":24,"path":"api/tags/动态规划.json"},{"name":"sdut","slug":"sdut","count":11,"path":"api/tags/sdut.json"},{"name":"第八届ACM山东省赛","slug":"第八届ACM山东省赛","count":3,"path":"api/tags/第八届ACM山东省赛.json"}]},{"title":"第八届ACM省赛 Quadrat 找规律","slug":"acm-quadrat","date":"2017-11-27T23:42:08.000Z","updated":"2019-07-03T13:51:36.859Z","comments":true,"path":"api/articles/acm-quadrat.json","excerpt":"","keywords":null,"cover":null,"content":"<p>原题连接: <a href=\"http://acm.sdut.edu.cn/onlinejudge2/index.php/Home/Contest/problemlist/cid/2164\" target=\"_blank\" rel=\"noopener\">http://acm.sdut.edu.cn/onlinejudge2/index.php/Home/Contest/problemlist/cid/2164</a> B题 题意: 求数位为n位的所有数字(0~9..9(n个9))中,各个数位与其平方%10^n所得数的各个数位之差不超过d的数的个数. 注: 所有的数位之差是循环的,比如9和1差2. 首先打表(不过我认为这道题是数位dp,但我不会):</p>\n<pre><code>#include&lt;cstdio&gt;\n#include&lt;cstring&gt;\n#include&lt;cmath&gt;\n#include&lt;algorithm&gt;\n#include&lt;cstdlib&gt;\nusing namespace std;\n\nconst int num[5]={1,10,100,1000,10000};\nint a[15][15];\nvoid init(){\n    memset(a, 0, sizeof(a));\n    for(int i = 0; i &lt;= 9; ++i){\n        for(int j = 0; j &lt;= 9; ++j){\n            a[i][j] = abs(i-j);\n            if(a[i][j] &gt; 5) a[i][j] = 10 - a[i][j];\n        }\n    }\n}\n\nbool judge(int i,int digit,int d){\n    int res=i*i;\n    for(int j=1;j&lt;=digit;++j){\n        int b=i%10;\n        int c=res%10;\n        i/=10;res/=10;\n        if(a[b][c]&gt;d) return false;\n    }\n    return true;\n}\n\nint check(int nb,int d){\n    int cnt=0;\n    for(int i=0;i&lt;num[nb];++i){\n        if(judge(i,nb,d))\n            cnt++;\n    }\n    return cnt;\n}\n\nint main(){\n    init();\n    for(int i=1;i&lt;=4;++i){\n        printf(&quot;%d:&quot;,i);\n        for(int j=0;j&lt;4;++j){\n            printf(&quot; %d&quot;,check(i,j));\n        }\n        printf(&quot;\\n&quot;);\n    }\n    return 0;\n}</code></pre><p>发现dp[i][j]=dp[i-1][j]<em>(2</em>j+1) Code:</p>\n<pre><code>#include&lt;cstdio&gt;\n#include&lt;algorithm&gt;\nusing namespace std;\n\nlong long dp[19][4];\n\nvoid init(){\n    dp[1][0]=4;dp[1][1]=4;\n    dp[1][2]=8;dp[1][3]=8;\n    for(int i=2;i&lt;=18;++i){\n        for(int j=0;j&lt;4;++j){\n            dp[i][j]=dp[i-1][j]*(2*j+1);\n        }\n    }\n}\n\nint main(){\n    init();\n    int T;\n    scanf(&quot;%d&quot;,&amp;T);\n    while(T--){\n        int n,d;\n        scanf(&quot;%d %d&quot;,&amp;n,&amp;d);\n        printf(&quot;%lld\\n&quot;,dp[n][d]);\n    }\n    return 0;\n}</code></pre>","text":"原题连接: http://acm.sdut.edu.cn/onlinejudge2/index.php/Home/Contest/problemlist/cid/2164 B题 题意: 求数位为n位的所有数字(0~9..9(n个9))中,各个数位与其平方%10^n所得数的各个数位","link":"","raw":null,"photos":[],"categories":[{"name":"Sdut","slug":"Sdut","count":11,"path":"api/categories/Sdut.json"},{"name":"思维","slug":"Sdut/思维","count":1,"path":"api/categories/Sdut/思维.json"},{"name":"第八届ACM山东省赛","slug":"Sdut/思维/第八届ACM山东省赛","count":1,"path":"api/categories/Sdut/思维/第八届ACM山东省赛.json"}],"tags":[{"name":"思维","slug":"思维","count":17,"path":"api/tags/思维.json"},{"name":"sdut","slug":"sdut","count":11,"path":"api/tags/sdut.json"},{"name":"第八届ACM山东省赛","slug":"第八届ACM山东省赛","count":3,"path":"api/tags/第八届ACM山东省赛.json"}]},{"title":"山东省第八届ACM省赛 fireworks","slug":"fireworks","date":"2018-02-18T12:54:28.000Z","updated":"2019-07-03T13:51:36.861Z","comments":true,"path":"api/articles/fireworks.json","excerpt":"","keywords":null,"cover":null,"content":"<blockquote>\n<p>迟来的祝福,新年快乐.</p>\n</blockquote>\n<h1 id=\"Link\"><a href=\"#Link\" class=\"headerlink\" title=\"Link\"></a>Link</h1><blockquote>\n<p>要登录</p>\n</blockquote>\n<p><a href=\"http://acm.sdut.edu.cn/onlinejudge2/index.php/Home/Index/problemdetail/pid/3895.html\" title=\"http://acm.sdut.edu.cn/onlinejudge2/index.php/Home/Index/problemdetail/pid/3895.html\" target=\"_blank\" rel=\"noopener\">http://acm.sdut.edu.cn/onlinejudge2/index.php/Home/Index/problemdetail/pid/3895.html</a></p>\n<h1 id=\"Type-杨辉三角-lt-组合数学-逆元\"><a href=\"#Type-杨辉三角-lt-组合数学-逆元\" class=\"headerlink\" title=\"Type: 杨辉三角&lt;-组合数学,逆元\"></a>Type: 杨辉三角&lt;-组合数学,逆元</h1><h1 id=\"题意\"><a href=\"#题意\" class=\"headerlink\" title=\"题意\"></a>题意</h1><blockquote>\n<p>假设x位置有一个烟花,则每秒烟花都会分裂到x+1与x-1这两个位置. 给你n个烟花的初始位置xi和个数ci,问你T秒后,位置w上的烟花个数有多少个.</p>\n</blockquote>\n<h1 id=\"题解\"><a href=\"#题解\" class=\"headerlink\" title=\"题解\"></a>题解</h1><blockquote>\n<p>画一下样例的图会发现很像杨辉三角,我们可以将每个初始点分开计算,最后的结果就是所有初始点分裂后落在目标点的烟花个数和. 但我们发现它们的初始值大小与杨辉三角不同,并且比杨辉三角多了许多0, 然后我们考虑如何解决这两个情况.</p>\n<blockquote>\n<p>(1) 初始值ci,因为只有一个初始点,这点和杨辉三角一样.所以答案是</p>\n<blockquote>\n<p>ans(原杨辉三角在该位置的结果)*ci</p>\n</blockquote>\n<p>(2) 中间有0,这点好想,我们只需要通过推导公式将实际坐标转换为逻辑坐标即可.</p>\n</blockquote>\n<p>然后我们分情况讨论,我们在图上可以发现</p>\n<blockquote>\n<p>(1) 当 <code>分裂次数</code> 与 <code>目标位置和原位置的距离差</code> 同奇偶时该位置结果为0. (2) 当距离大于T+1时(即杨辉三角第T行值的个数),永远不可能分裂到.</p>\n</blockquote>\n<p>因为只需要考虑最后一次分裂的结果,所以只需要计算杨辉三角第T行即可,即 C(T,0<del>T) 预处理组合公式我们用 <code>组合数学</code> 性质4那个公式. 所以我们需要预处理一下1</del>1e5的逆元,将除法转换为乘法. 最后答案就是</p>\n<blockquote>\n<p>ans=Sigma(i=1~n,c*C[实际位置] | 根据情况忽略i)</p>\n</blockquote>\n</blockquote>\n<h1 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h1><pre><code>#include&lt;bits/stdc++.h&gt;\nusing namespace std;\ntypedef long long LL;\nconst int MOD = 1e9+7;\nconst int maxn = 1e5+7;\n\nLL C[maxn];\n///逆元\nLL inv[maxn];\nvoid init_(){\n    inv[1]=1;\n    for(int i=2;i&lt;maxn;++i){\n        inv[i]=(MOD-MOD/i)*1ll*inv[MOD%i]%MOD;\n    }\n}\n\n///快速幂模求逆元,调动方式quick_mod(i,MOD-2)\n//这里我们用预处理.\nLL quick_mod(LL x, int n){\n    LL ret = 1;\n    while(n){\n        if(n &amp; 1) ret = ret * x % MOD;\n        x = x * x %MOD;\n        n &gt;&gt;= 1;\n    }\n    return ret;\n}\n\nvoid init(int t){\n    C[0]=1;\n    for(int i=1;i&lt;=t;++i){\n        C[i]=C[i-1]*(t-i+1)*1ll%MOD*inv[i]%MOD;\n        //printf(&quot;Num: %d %lld, INV: %lld\\n&quot;,i,C[i],inv[i]);\n    }\n}\n//判断是否同奇同偶\nbool same(int x,int y){\n    if((x&amp;1)^(y&amp;1)) return false;\n    return true;\n}\n\nint query(int t,int d){\n    if(t&amp;1){\n        return t/2-d/2;\n    }\n    return t/2+(d-1)/2;\n}\n\nint main(){\n    init_();\n    int n,T,w;\n    while(~scanf(&quot;%d%d%d&quot;,&amp;n,&amp;T,&amp;w)){\n        init(T);\n        LL ans=0;\n        for(int i=1;i&lt;=n;++i){\n            int x,c;\n            scanf(&quot;%d%d&quot;,&amp;x,&amp;c);\n            int dist=abs(x-w);\n            if(!same(T+1,dist) &amp;&amp; dist&lt;T+1){\n                ans=(ans+c*C[query(T+1,dist)]%MOD)%MOD;\n            }\n        }\n        printf(&quot;%lld\\n&quot;,ans);\n    }\n\n    return 0;\n}</code></pre>","text":"迟来的祝福,新年快乐.Link要登录http://acm.sdut.edu.cn/onlinejudge2/index.php/Home/Index/problemdetail/pid/3895.htmlType: 杨辉三角&lt;-组合数学,逆元题意假设x位置有一个烟花,则每秒","link":"","raw":null,"photos":[],"categories":[{"name":"Sdut","slug":"Sdut","count":11,"path":"api/categories/Sdut.json"},{"name":"二项式定理","slug":"Sdut/二项式定理","count":1,"path":"api/categories/Sdut/二项式定理.json"},{"name":"数论","slug":"Sdut/二项式定理/数论","count":1,"path":"api/categories/Sdut/二项式定理/数论.json"},{"name":"第八届ACM山东省赛","slug":"Sdut/二项式定理/数论/第八届ACM山东省赛","count":1,"path":"api/categories/Sdut/二项式定理/数论/第八届ACM山东省赛.json"},{"name":"组合数学","slug":"Sdut/二项式定理/数论/第八届ACM山东省赛/组合数学","count":1,"path":"api/categories/Sdut/二项式定理/数论/第八届ACM山东省赛/组合数学.json"}],"tags":[{"name":"数论","slug":"数论","count":28,"path":"api/tags/数论.json"},{"name":"组合数学","slug":"组合数学","count":12,"path":"api/tags/组合数学.json"},{"name":"sdut","slug":"sdut","count":11,"path":"api/tags/sdut.json"},{"name":"第八届ACM山东省赛","slug":"第八届ACM山东省赛","count":3,"path":"api/tags/第八届ACM山东省赛.json"}]}]}