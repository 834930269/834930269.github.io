{"total":370,"pageSize":10,"pageCount":37,"data":[{"title":"51nod 1158","slug":"51nod-1158","date":"2018-03-18T10:32:44.000Z","updated":"2019-07-03T13:51:36.862Z","comments":true,"path":"api/articles/51nod-1158.json","excerpt":"","keywords":null,"cover":null,"content":"<h1 id=\"Type-悬线法-单调栈-未学-用悬线法做的\"><a href=\"#Type-悬线法-单调栈-未学-用悬线法做的\" class=\"headerlink\" title=\"Type:悬线法,单调栈(未学,用悬线法做的)\"></a>Type:悬线法,单调栈(未学,用悬线法做的)</h1><h1 id=\"提示\"><a href=\"#提示\" class=\"headerlink\" title=\"提示\"></a>提示</h1><blockquote>\n<p>蓝书P51，最大子矩阵 O(mn)</p>\n</blockquote>\n<h1 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h1><pre><code>#include&lt;cstdio&gt;\n#include&lt;algorithm&gt;\nusing namespace std;\nconst int maxn=510;\nint m,n;\nint mat[maxn][maxn],up[maxn][maxn],left[maxn][maxn],right[maxn][maxn];\n\nvoid print(){\n    printf(&quot;Up:\\n&quot;);\n    for(int i=1;i&lt;=m;++i){\n        for(int j=1;j&lt;=n;++j){\n            printf(&quot;%d &quot;,up[i][j]);\n        }\n        puts(&quot;&quot;);\n    }\n    printf(&quot;Left:\\n&quot;);\n    for(int i=1;i&lt;=m;++i){\n        for(int j=1;j&lt;=n;++j){\n            printf(&quot;%d &quot;,left[i][j]);\n        }\n        puts(&quot;&quot;);\n    }\n    printf(&quot;Right:\\n&quot;);\n    for(int i=1;i&lt;=m;++i){\n        for(int j=1;j&lt;=n;++j){\n            printf(&quot;%d &quot;,right[i][j]);\n        }\n        puts(&quot;&quot;);\n    }\n}\n\nint main(){\n    while(~scanf(&quot;%d%d&quot;,&amp;m,&amp;n)){\n        for(int i=1;i&lt;=m;++i){\n            for(int j=1;j&lt;=n;++j){\n                scanf(&quot;%d&quot;,&amp;mat[i][j]);\n            }\n        }\n        int ans=0;\n        for(int i=1;i&lt;=m;++i){\n            int lo=0,ro=n;\n            for(int j=1;j&lt;=n;++j){///从右往左扫描,维护up和left\n                if(!mat[i][j]){\n                    up[i][j]=left[i][j]=0;lo=j;\n                }else{\n                    up[i][j]=up[i-1][j]+1;\n                    left[i][j]=max(left[i-1][j],lo+1);\n                }\n            }\n            for(int j=n;j&gt;=1;--j){///维护right\n                if(!mat[i][j]){\n                    right[i][j]=n+1;ro=j-1;\n                }else{\n                    right[i][j]=i==1?ro:min(right[i-1][j],ro);\n                    ans=max(ans,up[i][j]*(right[i][j]-left[i][j]+1));\n                }\n            }\n        }\n        //print();\n        printf(&quot;%d\\n&quot;,ans);\n    }\n    return 0;\n}</code></pre>","text":"Type:悬线法,单调栈(未学,用悬线法做的)提示蓝书P51，最大子矩阵 O(mn)Code#include&lt;cstdio&gt;#include&lt;algorithm&gt;using namespace std;const int maxn=510;int m,n;","link":"","raw":null,"photos":[],"categories":[{"name":"51nod","slug":"51nod","count":12,"path":"api/categories/51nod.json"},{"name":"悬线法","slug":"51nod/悬线法","count":1,"path":"api/categories/51nod/悬线法.json"}],"tags":[{"name":"51nod","slug":"51nod","count":12,"path":"api/tags/51nod.json"},{"name":"悬线法","slug":"悬线法","count":3,"path":"api/tags/悬线法.json"}]},{"title":"三角函数+公式推导+部分C++函数","slug":"asadafas","date":"2018-03-18T02:16:49.000Z","updated":"2019-07-03T13:51:36.863Z","comments":true,"path":"api/articles/asadafas.json","excerpt":"","keywords":null,"cover":null,"content":"<pre><code>两角和的公式\n\n  sin(A+B)=sinAcosB+cosAsinB sin(A-B)=sinAcosB-sinBcosA\n\n  cos(A+B)=cosAcosB-sinAsinB cos(A-B)=cosAcosB+sinAsinB\n\n  tan(A+B)=(tanA+tanB)/(1-tanAtanB) tan(A-B)=(tanA-tanB)/(1+tanAtanB)\n\n  cot(A+B)=(cotAcotB-1)/(cotB+cotA) cot(A-B)=(cotAcotB+1)/(cotB-cotA)\n\n  倍角的公式\n\n  tan2A=2tanA/(1-tan2A) cot2A=(cot2A-1)/2cota\n\n  cos2a=cos2a-sin2a=2cos2a-1=1-2sin2a\n\n  sinα+sin(α+2π/n)+sin(α+2π*2/n)+sin(α+2π*3/n)+……+sin[α+2π*(n-1)/n]=0\n\n  cosα+cos(α+2π/n)+cos(α+2π*2/n)+cos(α+2π*3/n)+……+cos[α+2π*(n-1)/n]=0 以及\n\n  sin^2(α)+sin^2(α-2π/3)+sin^2(α+2π/3)=3/2\n\n  tanAtanBtan(A+B)+tanA+tanB-tan(A+B)=0\n\n  四倍角之公式：\n\n  sin4A=-4*(cosA*sinA*(2*sinA^2-1))\n\n  cos4A=1+(-8*cosA^2+8*cosA^4)\n\n  tan4A=(4*tanA-4*tanA^3)/(1-6*tanA^2+tanA^4)\n\n  五倍将式：\n\n  sin5A=16sinA^5-20sinA^3+5sinA\n\n  cos5A=16cosA^5-20cosA^3+5cosA\n\n  tan5A=tanA*(5-10*tanA^2+tanA^4)/(1-10*tanA^2+5*tanA^4)\n\n  六倍将式：\n\n  sin6A=2*(cosA*sinA*(2*sinA+1)*(2*sinA-1)*(-3+4*sinA^2))\n\n  cos6A=((-1+2*cosA^2)*(16*cosA^4-16*cosA^2+1))\n\n  tan6A=(-6*tanA+20*tanA^3-6*tanA^5)/(-1+15*tanA^2-15*tanA^4+tanA^6)\n\n  七倍将式：\n\n  sin7A=-(sinA*(56*sinA^2-112*sinA^4-7+64*sinA^6))\n\n  cos7A=(cosA*(56*cosA^2-112*cosA^4+64*cosA^6-7))\n\n  tan7A=tanA*(-7+35*tanA^2-21*tanA^4+tanA^6)/(-1+21*tanA^2-35*tanA^4+7*tanA^6)\n\n  八倍将式：\n\n  sin8A=-8*(cosA*sinA*(2*sinA^2-1)*(-8*sinA^2+8*sinA^4+1))\n\n  cos8A=1+(160*cosA^4-256*cosA^6+128*cosA^8-32*cosA^2)\n\n  tan8A=-8*tanA*(-1+7*tanA^2-7*tanA^4+tanA^6)/(1-28*tanA^2+70*tanA^4-28*tanA^6+tanA^8)\n\n  九倍将式：\n\n  sin9A=(sinA*(-3+4*sinA^2)*(64*sinA^6-96*sinA^4+36*sinA^2-3))\n\n  cos9A=(cosA*(-3+4*cosA^2)*(64*cosA^6-96*cosA^4+36*cosA^2-3))\n\n  tan9A=tanA*(9-84*tanA^2+126*tanA^4-36*tanA^6+tanA^8)/(1-36*tanA^2+126*tanA^4-84*tanA^6+9*tanA^8)\n\n  十倍将式：\n\n  sin10A=2*(cosA*sinA*(4*sinA^2+2*sinA-1)*(4*sinA^2-2*sinA-1)*(-20*sinA^2+5+16*sinA^4))\n\n  cos10A=((-1+2*cosA^2)*(256*cosA^8-512*cosA^6+304*cosA^4-48*cosA^2+1))\n\n  tan10A=-2*tanA*(5-60*tanA^2+126*tanA^4-60*tanA^6+5*tanA^8)/(-1+45*tanA^2-210*tanA^4+210*tanA^6-45*tanA^8+tanA^10)\n\n  ·万能公式：\n\n  sinα=2tan(α/2)/[1+tan^2(α/2)]\n\n  cosα=[1-tan^2(α/2)]/[1+tan^2(α/2)]\n\n  tanα=2tan(α/2)/[1-tan^2(α/2)]\n\n  半将式\n\n  sin(A/2)=√((1-cosA)/2) sin(A/2)=-√((1-cosA)/2)\n\n  cos(A/2)=√((1+cosA)/2) cos(A/2)=-√((1+cosA)/2)\n\n  tan(A/2)=√((1-cosA)/((1+cosA)) tan(A/2)=-√((1-cosA)/((1+cosA))\n\n  cot(A/2)=√((1+cosA)/((1-cosA)) cot(A/2)=-√((1+cosA)/((1-cosA))\n\n  和差化积\n\n  2sinAcosB=sin(A+B)+sin(A-B) 2cosAsinB=sin(A+B)-sin(A-B)\n\n  2cosAcosB=cos(A+B)-sin(A-B) -2sinAsinB=cos(A+B)-cos(A-B)\n\n  sinA+sinB=2sin((A+B)/2)cos((A-B)/2 cosA+cosB=2cos((A+B)/2)sin((A-B)/2)\n\n  tanA+tanB=sin(A+B)/cosAcosB tanA-tanB=sin(A-B)/cosAcosB\n\n  cotA+cotBsin(A+B)/sinAsinB -cotA+cotBsin(A+B)/sinAsinB\n\n  某些数列前n项和\n\n  1+2+3+4+5+6+7+8+9+…+n=n(n+1)/2 1+3+5+7+9+11+13+15+…+(2n-1)=n2\n\n  2+4+6+8+10+12+14+…+(2n)=n(n+1) 1^2+2^2+3^2+4^2+5^2+6^2+7^2+8^2+…+n^2=n(n+1)(2n+1)/6\n\n  1^3+2^3+3^3+4^3+5^3+6^3+…n^3=(n(n+1)/2)^2 1*2+2*3+3*4+4*5+5*6+6*7+…+n(n+1)=n(n+1)(n+2)/3\n\n  正弦定理 a/sinA=b/sinB=c/sinC=2R 注： 其中 R 表示三角形的外接圆半径\n\n  余弦定理 b2=a2+c2-2accosB 注：角B是边a和边c的夹角\n\n  乘法与因式分 a2-b2=(a+b)(a-b) a3+b3=(a+b)(a2-ab+b2) a3-b3=(a-b(a2+ab+b2)\n\n  三角不等式 |a+b|≤|a|+|b| |a-b|≤|a|+|b| |a|≤b&lt;=&gt;-b≤a≤b\n\n  |a-b|≥|a|-|b| -|a|≤a≤|a|</code></pre><h1 id=\"推论\"><a href=\"#推论\" class=\"headerlink\" title=\"推论\"></a>推论</h1><pre><code>三角形ABC中: tan(a/2)tan(b/2)+tan(b/2)tan(c/2)+tan(a/2)tan(c/2)=1\n\nS(ABC)=[1/2(a+b+c)]r(△ABC内接圆半径)\n\n三角形ABC中: 设 1/2周长为 p=1/2(a+b+c) \n            tan(a/2)=r/(p-b)</code></pre>","text":"两角和的公式  sin(A+B)=sinAcosB+cosAsinB sin(A-B)=sinAcosB-sinBcosA  cos(A+B)=cosAcosB-sinAsinB cos(A-B)=cosAcosB+sinAsinB  tan(A+B)=(tanA+tanB)/(","link":"","raw":null,"photos":[],"categories":[{"name":"未分类","slug":"未分类","count":16,"path":"api/categories/未分类.json"}],"tags":[]},{"title":"动态规划","slug":"dynamic-program","date":"2018-03-13T13:24:32.000Z","updated":"2019-07-03T13:51:36.863Z","comments":true,"path":"api/articles/dynamic-program.json","excerpt":"","keywords":null,"cover":null,"content":"<blockquote>\n<p>痛并不快乐着..</p>\n</blockquote>\n<h1 id=\"数位dp\"><a href=\"#数位dp\" class=\"headerlink\" title=\"数位dp\"></a>数位dp</h1><blockquote>\n<p>HDU 3555</p>\n<blockquote>\n<p>不要49</p>\n</blockquote>\n</blockquote>\n<pre><code>#include&lt;bits/stdc++.h&gt;\nusing namespace std;\ntypedef long long LL;\n\nLL dp[20][3];\nint digit[20];\n\nLL dfs(int pos,int pre,int state,bool jud){\n    //cout&lt;&lt;pos&lt;&lt;&quot; &quot;&lt;&lt;state&lt;&lt;endl;\n    ///数位递归到0则返回\n    if(pos==0)\n        return 1;\n    ///如果有数据就返回数据\n    if(!jud&amp;&amp;dp[pos][state]!=-1)\n        return dp[pos][state];\n\n    LL ans=0;\n    int ed=jud?digit[pos]:9;\n    //cout&lt;&lt;ed&lt;&lt;endl;\n    for(int i=0;i&lt;=ed;++i){\n        if(pre==4&amp;&amp;i==9)continue;\n        ans+=dfs(pos-1,i,i==4,jud&amp;&amp;i==ed);\n    }\n    if(!jud){///不取上界时,可以取满\n        dp[pos][state]=ans;\n    }\n    return ans;\n}\n\n///数字处理函数\nLL cal(LL x){\n    int pos=0;\n    while(x){\n        digit[++pos]=x%10;\n        x/=10;\n    }\n    return dfs(pos,0,0,true);\n}\n\nint main(){\n    memset(dp,-1,sizeof(dp));\n    int T;\n    for(scanf(&quot;%d&quot;,&amp;T);T;T--){\n        LL n;\n        scanf(&quot;%lld&quot;,&amp;n);\n        printf(&quot;%lld\\n&quot;,n-cal(n)+1);\n    }\n    return 0;\n}</code></pre><blockquote>\n<p>HDU 2089</p>\n</blockquote>\n<pre><code>#include&lt;bits/stdc++.h&gt;\nusing namespace std;\ntypedef long long LL;\nconst int maxn=1000000+7;\nLL dp[20][3];\nint digit[20];\n\nLL dfs(int pos,int pre,int state,bool jud){\n    //cout&lt;&lt;pos&lt;&lt;&quot; &quot;&lt;&lt;state&lt;&lt;endl;\n    ///数位递归到0则返回\n    if(pos==0)\n        return 1;\n    ///如果有数据就返回数据\n    if(!jud&amp;&amp;dp[pos][state]!=-1)\n        return dp[pos][state];\n\n    LL ans=0;\n    int ed=jud?digit[pos]:9;//这句是判断他的上界\n    //cout&lt;&lt;ed&lt;&lt;endl;\n    for(int i=0;i&lt;=ed;++i){\n        if(pre==6&amp;&amp;i==2)continue;\n        if(i==4)continue;\n        ans+=dfs(pos-1,i,i==6,jud&amp;&amp;i==ed);\n    }\n    if(!jud){///不取上界时,可以取满\n        dp[pos][state]=ans;\n    }\n    return ans;\n}\n\n///数字处理函数\nLL cal(LL x){\n    int pos=0;\n    //cout&lt;&lt;&quot;tx: &quot;;\n    while(x){\n        digit[++pos]=x%10;\n        //cout&lt;&lt;x%10&lt;&lt;endl;\n        x/=10;\n    }\n    return dfs(pos,0,0,true);\n}\n\nint main(){\n    memset(dp,-1,sizeof(dp));\n    LL n,m;\n    while(~scanf(&quot;%lld%lld&quot;,&amp;n,&amp;m) &amp;&amp; n+m){\n        printf(&quot;%lld\\n&quot;,cal(m)-cal(n-1));\n    }\n    return 0;\n}</code></pre>","text":"痛并不快乐着..数位dpHDU 3555不要49#include&lt;bits/stdc++.h&gt;using namespace std;typedef long long LL;LL dp[20][3];int digit[20];LL dfs(int pos,int ","link":"","raw":null,"photos":[],"categories":[{"name":"动态规划","slug":"动态规划","count":6,"path":"api/categories/动态规划.json"},{"name":"数位DP","slug":"动态规划/数位DP","count":1,"path":"api/categories/动态规划/数位DP.json"}],"tags":[{"name":"动态规划","slug":"动态规划","count":24,"path":"api/tags/动态规划.json"},{"name":"数位DP","slug":"数位DP","count":3,"path":"api/tags/数位DP.json"}]},{"title":"UVa 11021","slug":"uva-11021","date":"2018-03-13T01:56:34.000Z","updated":"2019-07-03T13:51:36.863Z","comments":true,"path":"api/articles/uva-11021.json","excerpt":"","keywords":null,"cover":null,"content":"<h1 id=\"Type-概率\"><a href=\"#Type-概率\" class=\"headerlink\" title=\"Type: 概率\"></a>Type: 概率</h1><h1 id=\"题解\"><a href=\"#题解\" class=\"headerlink\" title=\"题解\"></a>题解</h1><blockquote>\n<p>有点难以理解题解的递推式,把那句f(i-1)表示i-1天后全部死亡改成f(i-1)表示i-1天后一个不生的概率可能更好理解一点吧 不知道怎么证明这个式子,思维还是不强</p>\n</blockquote>\n<h1 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h1><pre><code>#include&lt;bits/stdc++.h&gt;\nusing namespace std;\nconst int maxn=1010;\n\ndouble f[maxn],P[maxn];;\nint n,k,m,T;\n\nint main(){\n    cin&gt;&gt;T;\n    for(int i=1;i&lt;=T;++i){\n        cin&gt;&gt;n&gt;&gt;k&gt;&gt;m;\n        for(int j=0;j&lt;n;++j) cin&gt;&gt;P[j];\n        f[0]=0;f[1]=P[0];\n        for(int j=2;j&lt;=m;++j){\n            f[j]=0;\n            for(int t=0;t&lt;n;++t){\n                f[j]+=(P[t]*pow(f[j-1],t));\n            }\n        }\n        printf(&quot;Case #%d: %.7lf\\n&quot;,i,pow(f[m],k));\n    }\n    return 0;\n}</code></pre>","text":"Type: 概率题解有点难以理解题解的递推式,把那句f(i-1)表示i-1天后全部死亡改成f(i-1)表示i-1天后一个不生的概率可能更好理解一点吧 不知道怎么证明这个式子,思维还是不强Code#include&lt;bits/stdc++.h&gt;using namespac","link":"","raw":null,"photos":[],"categories":[{"name":"UVa","slug":"UVa","count":35,"path":"api/categories/UVa.json"},{"name":"概率论","slug":"UVa/概率论","count":3,"path":"api/categories/UVa/概率论.json"}],"tags":[{"name":"概率论","slug":"概率论","count":4,"path":"api/tags/概率论.json"},{"name":"UVa","slug":"UVa","count":39,"path":"api/tags/UVa.json"}]},{"title":"概率论","slug":"lazy","date":"2018-03-12T11:53:37.000Z","updated":"2019-07-03T13:51:36.862Z","comments":true,"path":"api/articles/lazy.json","excerpt":"","keywords":null,"cover":null,"content":"<blockquote>\n<p>Gay绿论</p>\n</blockquote>\n<h1 id=\"条件概率\"><a href=\"#条件概率\" class=\"headerlink\" title=\"条件概率\"></a>条件概率</h1><h1 id=\"全概率\"><a href=\"#全概率\" class=\"headerlink\" title=\"全概率\"></a>全概率</h1>","text":"Gay绿论条件概率全概率","link":"","raw":null,"photos":[],"categories":[{"name":"概率论","slug":"概率论","count":1,"path":"api/categories/概率论.json"}],"tags":[{"name":"概率论","slug":"概率论","count":4,"path":"api/tags/概率论.json"}]},{"title":"51nod 1225 余数之和","slug":"51nod-1225-yszh","date":"2018-03-12T10:04:08.000Z","updated":"2019-07-03T13:51:36.862Z","comments":true,"path":"api/articles/51nod-1225-yszh.json","excerpt":"","keywords":null,"cover":null,"content":"<h1 id=\"Type-逆元-数论-思维-同余定理\"><a href=\"#Type-逆元-数论-思维-同余定理\" class=\"headerlink\" title=\"Type:逆元,数论,思维,同余定理\"></a>Type:逆元,数论,思维,同余定理</h1><h1 id=\"直接上代码-题解在代码中-这道题有点耗时间-但挺有趣的\"><a href=\"#直接上代码-题解在代码中-这道题有点耗时间-但挺有趣的\" class=\"headerlink\" title=\"直接上代码,题解在代码中,这道题有点耗时间,但挺有趣的\"></a>直接上代码,题解在代码中,这道题有点耗时间,但挺有趣的</h1><pre><code>#include&lt;bits/stdc++.h&gt;\nusing namespace std;\ntypedef long long LL;\nconst LL mod=1e9+7;\nLL N;\n/*打表\nvoid Table(int NN){\n    for(int i=1;i&lt;=NN;++i){\n        printf(&quot;%04d-%04d &quot;,i,NN%i);\n    }\n}\n*/\nLL fast_mod(LL a,LL n,LL Mod){\n    LL ans=1;\n    while(n){\n        if(n&amp;1){\n            ans=(ans*a)%Mod;\n        }\n        a=(a*a)%Mod;\n        n&gt;&gt;=1;\n    }\n    return ans;\n}\n\nLL inv2=fast_mod(2,mod-2,mod);\n///对照算法\nLL hh(){\n    LL n=N;\n    LL ans;\n    ans=n%mod*(n%mod)%mod;\n    for(LL t,r,i=1;i&lt;=n;++i) {\n        t=n/i;\n        r=n/t;\n        ans=ans-((r-i+1)%mod*((r+i)%mod))%mod*inv2%mod*t%mod;\n        while(ans&lt;0) ans+=mod;\n        i=r;\n    }\n    return ans;\n}\n\n///本来想的是计算当前N/i相同的数量--结果为:\n///(N-tmp*i)/i 即计算在 N-当前数字*(N/i)后还有多少个数字可以\n///整分给(N/i),由于这个方法利用了除法,所以处理除法溢出有点麻烦\n///1e9左右就炸掉了\n///乘法溢出也很麻烦\n\n///最好的方法就是 N/tmp 理解为最后一个除以 N 等于 tmp 的数字是几\n\n///式子: F[N]=N*N-Sigma(N/i*i | i∈[1,N])\n///其中 括号内的式子的 N/i 有sqrt(n)个不同的值\n///证: 设 tmp=100/i 则 tmp*i=100 故 Count(tmp)&lt;=sqrt(100)\n///并且可以看出 相同的 N/i 对应的 i 是连续的.\n///即我们可以用等差数列求和公式来求 当 tmp=N/i 时 i 的和\n///用等差数列求和时/2用 2的逆元来做\\\n\n///自己坐着坐着就莫名其妙和他一样了= =\nLL solve(){\n    LL ans=N%mod*(N%mod)%mod;\n    for(LL i=1;i&lt;=N;){\n        LL tmp=N/i;\n        LL t=N/tmp;\n        tmp=((i+t)%mod*((t-i+1)%mod))%mod*inv2%mod*tmp%mod;\n        ans=(ans%mod-tmp%mod+mod)%mod;\n        i=t+1;\n    }\n    return ans;\n}\n\nvoid dui_pai(){\n    for(LL i=1;i&lt;=1000000;++i){\n        N=i;\n        if(hh()!=solve()) printf(&quot;%lld Faild\\n&quot;,N);\n    }\n    puts(&quot;Done&quot;);\n}\n\nint main(){\n    //dui_pai();\n    while(~scanf(&quot;%lld&quot;,&amp;N)){\n        printf(&quot;%lld\\n&quot;,solve());\n    }\n    return 0;\n}</code></pre>","text":"Type:逆元,数论,思维,同余定理直接上代码,题解在代码中,这道题有点耗时间,但挺有趣的#include&lt;bits/stdc++.h&gt;using namespace std;typedef long long LL;const LL mod=1e9+7;LL N;/","link":"","raw":null,"photos":[],"categories":[{"name":"51nod","slug":"51nod","count":12,"path":"api/categories/51nod.json"},{"name":"同余定理","slug":"51nod/同余定理","count":1,"path":"api/categories/51nod/同余定理.json"},{"name":"数论","slug":"51nod/同余定理/数论","count":1,"path":"api/categories/51nod/同余定理/数论.json"},{"name":"逆元","slug":"51nod/同余定理/数论/逆元","count":1,"path":"api/categories/51nod/同余定理/数论/逆元.json"}],"tags":[{"name":"数论","slug":"数论","count":28,"path":"api/tags/数论.json"},{"name":"51nod","slug":"51nod","count":12,"path":"api/tags/51nod.json"},{"name":"逆元","slug":"逆元","count":4,"path":"api/tags/逆元.json"},{"name":"同余定理","slug":"同余定理","count":3,"path":"api/tags/同余定理.json"}]},{"title":"LA 4670","slug":"la-4670","date":"2018-03-11T06:59:12.000Z","updated":"2019-07-03T13:51:36.862Z","comments":true,"path":"api/articles/la-4670.json","excerpt":"","keywords":null,"cover":null,"content":"<h1 id=\"Type-AC自动机\"><a href=\"#Type-AC自动机\" class=\"headerlink\" title=\"Type:AC自动机\"></a>Type:AC自动机</h1><h1 id=\"题意\"><a href=\"#题意\" class=\"headerlink\" title=\"题意\"></a>题意</h1><blockquote>\n<p>给你一堆子串和一个主串</p>\n<blockquote>\n<p>问你在主串中出现次数最多的子串有哪些,最后结果按字典序排列</p>\n</blockquote>\n</blockquote>\n<h1 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h1><pre><code>#include&lt;bits/stdc++.h&gt;\nusing namespace std;\n\nconst int maxn=11000;\nconst int maxm=152;\nconst int maxt=1e6+6;\n\nint T,N,tot_len;\nchar str[maxm][80],tot[maxt];\n\nstruct AC_AutoMaton{\n    static const int sigma_size=26;\n\n    int ch[maxn][sigma_size];\n\n    int f[maxn];\n\n    int cnt[maxn],val[maxn];\n    bool vis[maxn][sigma_size];\n\n    int siz,root,max_time;\n\n    vector&lt;string&gt; ans;\n\n    int newNode(){\n        for(int i=0;i&lt;sigma_size;++i){\n            ch[siz][i]=0;\n        }\n        for(int i=0;i&lt;sigma_size;++i){\n            vis[siz][i]=false;\n        }\n        f[siz]=val[siz]=0;\n        return siz++;\n    }\n\n    void init(){\n        ans.clear();\n        for(int i=0;i&lt;maxn;++i) val[i]=cnt[i]=0;\n        siz=0;root=0;max_time=0;\n        newNode();\n    }\n\n    int ord(char c){\n        if(isupper(c))\n            c=tolower(c);\n        return (int)(c-&apos;a&apos;);\n    }\n\n    void insert(char *s,int v){\n        int u=root,n=strlen(s);\n        for(int i=0;i&lt;n;++i){\n            int c=ord(s[i]);\n            if(!ch[u][c]) ch[u][c]=newNode();\n            u=ch[u][c];\n       }\n       val[u]=v;\n    }\n\n    void getFail(){\n        queue&lt;int&gt; Q;\n        Q.push(root);\n        while(!Q.empty()){\n            int k=Q.front();\n            Q.pop();\n            for(int c=0;c&lt;sigma_size;++c){\n                if(ch[k][c]){\n                    f[ch[k][c]]=k?ch[f[k]][c]:0;\n                    Q.push(ch[k][c]);\n                }\n                else ch[k][c]=ch[f[k]][c];\n            }\n        }\n    }\n\n    void Find(char *s){\n        int u=0,n=tot_len;\n        for(int i=0;i&lt;n;++i){\n            int c=ord(s[i]);\n            ///下面这句加不加都一样\n            //while(u &amp;&amp; !ch[u][c]) u=f[u];\n            u=ch[u][c];\n\n            int p=u;\n            //cout&lt;&lt;i&lt;&lt;&quot;  &quot;&lt;&lt;u&lt;&lt;&quot;: &quot;&lt;&lt;c&lt;&lt;endl;\n            ///while是用来判断子串的.这道题不需要加\n            while(p &amp;&amp; val[p]){\n                if(!vis[p][c]){\n                    cnt[val[p]]++;\n                    max_time=max(cnt[val[p]],max_time);\n                    p=f[p];\n                    vis[p][c]=true;\n                }\n            }\n        }\n    }\n\n    void print(){\n        printf(&quot;%d\\n&quot;,max_time);\n        for(int i=1;i&lt;=N;++i){\n            if(cnt[i]==max_time){\n                ans.push_back(str[i]);\n            }\n        }\n        sort(ans.begin(),ans.end());\n        for(int i=0;i&lt;ans.size();++i){\n            cout&lt;&lt;ans[i]&lt;&lt;endl;\n        }\n    }\n}aho;\n\nint main(){\n    while(~scanf(&quot;%d&quot;,&amp;N) &amp;&amp; N){\n        aho.init();\n        for(int i=1;i&lt;=N;++i){\n            scanf(&quot;%s&quot;,str[i]);\n            aho.insert(str[i],i);\n        }\n        getchar();\n        aho.getFail();\n        tot_len=0;\n        //scanf(&quot;%[^\\n]&quot;,str);\n        gets(tot);\n        tot_len=strlen(tot);\n        //cout&lt;&lt;tot_len&lt;&lt;endl;\n        aho.Find(tot);\n        aho.print();\n    }\n    return 0;\n}</code></pre>","text":"Type:AC自动机题意给你一堆子串和一个主串问你在主串中出现次数最多的子串有哪些,最后结果按字典序排列Code#include&lt;bits/stdc++.h&gt;using namespace std;const int maxn=11000;const int maxm","link":"","raw":null,"photos":[],"categories":[{"name":"AC自动机","slug":"AC自动机","count":4,"path":"api/categories/AC自动机.json"},{"name":"LA","slug":"AC自动机/LA","count":1,"path":"api/categories/AC自动机/LA.json"},{"name":"字符串处理","slug":"AC自动机/LA/字符串处理","count":1,"path":"api/categories/AC自动机/LA/字符串处理.json"}],"tags":[{"name":"字符串处理","slug":"字符串处理","count":7,"path":"api/tags/字符串处理.json"},{"name":"AC自动机","slug":"AC自动机","count":4,"path":"api/tags/AC自动机.json"},{"name":"LA","slug":"LA","count":8,"path":"api/tags/LA.json"}]},{"title":"HDU 5880","slug":"hdu-5880","date":"2018-03-11T03:46:16.000Z","updated":"2019-07-03T13:51:36.862Z","comments":true,"path":"api/articles/hdu-5880.json","excerpt":"","keywords":null,"cover":null,"content":"<h1 id=\"Type-AC自动机\"><a href=\"#Type-AC自动机\" class=\"headerlink\" title=\"Type: AC自动机\"></a>Type: AC自动机</h1><h1 id=\"题意\"><a href=\"#题意\" class=\"headerlink\" title=\"题意\"></a>题意</h1><blockquote>\n<p>给你N个子串,一个主串,让你过滤掉在主串中出现过的子串.被过滤掉的用*表示</p>\n<blockquote>\n<p>每个子串是由小写字母组成</p>\n</blockquote>\n</blockquote>\n<h1 id=\"题解\"><a href=\"#题解\" class=\"headerlink\" title=\"题解\"></a>题解</h1><blockquote>\n<p>AC自动机,一开始被两个样例卡住了</p>\n<blockquote>\n<p>1- 子串： abcd bc 主串: abcef 匹配不到 bc 2- 子串: a ab abc abcd 主串: aabcd 匹配不到 abcd</p>\n<blockquote>\n<p>第一种情况是因为当你遍历到abcd这条路径的c节点时,如果因为下一个是f就判断为失配并且不继续向下走,则就无法再匹配到bc.</p>\n<blockquote>\n<p>解决方法,在每次判断到失配的时候,新开一个函数从开始失配的节点 这里是 c ,从这个节点开始找他的失陪路径,知道找到 第一个尾节点 或 根节点 就停止,目标串即为最长被匹配串,不需要再去匹配他的子串了.</p>\n</blockquote>\n<p>第二种情况是因为一开始写代码每次循环时直接将u查找到了根节点,所以如果一个子串前面是另一个串的子串,那么将永远无法匹配到另一个子串.</p>\n<blockquote>\n<p>解决方法,不改动u,借助临时变量来更改u达到查找子串的目的.</p>\n</blockquote>\n</blockquote>\n</blockquote>\n</blockquote>\n<h1 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h1><pre><code>#include&lt;bits/stdc++.h&gt;\nusing namespace std;\n\nconst int maxn=1000000+6;\n\nint T,N,tot_len;\nchar str[maxn],len[maxn];\n\nstruct AC_AutoMaton{\n    static const int sigma_size=26;\n\n    int ch[maxn][sigma_size];\n\n    int f[maxn];\n\n    int cle[maxn],val[maxn];\n\n    int siz,root;\n\n    int newNode(){\n        for(int i=0;i&lt;sigma_size;++i){\n            ch[siz][i]=0;\n        }\n        f[siz]=val[siz]=0;\n        return siz++;\n    }\n\n    void init(){\n        for(int i=0;i&lt;maxn;++i) val[i]=0;\n\n        siz=0;root=0;\n        newNode();\n    }\n\n    int ord(char c){\n        if(isupper(c))\n            c=tolower(c);\n        return (int)(c-&apos;a&apos;);\n    }\n\n    void insert(char *s,int v){\n        int u=root,n=strlen(s);\n        for(int i=0;i&lt;n;++i){\n            int c=ord(s[i]);\n            if(!ch[u][c]) ch[u][c]=newNode();\n            u=ch[u][c];\n       }\n       val[u]=v;\n    }\n\n    void getFail(){\n        queue&lt;int&gt; Q;\n        Q.push(root);\n        while(!Q.empty()){\n            int k=Q.front();\n            Q.pop();\n            for(int c=0;c&lt;sigma_size;++c){\n                if(ch[k][c]){\n                    f[ch[k][c]]=k?ch[f[k]][c]:0;\n                    Q.push(ch[k][c]);\n                }\n                else ch[k][c]=ch[f[k]][c];\n            }\n        }\n    }\n\n    void add(int u,int i){\n        while(u){\n            if(val[u]){\n                int t=len[val[u]];\n                for(int r=0;r&lt;t;++r){\n                    cle[i-r]=1;\n                }\n                return;\n            }\n            u=f[u];\n        }\n    }\n\n    void Find(char *s){\n        int u=0,n=tot_len;\n        for(int i=0;i&lt;tot_len;++i) cle[i]=0;\n        for(int i=0;i&lt;n;++i){\n            if(!isalpha(s[i])){\n                u=0;\n                continue;\n            }\n            int c=ord(s[i]);\n            ///下面这句加不加都一样\n            //while(u &amp;&amp; !ch[u][c]) u=f[u];\n            u=ch[u][c];\n            /*\n            int p=u;\n            //cout&lt;&lt;i&lt;&lt;&quot;  &quot;&lt;&lt;u&lt;&lt;&quot;: &quot;&lt;&lt;c&lt;&lt;endl;\n            ///while是用来判断子串的.这道题不需要加\n            while(p &amp;&amp; val[p]){\n                p=f[p];\n            }\n            */\n            add(u,i);\n        }\n    }\n\n    void print(){\n        for(int i=0;i&lt;tot_len;++i){\n            if(cle[i]) putchar(&apos;*&apos;);\n            else putchar(str[i]);\n        }\n        printf(&quot;\\n&quot;);\n    }\n}aho;\n\nint main(){\n    scanf(&quot;%d&quot;,&amp;T);\n    while(T--){\n        aho.init();\n        scanf(&quot;%d&quot;,&amp;N);\n        for(int i=0;i&lt;N;++i){\n            scanf(&quot;%s&quot;,str);\n            aho.insert(str,i+1);\n            len[i+1]=strlen(str);\n        }\n        getchar();\n        aho.getFail();\n        tot_len=0;\n        //scanf(&quot;%[^\\n]&quot;,str);\n        gets(str);\n        tot_len=strlen(str);\n        //cout&lt;&lt;tot_len&lt;&lt;endl;\n        aho.Find(str);\n        aho.print();\n    }\n    return 0;\n}</code></pre>","text":"Type: AC自动机题意给你N个子串,一个主串,让你过滤掉在主串中出现过的子串.被过滤掉的用*表示每个子串是由小写字母组成题解AC自动机,一开始被两个样例卡住了1- 子串： abcd bc 主串: abcef 匹配不到 bc 2- 子串: a ab abc abcd 主串: a","link":"","raw":null,"photos":[],"categories":[{"name":"AC自动机","slug":"AC自动机","count":4,"path":"api/categories/AC自动机.json"},{"name":"HDU","slug":"AC自动机/HDU","count":2,"path":"api/categories/AC自动机/HDU.json"},{"name":"字符串处理","slug":"AC自动机/HDU/字符串处理","count":2,"path":"api/categories/AC自动机/HDU/字符串处理.json"}],"tags":[{"name":"字符串处理","slug":"字符串处理","count":7,"path":"api/tags/字符串处理.json"},{"name":"HDU","slug":"HDU","count":14,"path":"api/tags/HDU.json"},{"name":"AC自动机","slug":"AC自动机","count":4,"path":"api/tags/AC自动机.json"}]},{"title":"HDU 2222","slug":"hdu-2222","date":"2018-03-10T13:20:19.000Z","updated":"2019-07-03T13:51:36.862Z","comments":true,"path":"api/articles/hdu-2222.json","excerpt":"","keywords":null,"cover":null,"content":"<h1 id=\"Type-AC自动机\"><a href=\"#Type-AC自动机\" class=\"headerlink\" title=\"Type: AC自动机\"></a>Type: AC自动机</h1><h1 id=\"题意\"><a href=\"#题意\" class=\"headerlink\" title=\"题意\"></a>题意</h1><blockquote>\n<p>给你几个子串,再给你一个主串,问你有多少个子串在主串中出现过.</p>\n</blockquote>\n<h1 id=\"输入\"><a href=\"#输入\" class=\"headerlink\" title=\"输入\"></a>输入</h1><blockquote>\n<p>T,N,接下来N行输入N个字符串,最后一行输入一个主串.</p>\n</blockquote>\n<h1 id=\"输出\"><a href=\"#输出\" class=\"headerlink\" title=\"输出\"></a>输出</h1><blockquote>\n<p>一个整数,有多少子串可以在主串中被匹配到</p>\n</blockquote>\n<h1 id=\"题解\"><a href=\"#题解\" class=\"headerlink\" title=\"题解\"></a>题解</h1><blockquote>\n<p>注意,每个子串可能是相同的,所以我们不能在尾节点记录子串的下标,而应该记录子串的个数.最后加进去即可</p>\n</blockquote>\n<h1 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h1><pre><code>#include&lt;bits/stdc++.h&gt;\nusing namespace std;\n\nconst int maxn=(int)500005;\nconst int max_tot=(int)1e6+6;\n\nint T,N;\nchar str[10010][60],tot[max_tot];\n\nstruct AC_AutoMaton{\n    static const int sigma_size=26;\n    static const char first_caractar=&apos;a&apos;;\n    int ch[maxn][sigma_size];\n    int f[maxn],last[maxn];\n    int cnt[maxn],val[maxn];\n    int siz;\n\n    int ans;\n\n    void init(){\n        siz=ans=0;\n        memset(ch,0,sizeof(ch));\n        memset(val,0,sizeof(val));\n    }\n\n    int ord(char c){\n        return c-first_caractar;\n    }\n\n    void insert(char *s){\n        int u=0,n=strlen(s);\n        for(int i=0;i&lt;n;++i){\n            int c=ord(s[i]);\n            if(!ch[u][c]) ch[u][c]=++siz;\n            u=ch[u][c];\n       }\n       ///表示以第u棵节点为字符串最后一个字符节点的个数\n       ///如果想存储该节点代表的是哪个字符串.即存储该字符串的下标\n       ///val[u]=v;(v是下标)\n       ///但是这样存储就会出现无法统计之前有多少个重复字符串\n       ///比如这道题如果输入\n       ///3\n       ///sha\n       ///sha\n       ///sha\n       ///shashasha\n       ///则用第一种方法最后结果是3\n       ///但用第二种方法只能匹配一次sha\n       val[u]++;\n    }\n    //Fail树\n    void getFail(){\n        queue&lt;int&gt; Q;\n        f[0]=0;\n        ///遍历取出第一个节点所有的前向字符\n        for(int c=0;c&lt;sigma_size;++c){\n            int u=ch[0][c];\n            if(u){\n                f[u]=last[u]=0;\n                Q.push(u);\n            }\n        }\n        while(!Q.empty()){\n            int k=Q.front();\n            Q.pop();\n            for(int c=0;c&lt;sigma_size;++c){\n                int u=ch[k][c];\n                if(!u) continue;\n                Q.push(u);\n                int v=f[k];\n                while(v &amp;&amp; !ch[v][c]) v=f[v];\n                f[u]=ch[v][c];\n                last[u]=val[f[u]]?f[u]:last[f[u]];\n            }\n        }\n    }\n\n    ///统计\n    void add(int u){\n        if(u){\n            if(!cnt[u]) ans+=val[u],cnt[u]=1;\n            add(last[u]);\n        }\n    }\n\n    ///多模式匹配\n    void Find(char *s){\n        int u=0,n=strlen(s);\n        memset(cnt,0,sizeof(cnt));\n        for(int i=0;i&lt;n;++i){\n            int c=ord(s[i]);\n            while(u &amp;&amp; !ch[u][c]) u=f[u];\n            u=ch[u][c];\n            if(val[u]) add(u);\n            else if(last[u]) add(last[u]);\n        }\n    }\n}aho;\n\nint main(){\n    scanf(&quot;%d&quot;,&amp;T);\n    while(T--){\n        aho.init();\n        scanf(&quot;%d&quot;,&amp;N);\n        for(int i=0;i&lt;N;++i){\n            scanf(&quot;%s&quot;,str[i]);\n            aho.insert(str[i]);\n        }\n        aho.getFail();\n        scanf(&quot;%s&quot;,tot);\n        aho.Find(tot);\n        printf(&quot;%d\\n&quot;,aho.ans);\n    }\n    return 0;\n}</code></pre>","text":"Type: AC自动机题意给你几个子串,再给你一个主串,问你有多少个子串在主串中出现过.输入T,N,接下来N行输入N个字符串,最后一行输入一个主串.输出一个整数,有多少子串可以在主串中被匹配到题解注意,每个子串可能是相同的,所以我们不能在尾节点记录子串的下标,而应该记录子串的个数","link":"","raw":null,"photos":[],"categories":[{"name":"AC自动机","slug":"AC自动机","count":4,"path":"api/categories/AC自动机.json"},{"name":"HDU","slug":"AC自动机/HDU","count":2,"path":"api/categories/AC自动机/HDU.json"},{"name":"字符串处理","slug":"AC自动机/HDU/字符串处理","count":2,"path":"api/categories/AC自动机/HDU/字符串处理.json"}],"tags":[{"name":"字符串处理","slug":"字符串处理","count":7,"path":"api/tags/字符串处理.json"},{"name":"HDU","slug":"HDU","count":14,"path":"api/tags/HDU.json"},{"name":"AC自动机","slug":"AC自动机","count":4,"path":"api/tags/AC自动机.json"}]},{"title":"Wannafly 挑战赛11","slug":"wannafly-cha-11","date":"2018-03-10T00:53:16.000Z","updated":"2019-07-03T13:51:36.862Z","comments":true,"path":"api/articles/wannafly-cha-11.json","excerpt":"","keywords":null,"cover":null,"content":"<p>A. 水</p>\n<pre><code>#include&lt;bits/stdc++.h&gt;\nusing namespace std;\ntypedef long long LL;\nint main(){\n    LL n;\n    cin&gt;&gt;n;\n    cout&lt;&lt;n+1&lt;&lt;endl;\n    return 0;\n}</code></pre><p>B: 组合数学, 预处理阶乘逆元</p>\n<blockquote>\n<p>因为不可能暴力,所以我们想到是推式子 我们可以把前几项放在Excel表中推一下 然后我们会发现 关于m,n的式子为</p>\n<blockquote>\n<p>常数k*b^(m-1)*a^(n-m)</p>\n<blockquote>\n<p>该式子即为目标结果</p>\n</blockquote>\n<p>如何求常数k呢</p>\n<blockquote>\n<p>设k[n][m] 为n行m列的常数</p>\n<blockquote>\n<p>我们发现 k[n][m]=k[n-1][m]+k[n-1][m-1] 这个式子和组合数学里的 C(n,k)+C(n,k+1)=C(n+1,k+1) 相似</p>\n</blockquote>\n</blockquote>\n<p>所以 k[n][m]=C(n-1,m-1)</p>\n<blockquote>\n<p>但因为我们无法以O（N^2）解决这道题,所以不能用递推式求组合数</p>\n<blockquote>\n<p>那我们就直接用 组合数的公式求</p>\n<blockquote>\n<p>C(n,m)=n!/((n-m)!*m!)</p>\n</blockquote>\n</blockquote>\n<p>预处理n!和n!的逆元</p>\n<blockquote>\n<p>这里因为数组有限,无法使用递推式求逆元,</p>\n<blockquote>\n<p>所以我们用费马小定理求逆元</p>\n</blockquote>\n<p>a^(p-1)≡1(mod p)</p>\n</blockquote>\n<p>则 a^(p-2) 即为 a 对于 p 的逆元.</p>\n</blockquote>\n<p>预处理即可</p>\n</blockquote>\n<p>当n &lt; m时,ans=0</p>\n</blockquote>\n<h1 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h1><pre><code>#include&lt;bits/stdc++.h&gt;\nusing namespace std;\ntypedef long long ll;\nconst int MOD = 998244353;\nconst int maxn = 100000;\n\nint a,b,n,m;\nint T;\n\nll inv[maxn+10],fac[maxn+10];\n///预处理N!的逆元\n//费马小定理\n/*\n *假如p是质数，且gcd(a,p)=1，那么 a^(p-1)≡1（mod p）\n *根据这个性质我们可以知道 a的逆元为a^(p-2)\n */\nll fast_pow(ll a,ll b)\n{\n    ll ans=1;\n    while(b){\n        if(b&amp;1ll)ans=a*ans%MOD;\n        a=a*a%MOD;\n        b&gt;&gt;=1ll;\n    }\n    return ans;\n}\nvoid pre()\n{\n    inv[0]=1ll;\n    fac[0]=1ll;\n    for(int i=1;i&lt;=maxn;i++){\n        fac[i]=fac[i-1]*i%MOD;\n        inv[i]=fast_pow(fac[i],MOD-2ll);\n    }\n}\nll C(ll a,ll b)\n{\n    return fac[a]*inv[b]%MOD*inv[a-b]%MOD;\n}\n\nint main(){\n    pre();\n    scanf(&quot;%d&quot;,&amp;T);\n    for(int k=0;k&lt;T;++k){\n        scanf(&quot;%d%d%d%d&quot;,&amp;a,&amp;b,&amp;n,&amp;m);\n        if(n&lt;m){\n            printf(&quot;0\\n&quot;);\n            continue;\n        }\n        int t=n-1,s=m-1;\n        ll ans=1;\n\n        ans=ans*C(n-1,m-1)%MOD*fast_pow(a,n-m)%MOD*fast_pow(b,m-1)%MOD;\n        printf(&quot;%lld\\n&quot;,ans);\n    }\n    return 0;\n}\n\n\n/// C(N-1,M-1)*b^(M-1)*a^(N-M)\n/// N&lt;M 0</code></pre>","text":"A. 水#include&lt;bits/stdc++.h&gt;using namespace std;typedef long long LL;int main(){    LL n;    cin&gt;&gt;n;    cout&lt;&lt;n+1&lt;&lt;en","link":"","raw":null,"photos":[],"categories":[{"name":"牛客练习赛","slug":"牛客练习赛","count":2,"path":"api/categories/牛客练习赛.json"},{"name":"组合数学","slug":"牛客练习赛/组合数学","count":1,"path":"api/categories/牛客练习赛/组合数学.json"},{"name":"逆元","slug":"牛客练习赛/组合数学/逆元","count":1,"path":"api/categories/牛客练习赛/组合数学/逆元.json"}],"tags":[{"name":"牛客练习赛","slug":"牛客练习赛","count":10,"path":"api/tags/牛客练习赛.json"},{"name":"组合数学","slug":"组合数学","count":12,"path":"api/tags/组合数学.json"},{"name":"逆元","slug":"逆元","count":4,"path":"api/tags/逆元.json"}]}]}