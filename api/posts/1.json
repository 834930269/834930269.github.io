{"total":369,"pageSize":10,"pageCount":37,"data":[{"title":"Record","slug":"record","date":"2019-04-12T03:48:37.000Z","updated":"2019-07-03T16:12:59.894Z","comments":true,"path":"api/articles/record.json","excerpt":"<p>2019/4/13 - s </p>\n<p><img src=\"http://be-sunshine.cn/wp-content/uploads/2019/04/shi.png\" alt></p>","keywords":null,"cover":"http://be-sunshine.cn/wp-content/uploads/2019/04/shi.png","content":null,"text":"2019/4/13 - s  [Figure] ","link":"","raw":null,"photos":[],"categories":[{"name":"随笔","slug":"随笔","count":28,"path":"api/categories/随笔.json"}],"tags":[]},{"title":"JeffE-3-1-递归起源","slug":"jeffe-3-1-dporigin","date":"2019-04-08T13:08:05.000Z","updated":"2019-07-03T16:33:19.732Z","comments":true,"path":"api/articles/jeffe-3-1-dporigin.json","excerpt":"<!-- toc -->\n\n<ul>\n<li><a href=\"#31-matra-vrtta\">3.1 matra-vrtta</a><ul>\n<li><a href=\"#回溯backtracking很慢\">回溯(Backtracking)很慢</a><ul>\n<li><a href=\"#下面是算法复杂度的\">下面是算法复杂度的</a></li>\n</ul>\n</li>\n<li><a href=\"#记忆化-超忆症-我要记住一切\">记忆化: 超忆症-我要记住一切</a></li>\n<li><a href=\"#动态规划-刻意填充-我就是故意的\">动态规划: 刻意填充-我就是故意的</a></li>\n<li><a href=\"#其实俺也不想记住那么多\">其实俺也不想记住那么多</a></li>\n</ul>\n</li>\n</ul>\n<!-- tocstop -->\n\n<h1 id=\"3-1-matra-vrtta\"><a href=\"#3-1-matra-vrtta\" class=\"headerlink\" title=\"3.1 matra-vrtta\"></a>3.1 matra-vrtta</h1><hr>\n<p>关于<code>递归方法</code>最早的例子之一是出现在距今2000多年前的<code>古印度</code>时期关于诗词韵律(arose)或者诗体韵律的学习中.古典梵语诗集(Classical Sanskrit poetry)有别于音节(syllables)的两种类型: 明亮和沉重.在一组韵律中(In one class of meters),韵律丰富的被叫做[matravrtta]或者[matrameru]或[matrachanda],诗的每一行都有固定个数的”beats”,如亮音节最后会有一个beat,而重音节最后会有两个beat.正规的matra-vrtta的学习要追溯到 Chandahsastra,出自Pingala学者(Scholar),公元前600年和200年间,Pingala发现 5-4节拍: –，-··，·-·，··-，····。（这里每个”-“代表了一个常寅杰,每个”·”代表了一个短音节.） 尽管Pingala的文章给计数音节一个系统化的<code>提示</code>了,这项规定仍花了大约一千年的时间才得以明确表述。【it took about,他花费了大约】在公元前七世纪,另一个印度学者Virahanka书写了一篇Pingala著作的评注,其中(in which)，他观察到n拍的节拍(meter)数是（n-2）拍的节拍数和（n-1）拍的节拍数之和。</p>\n<blockquote>\n<p>用更现代的符号表示,Virahanka的研究发现了总会出现一个循环当n-beat节拍的节拍总数M(n)满足</p>\n</blockquote>\n<p><code>M(n)=M(n-2)+M(n-1)</code> 不难看出<code>M(0)=1</code> (只存在一个空节拍)和<code>M(1)=1</code>(唯一的一个节拍由一个单独的短音节组成). 同样的循环结论出现在欧洲大约在Virahanka500年前,在Leonardo Pisano(莱昂纳多·比萨诺)的1202论文<code>Liber Abaci</code>中,这个欧洲最早关于”算法”的论文中,使用Virahanka的循环,用现代的<code>Fibonacci number</code> 定义了这一现象: <a href=\"http://be-sunshine.cn/wp-content/uploads/2019/04/QQ截图20190408205641.png\" target=\"_blank\" rel=\"noopener\"><img src=\"http://be-sunshine.cn/wp-content/uploads/2019/04/QQ%E6%88%AA%E5%9B%BE20190408205641.png\" alt></a> 即,对于所有的n,我们规定 M(n)=F(n+1)</p>","keywords":null,"cover":"http://be-sunshine.cn/wp-content/uploads/2019/04/QQ%E6%88%AA%E5%9B%BE20190408205641.png","content":null,"text":"3.1 matra-vrtta回溯(Backtracking)很慢下面是算法复杂度的记忆化: 超忆症-我要记住一切动态规划: 刻意填充-我就是故意的其实俺也不想记住那么多3.1 matra-vrtta关于递归方法最早的例子之一是出现在距今2000多年前的古印度时期关于诗词韵律(a","link":"","raw":null,"photos":[],"categories":[{"name":"随笔","slug":"随笔","count":28,"path":"api/categories/随笔.json"}],"tags":[]},{"title":"Translation","slug":"translation","date":"2019-04-08T12:01:04.000Z","updated":"2019-07-03T13:51:36.870Z","comments":true,"path":"api/articles/translation.json","excerpt":"","keywords":null,"cover":null,"content":"<p><a href=\"https://www.showdoc.cc/JeffE2Translation2Doc?page_id=1821482377881177\" target=\"_blank\" rel=\"noopener\">https://www.showdoc.cc/JeffE2Translation2Doc?page_id=1821482377881177</a></p>\n","text":"https://www.showdoc.cc/JeffE2Translation2Doc?page_id=1821482377881177","link":"","raw":null,"photos":[],"categories":[{"name":"随笔","slug":"随笔","count":28,"path":"api/categories/随笔.json"}],"tags":[]},{"title":"pat备-字符串-sscanf","slug":"patp-sscanf","date":"2019-03-24T12:53:58.000Z","updated":"2019-07-03T16:07:45.303Z","comments":true,"path":"api/articles/patp-sscanf.json","excerpt":"","keywords":null,"cover":null,"content":"<blockquote>\n<p>sscanf(str,”…”,args) sscanf是用来干什么的呢? 例如我们每行输入的数据不同:</p>\n<blockquote>\n<p>数据有两种方式:</p>\n<blockquote>\n<ol>\n<li>名字:数字</li>\n<li>数字</li>\n</ol>\n</blockquote>\n</blockquote>\n</blockquote>\n<p><code>那么我们该如何用一条语句处理呢?</code> <code>首先,scanf肯定不行</code></p>\n<blockquote>\n<p>所以我们考虑一种方式</p>\n<blockquote>\n<p><code>将数据存到缓冲区中,然后再使用格式化读取.</code></p>\n</blockquote>\n</blockquote>\n<p><code>这里的格式化读取就是sscanf</code></p>\n<blockquote>\n<p>Talk is cheap,show me your code.</p>\n</blockquote>\n<p>样例: 4 ZWT ： 10 250 CXY : 100 66 输出: ZWT:10分 分数线:250分 CXY:100分 分数线:66分 <code>Code</code></p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> MAXN=<span class=\"number\">100</span>;</span><br><span class=\"line\"><span class=\"keyword\">char</span> Q[MAXN],name[MAXN];</span><br><span class=\"line\"><span class=\"keyword\">int</span> score;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> N;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>,&amp;N);</span><br><span class=\"line\">    getchar();</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;N;++i)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%[^\\n]\"</span>,Q);</span><br><span class=\"line\">        getchar();</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"built_in\">sscanf</span>(Q,<span class=\"string\">\"%s : %d\"</span>,name,&amp;score)==<span class=\"number\">2</span>)&#123;</span><br><span class=\"line\">            <span class=\"built_in\">printf</span>(<span class=\"string\">\"%s:%d分\\n\"</span>,name,score);</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            <span class=\"built_in\">printf</span>(<span class=\"string\">\"分数线:%s分\\n\"</span>,Q);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","text":"sscanf(str,”…”,args) sscanf是用来干什么的呢? 例如我们每行输入的数据不同:数据有两种方式:名字:数字数字那么我们该如何用一条语句处理呢? 首先,scanf肯定不行所以我们考虑一种方式将数据存到缓冲区中,然后再使用格式化读取.这里的格式化读取就是ssca","link":"","raw":null,"photos":[],"categories":[{"name":"随笔","slug":"随笔","count":28,"path":"api/categories/随笔.json"}],"tags":[]},{"title":"LintCode(12-22)","slug":"lintcode12-22","date":"2019-02-10T06:42:21.000Z","updated":"2019-07-03T16:05:51.666Z","comments":true,"path":"api/articles/lintcode12-22.json","excerpt":"<h1 id=\"12-Min-Stack\"><a href=\"#12-Min-Stack\" class=\"headerlink\" title=\"(12) - Min Stack\"></a>(12) - Min Stack</h1><blockquote>\n<p>一个栈维护最小值,另一个栈存数据</p>\n<blockquote>\n<p>为什么最小值同步插入可行,因为栈的pop只能从栈顶开始，所以:</p>\n<blockquote>\n<p>1.栈顶元素最小,minValue栈顶也是该元素 2.栈顶元素不是最小,minValue中没有该元素</p>\n</blockquote>\n</blockquote>\n</blockquote>\n<figure class=\"highlight lasso\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> class MinStack &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"built_in\">Stack</span>&lt;<span class=\"built_in\">Integer</span>&gt; <span class=\"built_in\">data</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"built_in\">Stack</span>&lt;<span class=\"built_in\">Integer</span>&gt; minValue;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> MinStack() &#123;</span><br><span class=\"line\">        <span class=\"comment\">// do intialization if necessary</span></span><br><span class=\"line\">        <span class=\"built_in\">data</span>=<span class=\"literal\">new</span> <span class=\"built_in\">Stack</span>&lt;&gt;();</span><br><span class=\"line\">        minValue=<span class=\"literal\">new</span> <span class=\"built_in\">Stack</span>&lt;&gt;();</span><br><span class=\"line\">        minValue.push(<span class=\"number\">0x3f3f3f3f</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">     * @param number: An integer</span></span><br><span class=\"line\"><span class=\"comment\">     * @return: nothing</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"literal\">void</span> push(int number) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// write your code here</span></span><br><span class=\"line\">        <span class=\"built_in\">data</span>.push(number);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(number&lt;=minValue.peek()) minValue.push(number);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">     * @return: An integer</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> int pop() &#123;</span><br><span class=\"line\">        <span class=\"comment\">// write your code here</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"built_in\">data</span>.peek().<span class=\"keyword\">equals</span>(minValue.peek())) minValue.pop();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">data</span>.pop();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">     * @return: An integer</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> int <span class=\"keyword\">min</span>() &#123;</span><br><span class=\"line\">        <span class=\"comment\">// write your code here</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> minValue.peek();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","keywords":null,"cover":null,"content":null,"text":"(12) - Min Stack一个栈维护最小值,另一个栈存数据为什么最小值同步插入可行,因为栈的pop只能从栈顶开始，所以:1.栈顶元素最小,minValue栈顶也是该元素 2.栈顶元素不是最小,minValue中没有该元素1<br>2<br>3<br>4<br>5<br>6<","link":"","raw":null,"photos":[],"categories":[{"name":"LintCode","slug":"LintCode","count":2,"path":"api/categories/LintCode.json"}],"tags":[{"name":"LintCode","slug":"LintCode","count":2,"path":"api/tags/LintCode.json"}]},{"title":"Spring Validation-Spring后台验证框架","slug":"spring-validation-spring","date":"2019-02-09T15:34:46.000Z","updated":"2019-07-03T16:01:03.116Z","comments":true,"path":"api/articles/spring-validation-spring.json","excerpt":"<h1 id=\"JSR-303简介\"><a href=\"#JSR-303简介\" class=\"headerlink\" title=\"JSR-303简介\"></a>JSR-303简介</h1><p>JSR-303 是 JavaEE 6 中的一项子规范，叫做 Bean Validation，官方参考实现是 Hibernate Validator。 此实现与 Hibernate ORM 没有任何关系。JSR-303 用于对 Java Bean 中的字段的值进行验证。 Spring MVC 3.x 之中也大力支持 JSR-303，可以在控制器中使用注解的方式对表单提交的数据方便地验证。 Spring 4.0 开始支持 Bean Validation 功能。</p>","keywords":null,"cover":null,"content":null,"text":"JSR-303简介JSR-303 是 JavaEE 6 中的一项子规范，叫做 Bean Validation，官方参考实现是 Hibernate Validator。 此实现与 Hibernate ORM 没有任何关系。JSR-303 用于对 Java Bean 中的字段的值进行","link":"","raw":null,"photos":[],"categories":[{"name":"Java","slug":"Java","count":21,"path":"api/categories/Java.json"},{"name":"Spring","slug":"Java/Spring","count":1,"path":"api/categories/Java/Spring.json"}],"tags":[{"name":"Spring","slug":"Spring","count":6,"path":"api/tags/Spring.json"},{"name":"Java","slug":"Java","count":21,"path":"api/tags/Java.json"}]},{"title":"热部署 - (几个字也值得建个文章??","slug":"asdasdas","date":"2019-02-05T14:34:22.000Z","updated":"2019-07-03T13:51:36.864Z","comments":true,"path":"api/articles/asdasdas.json","excerpt":"","keywords":null,"cover":null,"content":"<p>IDEA中使用JRebel.</p>\n<blockquote>\n<p>热部署: 即便是修改类也可以在存储后不需重启项目即可完成编译.</p>\n</blockquote>\n","text":"IDEA中使用JRebel.热部署: 即便是修改类也可以在存储后不需重启项目即可完成编译.","link":"","raw":null,"photos":[],"categories":[{"name":"随笔","slug":"随笔","count":28,"path":"api/categories/随笔.json"}],"tags":[]},{"title":"Spring 注解 @ModelAttribute","slug":"spring-annotation-modelattribute","date":"2019-02-05T09:25:30.000Z","updated":"2019-07-03T16:08:56.030Z","comments":true,"path":"api/articles/spring-annotation-modelattribute.json","excerpt":"","keywords":null,"cover":null,"content":"<h1><span id=\"spring-mvc-表单标签库\">Spring MVC 表单标签库</span></h1><p><a href=\"http://www.funtl.com/zh/spring-mvc/Spring-MVC-%E8%A1%A8%E5%8D%95%E6%A0%87%E7%AD%BE%E5%BA%93.html#%E5%8D%95%E9%80%89%E6%8C%89%E9%92%AE%EF%BC%88%E5%A4%9A%E9%80%89%EF%BC%89\" target=\"_blank\" rel=\"noopener\">http://www.funtl.com/zh/spring-mvc/Spring-MVC-%E8%A1%A8%E5%8D%95%E6%A0%87%E7%AD%BE%E5%BA%93.html#%E5%8D%95%E9%80%89%E6%8C%89%E9%92%AE%EF%BC%88%E5%A4%9A%E9%80%89%EF%BC%89</a></p>\n<h1><span id=\"jquery-validationbootstrap前端验证\">JQuery Validation+Bootstrap(前端验证)</span></h1><p><a href=\"http://www.funtl.com/zh/supplement1/jQuery-Validation.html#%E9%A1%B5%E9%9D%A2%E5%BC%95%E7%94%A8\" target=\"_blank\" rel=\"noopener\">http://www.funtl.com/zh/supplement1/jQuery-Validation.html#%E9%A1%B5%E9%9D%A2%E5%BC%95%E7%94%A8</a></p>\n<h1><span id=\"jquery-icheckbootstrap前端复选框\">JQuery iCheck+Bootstrap(前端复选框)</span></h1><p><a href=\"http://www.funtl.com/zh/supplement1/jQuery-iCheck.html#%E6%BF%80%E6%B4%BB-icheck\" target=\"_blank\" rel=\"noopener\">http://www.funtl.com/zh/supplement1/jQuery-iCheck.html#%E6%BF%80%E6%B4%BB-icheck</a></p>\n<h1><span id=\"什么是-modelattribute\">什么是 @ModelAttribute?</span></h1><ul>\n<li>绑定请求参数到命令对象：放在功能处理方法的入参上时，用于将多个请求参数绑定到一个命令对象，从而简化绑定流程，而且自动暴露为模型数据用于视图页面展示时使用</li>\n<li>暴露 @RequestMapping 方法返回值为模型数据：放在功能处理方法的返回值上时，是暴露功能处理方法的返回值为模型数据，用于视图页面展示时使用</li>\n<li>暴露表单引用对象为模型数据：放在处理器的一般方法（非功能处理方法）上时，是为表单准备要展示的表单引用对象，如注册时需要选择的所在城市等，而且在执行功能处理方法（@RequestMapping 注解的方法）之前，自动添加到模型对象中，用于视图页面展示时使用</li>\n</ul>\n<blockquote>\n<p>即简化AOP编程,不使用拦截器在同一Controller下直接进行拦截或者预处理,其属性会继承给每一个RequestMapping的视图层.</p>\n</blockquote>\n<h1><span id=\"例子\">例子</span></h1><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.funtl.my.shop.web.admin.web.controller;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.funtl.my.shop.commons.dto.BaseResult;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.funtl.my.shop.domain.TbUser;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.funtl.my.shop.web.admin.service.TbUserService;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.beans.factory.<span class=\"keyword\">annotation</span>.Autowired;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.stereotype.Controller;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.ui.Model;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.<span class=\"keyword\">annotation</span>.ModelAttribute;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.<span class=\"keyword\">annotation</span>.RequestMapping;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.<span class=\"keyword\">annotation</span>.RequestMethod;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.servlet.mvc.support.RedirectAttributes;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.List;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Controller</span></span><br><span class=\"line\"><span class=\"meta\">@RequestMapping(value=<span class=\"meta-string\">\"user\"</span>)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UserController</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> TbUserService tbUserService;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@ModelAttribute</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> TbUser getTbUser(<span class=\"built_in\">Long</span> id)&#123;</span><br><span class=\"line\">        TbUser tbUser=<span class=\"literal\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(id!=<span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">            tbUser=tbUserService.getById(id);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            tbUser=new TbUser();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> tbUser;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 跳转到用户列表页</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> model</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@RequestMapping(value=<span class=\"meta-string\">\"list\"</span>,method= RequestMethod.GET)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String list(Model model)&#123;</span><br><span class=\"line\">        List&lt;TbUser&gt; tbUsers=tbUserService.selectAll();</span><br><span class=\"line\">        model.addAttribute(<span class=\"string\">\"tbUsers\"</span>,tbUsers);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"user_list\"</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@RequestMapping(value=<span class=\"meta-string\">\"form\"</span>,method=RequestMethod.GET)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String form()&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"user_form\"</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@RequestMapping(value=<span class=\"meta-string\">\"save\"</span>,method=RequestMethod.POST)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String save(TbUser tbUser, Model model,RedirectAttributes redirectAttributes)&#123;</span><br><span class=\"line\">        BaseResult baseResult=tbUserService.save(tbUser);</span><br><span class=\"line\">        <span class=\"comment\">//保存成功</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(baseResult.getStatus()==<span class=\"number\">200</span>)&#123;</span><br><span class=\"line\">            redirectAttributes.addFlashAttribute(<span class=\"string\">\"baseResult\"</span>,baseResult);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">\"redirect:/user/list\"</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//保存失败</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            model.addAttribute(<span class=\"string\">\"baseResult\"</span>,baseResult);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">\"user_form\"</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n<blockquote>\n<p>这样操作过后可以很轻松的将 预处理的TbUser绑定到Model上.</p>\n</blockquote>\n","text":"Spring MVC 表单标签库http://www.funtl.com/zh/spring-mvc/Spring-MVC-%E8%A1%A8%E5%8D%95%E6%A0%87%E7%AD%BE%E5%BA%93.html#%E5%8D%95%E9%80%89%E6%8C%89","link":"","raw":null,"photos":[],"categories":[{"name":"Spring","slug":"Spring","count":4,"path":"api/categories/Spring.json"}],"tags":[{"name":"Spring","slug":"Spring","count":6,"path":"api/tags/Spring.json"}]},{"title":"Spring 黏合 Mybatis (已整合druid前提下)","slug":"spring-cohesive-mybatis","date":"2019-02-04T02:20:51.000Z","updated":"2019-07-03T15:58:55.530Z","comments":true,"path":"api/articles/spring-cohesive-mybatis.json","excerpt":"<h1 id=\"前提-已经创建好了druid\"><a href=\"#前提-已经创建好了druid\" class=\"headerlink\" title=\"前提,已经创建好了druid\"></a>前提,已经创建好了druid</h1><blockquote>\n<p>且druid的id为datasource,作为mybatis的数据源</p>\n</blockquote>\n<h1 id=\"Document\"><a href=\"#Document\" class=\"headerlink\" title=\"Document\"></a>Document</h1><p><a href=\"http://www.mybatis.org/mybatis-3/zh/index.html\" target=\"_blank\" rel=\"noopener\">http://www.mybatis.org/mybatis-3/zh/index.html</a></p>\n<h1 id=\"创建-mybatis-config-xml\"><a href=\"#创建-mybatis-config-xml\" class=\"headerlink\" title=\"创建 mybatis-config.xml\"></a>创建 mybatis-config.xml</h1><blockquote>\n<p>因为已经整合过了druid,所以数据源为datasource,即不用再设置连接数据库等操作,直接从连接池druid中取出即可.</p>\n<blockquote>\n<p>只需要配置几个setting属性</p>\n</blockquote>\n</blockquote>","keywords":null,"cover":null,"content":null,"text":"前提,已经创建好了druid且druid的id为datasource,作为mybatis的数据源Documenthttp://www.mybatis.org/mybatis-3/zh/index.html创建 mybatis-config.xml因为已经整合过了druid,所以数","link":"","raw":null,"photos":[],"categories":[{"name":"MyBatis","slug":"MyBatis","count":2,"path":"api/categories/MyBatis.json"},{"name":"Spring","slug":"MyBatis/Spring","count":1,"path":"api/categories/MyBatis/Spring.json"}],"tags":[{"name":"Spring","slug":"Spring","count":6,"path":"api/tags/Spring.json"},{"name":"MyBatis","slug":"MyBatis","count":2,"path":"api/tags/MyBatis.json"}]},{"title":"使用Spring(胶水框架)粘贴druid","slug":"spring-druid","date":"2019-02-03T09:40:59.000Z","updated":"2019-07-03T16:10:13.718Z","comments":true,"path":"api/articles/spring-druid.json","excerpt":"<h1 id=\"完善druid所需配置-myshop-properties\"><a href=\"#完善druid所需配置-myshop-properties\" class=\"headerlink\" title=\"完善druid所需配置 myshop.properties\"></a>完善druid所需配置 myshop.properties</h1><figure class=\"highlight julia\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#============================#</span></span><br><span class=\"line\"><span class=\"comment\">#==== Database settings ====#</span></span><br><span class=\"line\"><span class=\"comment\">#============================#</span></span><br><span class=\"line\"><span class=\"comment\"># JDBC</span></span><br><span class=\"line\"><span class=\"comment\"># MySQL 8.x: com.mysql.cj.jdbc.Driver</span></span><br><span class=\"line\">jdbc.driverClass=com.mysql.jdbc.Driver</span><br><span class=\"line\">jdbc.connectionURL=jdbc:mysql://<span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span>:<span class=\"number\">3306</span>/myshop?useUnicode=<span class=\"literal\">true</span>&amp;characterEncoding=utf-<span class=\"number\">8</span>&amp;useSSL=<span class=\"literal\">false</span></span><br><span class=\"line\">jdbc.username=你的用户</span><br><span class=\"line\">jdbc.password=你的密码</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># JDBC Pool</span></span><br><span class=\"line\"><span class=\"comment\"># 初始化池的数量</span></span><br><span class=\"line\">jdbc.pool.init=<span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"comment\"># 最小数量</span></span><br><span class=\"line\">jdbc.pool.minIdle=<span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"comment\"># 最大可活动数量</span></span><br><span class=\"line\">jdbc.pool.maxActive=<span class=\"number\">20</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># JDBC Test</span></span><br><span class=\"line\">jdbc.testSql=SELECT <span class=\"string\">'x'</span> FROM DUAL</span><br></pre></td></tr></table></figure>","keywords":null,"cover":"http://be-sunshine.cn/wp-content/uploads/2019/02/QQ%E6%88%AA%E5%9B%BE20190203175906.png","content":null,"text":"完善druid所需配置 myshop.properties1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>","link":"","raw":null,"photos":[],"categories":[{"name":"Spring","slug":"Spring","count":4,"path":"api/categories/Spring.json"}],"tags":[{"name":"Spring","slug":"Spring","count":6,"path":"api/tags/Spring.json"}]}]}