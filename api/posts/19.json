{"total":370,"pageSize":10,"pageCount":37,"data":[{"title":"Python Flask(四) Integration with the Python Shell","slug":"python-flask-integration-with-the-python-shell","date":"2017-10-10T02:14:17.000Z","updated":"2019-07-03T13:51:36.858Z","comments":true,"path":"api/articles/python-flask-integration-with-the-python-shell.json","excerpt":"","keywords":null,"cover":"http://be-sunshine.cn/wp-content/uploads/2017/10/QQ%E6%88%AA%E5%9B%BE20171010101231.jpg","content":"<p>集成Python Shell,为了不每次启动都手动创建示例(比如from/import之类),所以调用这个. 但这个并不是给网站用的,是给开发者用的. 一开始我没太理解为什么要用这个包,后来看到了一个回答,很详细的:</p>\n<hr>\n<h3 id=\"Click-Here-Flask-script-内的Shell-类-使用\"><a href=\"#Click-Here-Flask-script-内的Shell-类-使用\" class=\"headerlink\" title=\"Click Here: Flask script 内的Shell 类 使用 ***\"></a><a href=\"https://segmentfault.com/q/1010000006219785/a-1020000006258581\" title=\"Click Here:  Flask script 内的Shell 类 使用 \" target=\"_blank\" rel=\"noopener\">Click Here: Flask script 内的Shell 类 使用</a> ***</h3><p><a href=\"http://be-sunshine.cn/wp-content/uploads/2017/10/QQ%E6%88%AA%E5%9B%BE20171010101231.jpg\" target=\"_blank\" rel=\"noopener\"><img src=\"http://be-sunshine.cn/wp-content/uploads/2017/10/QQ%E6%88%AA%E5%9B%BE20171010101231.jpg\" alt></a></p>\n","text":"集成Python Shell,为了不每次启动都手动创建示例(比如from/import之类),所以调用这个. 但这个并不是给网站用的,是给开发者用的. 一开始我没太理解为什么要用这个包,后来看到了一个回答,很详细的:Click Here: Flask script 内的Shell","link":"","raw":null,"photos":[],"categories":[{"name":"Flask","slug":"Flask","count":18,"path":"api/categories/Flask.json"},{"name":"Python","slug":"Flask/Python","count":16,"path":"api/categories/Flask/Python.json"}],"tags":[{"name":"Flask","slug":"Flask","count":20,"path":"api/tags/Flask.json"},{"name":"Python","slug":"Python","count":65,"path":"api/tags/Python.json"}]},{"title":"Python Flask(3.1) Flask_wtf.Form rename to Flask_wtf.FlaskForm","slug":"python-flask3-1-flask-wtf-form-rename-to-flask-wtf-flaskform","date":"2017-10-10T01:53:01.000Z","updated":"2019-07-03T13:51:36.858Z","comments":true,"path":"api/articles/python-flask3-1-flask-wtf-form-rename-to-flask-wtf-flaskform.json","excerpt":"","keywords":null,"cover":null,"content":"<p>如题,Flask_wtf.Form将在1.0被删除,所以以后引用模块名应该是FlaskForm.</p>\n","text":"如题,Flask_wtf.Form将在1.0被删除,所以以后引用模块名应该是FlaskForm.","link":"","raw":null,"photos":[],"categories":[{"name":"Flask","slug":"Flask","count":18,"path":"api/categories/Flask.json"},{"name":"Python","slug":"Flask/Python","count":16,"path":"api/categories/Flask/Python.json"}],"tags":[{"name":"Flask","slug":"Flask","count":20,"path":"api/tags/Flask.json"},{"name":"Python","slug":"Python","count":65,"path":"api/tags/Python.json"}]},{"title":"Python Flask(三) Python Database Frameworks","slug":"python-flask-python-database-frameworks","date":"2017-10-09T14:07:40.000Z","updated":"2019-07-03T13:51:36.858Z","comments":true,"path":"api/articles/python-flask-python-database-frameworks.json","excerpt":"","keywords":null,"cover":"http://be-sunshine.cn/wp-content/uploads/2017/10/%E6%8D%95%E8%8E%B75.png","content":"<p>期间遇到两个错误,其一,因为<code>Python版本是3.*</code>,所以调用flask_sqlalchemy后执行时出错,因为<code>缺少了MySQLdb模块</code>. 在stackoverflow上面找到了解决办法. <a href=\"https://stackoverflow.com/questions/454854/no-module-named-mysqldb\" title=\"Click here: No module named MySQLdb\" target=\"_blank\" rel=\"noopener\">Click here: No module named MySQLdb</a> 然后这是大部分Python扩展库的集合: <a href=\"http://www.lfd.uci.edu/~gohlke/pythonlibs/#mysql-python\" title=\"click here: Unofficial Windows Binaries for Python Extension Packages\" target=\"_blank\" rel=\"noopener\">click here: Unofficial Windows Binaries for Python Extension Packages</a> 解决办法: <code>pip install mysqlclient</code>/<code>conda install mysqlclient</code> 其二: <code>db.create_all</code>时会报<code>warning</code>,无视即可. 其三: 书上给的是用SQLite连接以及创建数据库,直接将连接地址改为Mysql的地址即可.具体代码如下:</p>\n<pre><code>#--*--coding:utf-8--*--\nfrom datetime import datetime\nfrom flask import Flask, render_template,session,redirect,url_for,flash\nfrom flask_script import Manager\nfrom flask_bootstrap import Bootstrap   \nfrom flask_moment import Moment\nfrom flask_wtf import Form\nfrom wtforms import StringField,SubmitField\nfrom wtforms.validators import Required\nfrom flask_sqlalchemy import SQLAlchemy\n\nclass NameForm(Form):\n    name=StringField(&apos;What is your name?&apos;,validators=[Required()])\n    submit=SubmitField(&apos;Submit&apos;)\n\napp = Flask(__name__)\n\n#Flask-WTF : secret_key\n#app.config dict used to save config message.\napp.config[&apos;SECRET_KEY&apos;]=&apos;hard to guess string&apos;\napp.config[&apos;SQLALCHEMY_DATABASE_URI&apos;]=\\\n    &apos;mysql://root:zwt~19970210@localhost/data&apos;\napp.config[&apos;SQLALCHEMY_COMMIT_ON_TEARDOWN&apos;] = True\napp.config[&apos;SQLALCHEMY_TRACK_MODIFICATIONS&apos;] = False\ndb=SQLAlchemy(app)\n\nmanager = Manager(app)\nbootstrap = Bootstrap(app)\nmoment = Moment(app)\n\nclass Role(db.Model):\n    __tablename__ = &apos;roles&apos;\n    id = db.Column(db.Integer, primary_key=True)\n    name = db.Column(db.String(64), unique=True)\n    users = db.relationship(&apos;User&apos;, backref=&apos;role&apos;, lazy=&apos;dynamic&apos;)\n\n    def __repr__(self):\n        return &apos;&lt;Role %r&gt;&apos; % self.name\n\n\nclass User(db.Model):\n    __tablename__ = &apos;users&apos;\n    id = db.Column(db.Integer, primary_key=True)\n    username = db.Column(db.String(64), unique=True, index=True)\n    role_id = db.Column(db.Integer, db.ForeignKey(&apos;roles.id&apos;))\n\n    def __repr__(self):\n        return &apos;&lt;User %r&gt;&apos; % self.username\n@app.errorhandler(404)\ndef page_not_found(e):\n    return render_template(&apos;404.html&apos;), 404\n\n\n@app.errorhandler(500)\ndef internal_server_error(e):\n    return render_template(&apos;500.html&apos;), 500\n\n\n@app.route(&apos;/&apos;,methods=[&apos;GET&apos;,&apos;POST&apos;])\ndef index():\n    form=NameForm()\n    if form.validate_on_submit():\n        old_name=session.get(&apos;name&apos;)\n        if old_name is not None and old_name!=form.name.data:\n            flash(&apos;Looks like you have changed your name!&apos;)\n        session[&apos;name&apos;]=form.name.data\n        return redirect(url_for(&apos;index&apos;))\n    return render_template(&apos;index.html&apos;,\n                           current_time=datetime.utcnow(),form=form,name=session.get(&apos;name&apos;))\n\n\n@app.route(&apos;/user/&lt;name&gt;&apos;)\ndef user(name):\n    return render_template(&apos;user.html&apos;, name=name)\n\n\nif __name__ == &apos;__main__&apos;:\n    db.create_all()\n    manager.run()</code></pre><p>其中,只需要修改<code>app.config[&#39;SQLALCHEMY_DATABASE_URI&#39;]=&#39;mysql://root:zwt~19970210@localhost/data&#39;</code>即可修改连接的数据库. 其四: 想要提交操作事务,需要先将操作示例放置在全局db.session字典中. 其五: 一些操作 <a href=\"http://be-sunshine.cn/wp-content/uploads/2017/10/%E6%8D%95%E8%8E%B75.png\" target=\"_blank\" rel=\"noopener\"><img src=\"http://be-sunshine.cn/wp-content/uploads/2017/10/%E6%8D%95%E8%8E%B75.png\" alt></a> <a href=\"http://be-sunshine.cn/wp-content/uploads/2017/10/%E6%8D%95%E8%8E%B76.png\" target=\"_blank\" rel=\"noopener\"><img src=\"http://be-sunshine.cn/wp-content/uploads/2017/10/%E6%8D%95%E8%8E%B76.png\" alt></a> Done</p>\n","text":"期间遇到两个错误,其一,因为Python版本是3.*,所以调用flask_sqlalchemy后执行时出错,因为缺少了MySQLdb模块. 在stackoverflow上面找到了解决办法. Click here: No module named MySQLdb 然后这是大部分Py","link":"","raw":null,"photos":[],"categories":[{"name":"Flask","slug":"Flask","count":18,"path":"api/categories/Flask.json"},{"name":"Python","slug":"Flask/Python","count":16,"path":"api/categories/Flask/Python.json"}],"tags":[{"name":"Flask","slug":"Flask","count":20,"path":"api/tags/Flask.json"},{"name":"Python","slug":"Python","count":65,"path":"api/tags/Python.json"}]},{"title":"Python Flask(二) Custom Error Pages","slug":"python-flask-custom-error-pages","date":"2017-10-08T23:57:51.000Z","updated":"2019-07-03T13:51:36.858Z","comments":true,"path":"api/articles/python-flask-custom-error-pages.json","excerpt":"","keywords":null,"cover":null,"content":"<p>自定义错误界面: 直接上代码:</p>\n<pre><code>@app.errorhandler(404)\ndef page_not_found(e):\n    return render_template(&apos;404.html&apos;), 404\n\n\n@app.errorhandler(500)\ndef internal_server_error(e):\n    return render_template(&apos;500.html&apos;), 500</code></pre><p>返回参数有两个,第一个是渲染模板,第二个是错误码,错误界面通过handler获取错误码然后重定向到错误界面.以上.</p>\n","text":"自定义错误界面: 直接上代码:@app.errorhandler(404)def page_not_found(e):    return render_template(&apos;404.html&apos;), 404@app.errorhandler(500)def in","link":"","raw":null,"photos":[],"categories":[{"name":"Flask","slug":"Flask","count":18,"path":"api/categories/Flask.json"},{"name":"Python","slug":"Flask/Python","count":16,"path":"api/categories/Flask/Python.json"},{"name":"未分类","slug":"Flask/Python/未分类","count":2,"path":"api/categories/Flask/Python/未分类.json"}],"tags":[{"name":"Flask","slug":"Flask","count":20,"path":"api/tags/Flask.json"},{"name":"Python","slug":"Python","count":65,"path":"api/tags/Python.json"}]},{"title":"随笔:技术栈过于薄弱.悬梁刺股了..","slug":"node-is-week","date":"2017-10-08T09:53:37.000Z","updated":"2019-07-03T13:51:36.858Z","comments":true,"path":"api/articles/node-is-week.json","excerpt":"","keywords":null,"cover":null,"content":"<p>RT,因为廖大的那个博客代码过于底层,导致想搞一搞变得异常困难,基本处于什么都看不懂的状态,所以转变下思路,从《Flask Web 入手》开始深入,侥幸时发现了横向发展的薄弱环节,要开始纵向刨根了..</p>\n","text":"RT,因为廖大的那个博客代码过于底层,导致想搞一搞变得异常困难,基本处于什么都看不懂的状态,所以转变下思路,从《Flask Web 入手》开始深入,侥幸时发现了横向发展的薄弱环节,要开始纵向刨根了..","link":"","raw":null,"photos":[],"categories":[{"name":"随笔","slug":"随笔","count":28,"path":"api/categories/随笔.json"}],"tags":[]},{"title":"Python Flask(一) --by Maxime Bouroumeau-Fuseau","slug":"python-flask-by-maxime-bouroumeau-fuseau","date":"2017-10-08T07:54:30.000Z","updated":"2019-07-03T13:51:36.858Z","comments":true,"path":"api/articles/python-flask-by-maxime-bouroumeau-fuseau.json","excerpt":"","keywords":null,"cover":null,"content":"<p>第一节的代码</p>\n<pre><code># -*- coding: utf-8 -*-\nimport sqlite3\nfrom flask import Flask, request, session, g, redirect, url_for,abort, render_template, flash, jsonify\n\n# configuration\nDATABASE = &apos;/tmp/flaskr.db&apos;\nDEBUG = True\nSECRET_KEY = &apos;development key&apos;\nUSERNAME = &apos;admin&apos;\nPASSWORD = &apos;default&apos;\n\n# create our little application :)\napp = Flask(__name__)\napp.config.from_envvar(&apos;FLASKR_SETTINGS&apos;, silent=True)\napp.config[&apos;SECRET_KEY&apos;]=&apos;F34TF$($e34D&apos;;\n\n\n@app.route(&apos;/_add_numbers&apos;)\ndef add_numbers():\n    a=request.args.get(&apos;a&apos;,0,type=int)\n    b=request.args.get(&apos;b&apos;,0,type=int)\n    return jsonify(result=a+b)\n\n@app.route(&apos;/&apos;)\ndef home():\n    return render_template(&apos;index.html&apos;)\n\n@app.route(&apos;/signup&apos;,methods=[&apos;POST&apos;])\ndef signup():\n    session[&apos;username&apos;]=request.form[&apos;username&apos;]\n    session[&apos;message&apos;]=request.form[&apos;message&apos;]\n    return redirect(url_for(&apos;message&apos;))\n\n@app.route(&apos;/message&apos;)\ndef message():\n    if not &apos;username&apos; in session:\n        return abort(403)\n    return render_template(&apos;message.html&apos;,username=session[&apos;username&apos;],message=session[&apos;message&apos;])\n\ndef connect_db():\n    return sqlite3.connect(app.config[&apos;DATABASE&apos;])\n\nif __name__ == &apos;__main__&apos;:\n    app.run()</code></pre><p>在这个例子中,用户将输入想要说的信息到第一个页面,即用户和,message,这些数据将被存储在session中并且将被同步显示在/message页面下. Some observations: - <code>app.config</code> is a dict containing configuration parameters - <code>@app.route()</code> is by default limited to GET requests. Allowed HTTP methods of an action can be specified using the methods keyword arg. - <code>url_for(route_name, **kwargs)</code> should be used to generate urls for your handlers. It takes as first parameter the function name and as keyword args any needed parameters to generate the url. - <code>redirect(url)</code> creates an HTTP response with a redirect code and location - <code>abort(http_code)</code> is used to create error responses and stop the executing function. Flask is natively integrated with <code>jinja2</code>, a very good templating engine. Templates should be saved as .html files under the templates/ folder. The <code>render_template(filename, **kwargs)</code> function is a pretty straightforward method to render them. 即render_template()函数接受任意多个参数,第一个参数是位于templates/下的模板文件,之后的参数均是模板文件内定义的数据. 然后我们使用jinja渲染html.代码如下</p>\n<pre><code>index.html:\n\n{% extends \"layout.html\" %}\n{% block content %}\n        <h1>Say something</h1>\n        <form method=\"post\" action=\"{ { url_for('signup') }}\">\n            <p><label>Username:</label> <input type=\"text\" name=\"username\" required></p>\n            <p><label>Message:</label> <textarea name=\"message\"></textarea></p>\n            <p><button type=\"submit\">Send</button></p>\n        </form>\n    {% endblock %}\n\nmessage.html:\n\n{% extends \"layout.html\" %}\n{% block content %}\n        <h1>{ { username }} said:</h1>\n        <p>\n            { { message }}\n        </p>\n        <a href=\"{ { url_for('home') }}\">Say something else</a>\n    {% endblock %}\n\nlayout.html:\n\n&lt;!doctype html&gt;\n&lt;html lang=&quot;en&quot;&gt;\n    &lt;head&gt;\n        &lt;title&gt;Say somthing&lt;/title&gt;\n        &lt;meta http-equiv=&quot;content-type&quot; content=&quot;text/html; charset=utf-8&quot;&gt;\n        &lt;link rel=&quot;shortcut icon&quot; href=&quot;{ { url_for(&apos;static&apos;, filename=&apos;favicon.ico&apos;) }}&quot;&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n        {% block content %}{% endblock %}\n    &lt;/body&gt;\n&lt;/html&gt;</code></pre><p>其中,模板中的url_for()是从 static/ 目录下get到当时路由定义函数渲染的页面.比如这里会转到<code>index.html</code></p>\n","text":"第一节的代码# -*- coding: utf-8 -*-import sqlite3from flask import Flask, request, session, g, redirect, url_for,abort, render_template, flash, js","link":"","raw":null,"photos":[],"categories":[{"name":"Flask","slug":"Flask","count":18,"path":"api/categories/Flask.json"},{"name":"Python","slug":"Flask/Python","count":16,"path":"api/categories/Flask/Python.json"}],"tags":[{"name":"Flask","slug":"Flask","count":20,"path":"api/tags/Flask.json"},{"name":"Python","slug":"Python","count":65,"path":"api/tags/Python.json"}]},{"title":"python os模块+flask实现文件上传","slug":"python-os-flask-upload","date":"2017-10-08T00:28:45.000Z","updated":"2019-07-03T13:51:36.858Z","comments":true,"path":"api/articles/python-os-flask-upload.json","excerpt":"","keywords":null,"cover":null,"content":"<p>首先是os模块选择上传目录: os.path为初始画一个path对象,他可以将路径转换为标准路径.</p>\n<pre><code>os.path.dirname()</code></pre><p>转到相应文件目录</p>\n<pre><code>os.getcwd()</code></pre><p>获取当前目录</p>\n<pre><code>os.path.join(path1,path2,path3...)</code></pre><p>将所有目录组合起来 实现代码如下:</p>\n<pre><code># -*- coding: utf-8 -*-\nimport os\nfrom flask import Flask, request, url_for, send_from_directory\nfrom werkzeug import secure_filename\nimport logging; logging.basicConfig(level=logging.INFO)\n\nALLOWED_EXTENSIONS = set([&apos;png&apos;, &apos;jpg&apos;, &apos;jpeg&apos;, &apos;gif&apos;])\n\napp = Flask(__name__)\napp.config[&apos;UPLOAD_FOLDER&apos;] = os.path.join(os.path.dirname(os.getcwd()),&apos;static&apos;,&apos;cav&apos;)\napp.config[&apos;MAX_CONTENT_LENGTH&apos;] = 16 * 1024 * 1024\n\n\nhtml = &apos;&apos;&apos;\n    &lt;!DOCTYPE html&gt;\n    &lt;title&gt;Upload File&lt;/title&gt;\n    &lt;h1&gt;图片上传&lt;/h1&gt;\n    &lt;form method=post enctype=multipart/form-data&gt;\n         &lt;input type=file name=file&gt;\n         &lt;input type=submit value=上传&gt;\n    &lt;/form&gt;\n    &apos;&apos;&apos;\n\n\ndef allowed_file(filename):\n    return &apos;.&apos; in filename and \\\n           filename.rsplit(&apos;.&apos;, 1)[1] in ALLOWED_EXTENSIONS\n\n\n@app.route(&apos;/uploads/&lt;filename&gt;&apos;)\ndef uploaded_file(filename):\n\n    return send_from_directory(app.config[&apos;UPLOAD_FOLDER&apos;],\n                               filename)\n\n\n@app.route(&apos;/&apos;, methods=[&apos;GET&apos;, &apos;POST&apos;])\ndef upload_file():\n    if request.method == &apos;POST&apos;:\n        file = request.files[&apos;file&apos;]\n        if file and allowed_file(file.filename):\n            filename = secure_filename(file.filename)\n            logging.info(&apos;Upload path with : &apos;,os.path.join(app.config[&apos;UPLOAD_FOLDER&apos;], filename))\n            logging.info(app.config[&apos;UPLOAD_FOLDER&apos;])\n            file.save(os.path.join(app.config[&apos;UPLOAD_FOLDER&apos;], filename))\n            file_url = url_for(&apos;uploaded_file&apos;, filename=filename)\n            return html + &apos;&lt;br&gt;&lt;img src=&apos; + file_url + &apos;&gt;&apos;\n    return html\n\n\nif __name__ == &apos;__main__&apos;:\n    app.run()</code></pre>","text":"首先是os模块选择上传目录: os.path为初始画一个path对象,他可以将路径转换为标准路径.os.path.dirname()转到相应文件目录os.getcwd()获取当前目录os.path.join(path1,path2,path3...)将所有目录组合起来 实现代码如","link":"","raw":null,"photos":[],"categories":[{"name":"Python","slug":"Python","count":41,"path":"api/categories/Python.json"}],"tags":[{"name":"Python","slug":"Python","count":65,"path":"api/tags/Python.json"}]},{"title":"呼~咻~","slug":"hxx","date":"2017-10-06T15:58:53.000Z","updated":"2019-07-03T13:51:36.858Z","comments":true,"path":"api/articles/hxx.json","excerpt":"","keywords":null,"cover":null,"content":"<p>欢迎光临记事版:kissing_heart: <a href=\"http://be-sunshine.cn:81/static/diary/index.html\" title=\"Diary-来自地平线的笔记本\" target=\"_blank\" rel=\"noopener\">Diary-来自地平线的笔记本</a></p>\n","text":"欢迎光临记事版:kissing_heart: Diary-来自地平线的笔记本","link":"","raw":null,"photos":[],"categories":[{"name":"未分类","slug":"未分类","count":16,"path":"api/categories/未分类.json"}],"tags":[]},{"title":"Egret 滤镜","slug":"egret-filter","date":"2017-10-06T09:15:46.000Z","updated":"2019-07-03T13:51:36.858Z","comments":true,"path":"api/articles/egret-filter.json","excerpt":"","keywords":null,"cover":"http://be-sunshine.cn/wp-content/uploads/2017/10/QQ%E6%88%AA%E5%9B%BE20171006171157.png","content":"<p>效果图如下: <a href=\"http://be-sunshine.cn/wp-content/uploads/2017/10/QQ%E6%88%AA%E5%9B%BE20171006171157.png\" target=\"_blank\" rel=\"noopener\"><img src=\"http://be-sunshine.cn/wp-content/uploads/2017/10/QQ%E6%88%AA%E5%9B%BE20171006171157.png\" alt></a> 在之前需要在资源文件.json下添加该文件进组,以便加载时可以一起加载. Egret不能在使用时动态加载位图,只能在使用前加载. Main.ts代码如下:</p>\n<pre><code>//Main.ts\n\nclass Main extends egret.DisplayObjectContainer {\n\n    /**\n     * 加载进度界面\n     * Process interface loading\n     */\n    private loadingView: LoadingUI;\n\n    public constructor() {\n        super();\n        this.addEventListener(egret.Event.ADDED_TO_STAGE, this.onAddToStage, this);\n    }\n\n    private onAddToStage(event: egret.Event) {\n\n        egret.lifecycle.addLifecycleListener((context) =&gt; {\n            // custom lifecycle plugin\n\n            context.onUpdate = () =&gt; {\n                console.log(&apos;hello,world&apos;)\n            }\n        })\n\n        egret.lifecycle.onPause = () =&gt; {\n            egret.ticker.pause();\n        }\n\n        egret.lifecycle.onResume = () =&gt; {\n            egret.ticker.resume();\n        }\n\n\n        //设置加载进度界面\n        //Config to load process interface\n        this.loadingView = new LoadingUI();\n        this.stage.addChild(this.loadingView);\n\n        //初始化Resource资源加载库\n        //initiate Resource loading library\n        RES.addEventListener(RES.ResourceEvent.CONFIG_COMPLETE, this.onConfigComplete, this);\n        RES.loadConfig(&quot;resource/default.res.json&quot;, &quot;resource/&quot;);\n    }\n\n    /**\n     * 配置文件加载完成,开始预加载preload资源组。\n     * configuration file loading is completed, start to pre-load the preload resource group\n     */\n    private onConfigComplete(event: RES.ResourceEvent): void {\n        RES.removeEventListener(RES.ResourceEvent.CONFIG_COMPLETE, this.onConfigComplete, this);\n        RES.addEventListener(RES.ResourceEvent.GROUP_COMPLETE, this.onResourceLoadComplete, this);\n        RES.addEventListener(RES.ResourceEvent.GROUP_LOAD_ERROR, this.onResourceLoadError, this);\n        RES.addEventListener(RES.ResourceEvent.GROUP_PROGRESS, this.onResourceProgress, this);\n        RES.addEventListener(RES.ResourceEvent.ITEM_LOAD_ERROR, this.onItemLoadError, this);\n        RES.loadGroup(&quot;preload&quot;);\n    }\n\n    /**\n     * preload资源组加载完成\n     * Preload resource group is loaded\n     */\n    private onResourceLoadComplete(event: RES.ResourceEvent) {\n        if (event.groupName == &quot;preload&quot;) {\n            this.stage.removeChild(this.loadingView);\n            RES.removeEventListener(RES.ResourceEvent.GROUP_COMPLETE, this.onResourceLoadComplete, this);\n            RES.removeEventListener(RES.ResourceEvent.GROUP_LOAD_ERROR, this.onResourceLoadError, this);\n            RES.removeEventListener(RES.ResourceEvent.GROUP_PROGRESS, this.onResourceProgress, this);\n            RES.removeEventListener(RES.ResourceEvent.ITEM_LOAD_ERROR, this.onItemLoadError, this);\n            this.createGameScene();\n        }\n    }\n\n    /**\n     * 资源组加载出错\n     *  The resource group loading failed\n     */\n    private onItemLoadError(event: RES.ResourceEvent) {\n        console.warn(&quot;Url:&quot; + event.resItem.url + &quot; has failed to load&quot;);\n    }\n\n    /**\n     * 资源组加载出错\n     *  The resource group loading failed\n     */\n    private onResourceLoadError(event: RES.ResourceEvent) {\n        //TODO\n        console.warn(&quot;Group:&quot; + event.groupName + &quot; has failed to load&quot;);\n        //忽略加载失败的项目\n        //Ignore the loading failed projects\n        this.onResourceLoadComplete(event);\n    }\n\n    /**\n     * preload资源组加载进度\n     * Loading process of preload resource group\n     */\n    private onResourceProgress(event: RES.ResourceEvent) {\n        if (event.groupName == &quot;preload&quot;) {\n            this.loadingView.setProgress(event.itemsLoaded, event.itemsTotal);\n        }\n    }\n\n    private textfield: egret.TextField;\n\n    /**\n     * 创建游戏场景\n     * Create a game scene\n     */\n    private createGameScene() {\n/*        let sky = this.createBitmapByName(&quot;bg_jpg&quot;);\n        this.addChild(sky);\n        let stageW = this.stage.stageWidth;\n        let stageH = this.stage.stageHeight;\n        sky.width = stageW;\n        sky.height = stageH;\n\n        let topMask = new egret.Shape();\n        topMask.graphics.beginFill(0x000000, 0.5);\n        topMask.graphics.drawRect(0, 0, stageW, 172);\n        topMask.graphics.endFill();\n        topMask.y = 33;\n        this.addChild(topMask);\n\n        let icon = this.createBitmapByName(&quot;egret_icon_png&quot;);\n        this.addChild(icon);\n        icon.x = 26;\n        icon.y = 33;\n\n        let line = new egret.Shape();\n        line.graphics.lineStyle(2, 0xffffff);\n        line.graphics.moveTo(0, 0);\n        line.graphics.lineTo(0, 117);\n        line.graphics.endFill();\n        line.x = 172;\n        line.y = 61;\n        this.addChild(line);\n\n\n        let colorLabel = new egret.TextField();\n        colorLabel.textColor = 0xffffff;\n        colorLabel.width = stageW - 172;\n        colorLabel.textAlign = &quot;center&quot;;\n        colorLabel.text = &quot;Hello Egret&quot;;\n        colorLabel.size = 24;\n        colorLabel.x = 172;\n        colorLabel.y = 80;\n        this.addChild(colorLabel);\n\n        let textfield = new egret.TextField();\n        this.addChild(textfield);\n        textfield.alpha = 0;\n        textfield.width = stageW - 172;\n        textfield.textAlign = egret.HorizontalAlign.CENTER;\n        textfield.size = 24;\n        textfield.textColor = 0xffffff;\n        textfield.x = 172;\n        textfield.y = 135;\n        this.textfield = textfield;*/\n\n        //根据name关键字，异步获取一个json配置文件，name属性请参考resources/resource.json配置文件的内容。\n        // Get asynchronously a json configuration file according to name keyword. As for the property of name please refer to the configuration file of resources/resource.json.\n        let qb=this.createBitmapByName(&apos;cartoon-egret_00_png&apos;);\n        this.addChild(qb);\n        qb.y=100;\n\n        let qb1=this.createBitmapByName(&apos;cartoon-egret_00_png&apos;);\n        this.addChild(qb1);\n        qb1.y=100;\n        qb1.x=300;\n\n        this.applyGlowFilter(qb1);\n        //RES.getResAsync(&quot;description_json&quot;, this.startAnimation, this)\n    }\n    private applyGlowFilter(disp:egret.DisplayObject):void{\n        var color:number=0x33CCFF;\n        //光晕的颜色\n        var alpha:number=0.8;\n        //透明度\n        var blurX:number=35;//水平模糊量\n        var blurY:number=35;//垂直模糊量\n        var strength:number=2;//压印的强度,值越大,压印的颜色越深\n        var quality:number=egret.BitmapFilterQuality.HIGH;//应用滤镜的次数\n        var inner:boolean=false;//制定发光是否为内侧发光\n        var knockout:boolean=false;//指定对象是否具有挖空效果\n        var glowFilter:egret.GlowFilter=new egret.GlowFilter(color,alpha,blurX,blurY,strength,quality,inner,knockout);\n        disp.filters=[glowFilter]; \n    }\n    /**\n     * 根据name关键字创建一个Bitmap对象。name属性请参考resources/resource.json配置文件的内容。\n     * Create a Bitmap object according to name keyword.As for the property of name please refer to the configuration file of resources/resource.json.\n     */\n    private createBitmapByName(name: string) {\n        let result = new egret.Bitmap();\n        let texture: egret.Texture = RES.getRes(name);\n        result.texture = texture;\n        return result;\n    }\n\n    /**\n     * 描述文件加载成功，开始播放动画\n     * Description file loading is successful, start to play the animation\n     */\n    private startAnimation(result: string[]) {\n        let parser = new egret.HtmlTextParser();\n\n        let textflowArr = result.map(text =&gt; parser.parse(text));\n        let textfield = this.textfield;\n        let count = -1;\n        let change = () =&gt; {\n            count++;\n            if (count &gt;= textflowArr.length) {\n                count = 0;\n            }\n            let textFlow = textflowArr[count];\n\n            // 切换描述内容\n            // Switch to described content\n            textfield.textFlow = textFlow;\n            let tw = egret.Tween.get(textfield);\n            tw.to({ &quot;alpha&quot;: 1 }, 200);\n            tw.wait(2000);\n            tw.to({ &quot;alpha&quot;: 0 }, 200);\n            tw.call(change, this);\n        };\n\n        change();\n    }\n}</code></pre>","text":"效果图如下:  [Figure]  在之前需要在资源文件.json下添加该文件进组,以便加载时可以一起加载. Egret不能在使用时动态加载位图,只能在使用前加载. Main.ts代码如下://Main.tsclass Main extends egret.DisplayObje","link":"","raw":null,"photos":[],"categories":[{"name":"Egret","slug":"Egret","count":3,"path":"api/categories/Egret.json"}],"tags":[{"name":"Egret","slug":"Egret","count":3,"path":"api/tags/Egret.json"}]},{"title":"关于Python-threading中的args参数传递到std中","slug":"python-threading-args-on-pass-on-std","date":"2017-10-05T05:32:23.000Z","updated":"2019-07-03T13:51:36.858Z","comments":true,"path":"api/articles/python-threading-args-on-pass-on-std.json","excerpt":"","keywords":null,"cover":"http://be-sunshine.cn/wp-content/uploads/2017/10/QQ%E6%88%AA%E5%9B%BE20171005132855.png","content":"<p>示例代码及标注如下</p>\n<pre><code>import threading\n\n# 创建全局ThreadLocal对象:\nlocal_school = threading.local()\n\ndef process_student():\n    # 获取当前线程关联的student:\n    std = local_school.student\n    #以下这句证明了std是args的第一个元素的值\n    if isinstance(std,list):\n        print(std[2][&apos;Hello&apos;])\n    print(&apos;Hello, %s (in %s)&apos; % (std, threading.current_thread().name))\n\ndef process_thread(name):\n    # 绑定ThreadLocal的student:\n    local_school.student = name\n    process_student()\n\nt1 = threading.Thread(target= process_thread, args=([&apos;Alice&apos;,123,{&quot;Hello&quot;:&quot;seek&quot;}],), name=&apos;Thread-A&apos;)\nt2 = threading.Thread(target= process_thread, args=(&apos;Bob&apos;,), name=&apos;Thread-B&apos;)\nt1.start()\nt2.start()\nt1.join()\nt2.join()</code></pre><p>结果如下: <img src=\"http://be-sunshine.cn/wp-content/uploads/2017/10/QQ%E6%88%AA%E5%9B%BE20171005132855.png\" alt=\"Aaron\"> 可以看到,第一个参数的第三个参数是dict类型,,不是string. 而且所有的参数都是在args的第一个元素内传递的.</p>\n","text":"示例代码及标注如下import threading# 创建全局ThreadLocal对象:local_school = threading.local()def process_student():    # 获取当前线程关联的student:    std = local_sc","link":"","raw":null,"photos":[],"categories":[{"name":"Process","slug":"Process","count":2,"path":"api/categories/Process.json"}],"tags":[{"name":"Process","slug":"Process","count":2,"path":"api/tags/Process.json"}]}]}