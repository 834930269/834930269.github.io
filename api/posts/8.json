{"total":369,"pageSize":10,"pageCount":37,"data":[{"title":"51NOD 1241 特殊的排序","slug":"51nod-1241-tsds","date":"2018-03-08T10:57:18.000Z","updated":"2019-07-03T13:51:36.862Z","comments":true,"path":"api/articles/51nod-1241-tsds.json","excerpt":"","keywords":null,"cover":null,"content":"<h1><span id=\"type动态规划思维最长等差数列简化\">Type:动态规划,思维,最长等差数列(简化)</span></h1><h1><span id=\"题目\">题目</span></h1><p>一个数组的元素为1至N的整数，现在要对这个数组进行排序，在排序时只能将元素放在数组的头部或尾部，问至少需要移动多少个数字，才能完成整个排序过程？ 例如： 2 5 3 4 1 将1移到头部 =&gt; 1 2 5 3 4 将5移到尾部 =&gt; 1 2 3 4 5 这样就排好了，移动了2个元素。 给出一个1-N的排列，输出完成排序所需的最少移动次数。</p>\n<h1><span id=\"input\">Input</span></h1><p>第1行：1个数N(2 &lt;= N &lt;= 50000)。 第2 - N + 1行：每行1个数，对应排列中的元素。</p>\n<h1><span id=\"output\">Output</span></h1><p>输出1个数，对应所需的最少移动次数。</p>\n<h1><span id=\"input示例\">Input示例</span></h1><p>5 2 5 3 4 1</p>\n<h1><span id=\"output示例\">Output示例</span></h1><p>2</p>\n<h1><span id=\"题解\">题解</span></h1><blockquote>\n<p>一开始会想到和逆序数有关,排序就是减少逆序数,所以会想到其中非逆序序列中最长的那个不用变化. 然后可以容易地证明剩余的数只需要移动一次即可到达正确的位置上</p>\n<blockquote>\n<p>比如 12346587 可以发现最长等差整数序列是 12345 而我们需要 12345678 第一次: 1234587 6 第二次: 1234586 7 第三次: 1234567 8 OK,往数列前面放的也一样</p>\n</blockquote>\n<p>那么我们的问题就是如何求最长等差数列(等差为1)了,</p>\n<blockquote>\n<p>因为等差为1,所以我们不难想到: dp[i] 为数字 i 的最长等差数列. 遍历Num[]数组的时候计算 dp 即可 dp[i]=dp[i-1]+1</p>\n</blockquote>\n</blockquote>\n<h1><span id=\"code\">Code</span></h1><pre><code>#include&lt;bits/stdc++.h&gt;\nusing namespace std;\nconst int maxn=50000+10;\n\nint dp[maxn],N,Num[maxn],max_;\n\nint main(){\n    while(cin&gt;&gt;N){\n        memset(dp,0,sizeof(dp));\n        dp[0]=0;\n        max_=1;\n        for(int i=1;i&lt;=N;++i){\n            cin&gt;&gt;Num[i];\n        }\n        for(int i=1;i&lt;=N;++i){\n            dp[Num[i]]=dp[Num[i]-1]+1;\n            max_=max(dp[Num[i]],max_);\n            //cout&lt;&lt;i&lt;&lt;&quot; &quot;&lt;&lt;dp[Num[i]]&lt;&lt;endl;\n        }\n        cout&lt;&lt;N-max_&lt;&lt;endl;\n    }\n    return 0;\n}</code></pre>","text":"Type:动态规划,思维,最长等差数列(简化)题目一个数组的元素为1至N的整数，现在要对这个数组进行排序，在排序时只能将元素放在数组的头部或尾部，问至少需要移动多少个数字，才能完成整个排序过程？ 例如： 2 5 3 4 1 将1移到头部 =&gt; 1 2 5 3 4 将5移到尾","link":"","raw":null,"photos":[],"categories":[{"name":"51nod","slug":"51nod","count":12,"path":"api/categories/51nod.json"},{"name":"动态规划","slug":"51nod/动态规划","count":3,"path":"api/categories/51nod/动态规划.json"},{"name":"思维","slug":"51nod/动态规划/思维","count":1,"path":"api/categories/51nod/动态规划/思维.json"}],"tags":[{"name":"思维","slug":"思维","count":17,"path":"api/tags/思维.json"},{"name":"51nod","slug":"51nod","count":12,"path":"api/tags/51nod.json"},{"name":"动态规划","slug":"动态规划","count":24,"path":"api/tags/动态规划.json"}]},{"title":"51nod 1120 机器人走方格 V3","slug":"51nod-1120-rm-v3","date":"2018-03-07T12:59:38.000Z","updated":"2019-07-03T13:51:36.862Z","comments":true,"path":"api/articles/51nod-1120-rm-v3.json","excerpt":"","keywords":null,"cover":"http://be-sunshine.cn/wp-content/uploads/2018/03/QQ%E6%88%AA%E5%9B%BE20180307205702.png","content":"<h1><span id=\"typelucascatalan序列逆元\">Type:Lucas+Catalan序列+逆元</span></h1><h1><span id=\"题目\">题目</span></h1><p>N * N的方格，从左上到右下画一条线。一个机器人从左上走到右下，只能向右或向下走。并要求只能在这条线的上面或下面走，不能穿越这条线，有多少种不同的走法？由于方法数量可能很大，只需要输出Mod 10007的结果。</p>\n<h1><span id=\"input\">Input</span></h1><p>输入一个数N(2 &lt;= N &lt;= 10^9)。</p>\n<h1><span id=\"output\">Output</span></h1><p>输出走法的数量 Mod 10007。</p>\n<h1><span id=\"input示例\">Input示例</span></h1><p>4</p>\n<h1><span id=\"output示例\">Output示例</span></h1><p>10</p>\n<h1><span id=\"题解\">题解</span></h1><blockquote>\n<p>画图会发现就是一个Catalan序列, 但我一开始没理解题意,原来只是不能跨过斜线,但可以在斜线上走…</p>\n<blockquote>\n<p>在Excel中画了一下,因为两边是对称的,所以我们只需要求一边,将最终的答案*2即可.</p>\n</blockquote>\n</blockquote>\n<p><img src=\"http://be-sunshine.cn/wp-content/uploads/2018/03/QQ%E6%88%AA%E5%9B%BE20180307205702.png\" alt></p>\n<h1><span id=\"code\">Code</span></h1><pre><code>#include&lt;bits/stdc++.h&gt;\nusing namespace std;\ntypedef long long LL;\nconst LL mod=10007;\n\nLL Pow(LL a,LL b,LL p){\n    LL ans=1;\n    while(b){\n        if(b&amp;1)\n        {\n            b--;\n            ans=(ans*a)%p;\n        }\n        b&gt;&gt;=1;\n        a=(a*a)%p;\n    }\n    return ans;\n}\n\nLL Comb(LL a,LL b,LL p)\n{\n    if(a &lt; b) return 0;\n    if(a == b) return 1;\n    if(b &gt; a-b) b = a-b;\n    LL ans = 1, ca = 1, cb = 1;\n    for(LL i=0; i&lt;b; ++i)\n    {\n        ca = (ca*(a-i))%p;\n        cb = (cb*(b-i))%p;\n    }\n    ans = (ca*Pow(cb, p-2,p))%p;\n    return ans;\n}\nLL Lucas(LL n, LL m, LL p)\n{\n    LL ans = 1;\n    while(n &amp;&amp; m &amp;&amp; ans)\n    {\n        ans = (ans * Comb(n%p, m%p, p))%p;\n        n /= p;\n        m /= p;\n    }\n    ///如果等于0则返回1\n    return ans==0?1:ans;\n}\n\nvoid extgcd(LL a,LL b,LL&amp; d,LL&amp; x,LL&amp; y){\n    if(!b){ d=a; x=1; y=0;}\n    else{ extgcd(b,a%b,d,y,x); y-=x*(a/b); }\n}\nLL inv(LL a,LL n){\n    LL d,x,y;\n    extgcd(a,n,d,x,y);\n    return d==1?(x+n)%n:-1;\n}\n\nint main(){\n    LL N;\n    while(cin&gt;&gt;N){\n        N=N-1;\n        LL d1,d2;\n        LL x=Lucas(2*N,N,mod);\n        LL d=inv(N+1,mod);\n        //cout&lt;&lt;&quot;Lucas: &quot;&lt;&lt;x&lt;&lt;endl;\n        //cout&lt;&lt;&quot;Inv: &quot;&lt;&lt;d&lt;&lt;endl;\n        cout&lt;&lt;2*x*d%mod&lt;&lt;endl;\n    }\n    return 0;\n}</code></pre>","text":"Type:Lucas+Catalan序列+逆元题目N * N的方格，从左上到右下画一条线。一个机器人从左上走到右下，只能向右或向下走。并要求只能在这条线的上面或下面走，不能穿越这条线，有多少种不同的走法？由于方法数量可能很大，只需要输出Mod 10007的结果。Input输入一个","link":"","raw":null,"photos":[],"categories":[{"name":"51nod","slug":"51nod","count":12,"path":"api/categories/51nod.json"},{"name":"Catalan","slug":"51nod/Catalan","count":1,"path":"api/categories/51nod/Catalan.json"},{"name":"Lucas","slug":"51nod/Catalan/Lucas","count":1,"path":"api/categories/51nod/Catalan/Lucas.json"},{"name":"数论","slug":"51nod/Catalan/Lucas/数论","count":1,"path":"api/categories/51nod/Catalan/Lucas/数论.json"},{"name":"组合数学","slug":"51nod/Catalan/Lucas/数论/组合数学","count":1,"path":"api/categories/51nod/Catalan/Lucas/数论/组合数学.json"},{"name":"逆元","slug":"51nod/Catalan/Lucas/数论/组合数学/逆元","count":1,"path":"api/categories/51nod/Catalan/Lucas/数论/组合数学/逆元.json"}],"tags":[{"name":"数论","slug":"数论","count":28,"path":"api/tags/数论.json"},{"name":"51nod","slug":"51nod","count":12,"path":"api/tags/51nod.json"},{"name":"组合数学","slug":"组合数学","count":12,"path":"api/tags/组合数学.json"},{"name":"逆元","slug":"逆元","count":4,"path":"api/tags/逆元.json"},{"name":"Catalan","slug":"Catalan","count":1,"path":"api/tags/Catalan.json"},{"name":"Lucas","slug":"Lucas","count":1,"path":"api/tags/Lucas.json"}]},{"title":"51nod 1119 机器人走方格V2","slug":"51nod-1119-reboot-in-v2","date":"2018-03-07T07:42:36.000Z","updated":"2019-07-03T13:51:36.862Z","comments":true,"path":"api/articles/51nod-1119-reboot-in-v2.json","excerpt":"","keywords":null,"cover":null,"content":"<h1><span id=\"type-组合数学二项式定理逆元\">Type: 组合数学,二项式定理,逆元</span></h1><h1><span id=\"题目\">题目</span></h1><p>M * N的方格，一个机器人从左上走到右下，只能向右或向下走。有多少种不同的走法？由于方法数量可能很大，只需要输出Mod 10^9 + 7的结果。</p>\n<h1><span id=\"input\">Input</span></h1><p>第1行，2个数M,N，中间用空格隔开。（2 &lt;= m,n &lt;= 1000000)</p>\n<h1><span id=\"output\">Output</span></h1><p>输出走法的数量 Mod 10^9 + 7。</p>\n<h1><span id=\"input示例\">Input示例</span></h1><p>2 3</p>\n<h1><span id=\"output示例\">Output示例</span></h1><p>3</p>\n<h1><span id=\"题解\">题解</span></h1><blockquote>\n<p>画一下图会发现这就是杨辉三角,而我们需要求的是C(N+M-2,N-1) 用逆元和递推公式算一下就可以了</p>\n</blockquote>\n<h1><span id=\"code\">Code</span></h1><pre><code>#include&lt;bits/stdc++.h&gt;\nusing namespace std;\ntypedef long long LL;\nconst int mod=1e9+7;\nconst int maxn=1000000+10;\nint m,n;\n\nLL inv[maxn];\nvoid init(){\n    inv[1]=1;\n    for(int i=2;i&lt;maxn;++i){\n        inv[i]=(mod-mod/i)*1ll*inv[mod%i]%mod;\n    }\n}\n\nLL solve(int N,int M){\n    ///ans=C(N,M)\n    //cout&lt;&lt;N&lt;&lt;&quot; &quot;&lt;&lt;M&lt;&lt;endl;\n    LL ans=1;\n    for(int i=1;i&lt;=M;++i){\n        ans=ans*(N-i+1)*1ll%mod*inv[i]%mod;\n    }\n    return ans;\n}\n\nint main(){\n    init();\n    while(cin&gt;&gt;m&gt;&gt;n){\n        cout&lt;&lt;solve(n+m-2,n-1)&lt;&lt;endl;\n    }\n    return 0;\n}</code></pre>","text":"Type: 组合数学,二项式定理,逆元题目M * N的方格，一个机器人从左上走到右下，只能向右或向下走。有多少种不同的走法？由于方法数量可能很大，只需要输出Mod 10^9 + 7的结果。Input第1行，2个数M,N，中间用空格隔开。（2 &lt;= m,n &lt;= 100","link":"","raw":null,"photos":[],"categories":[{"name":"51nod","slug":"51nod","count":12,"path":"api/categories/51nod.json"},{"name":"二项式定理","slug":"51nod/二项式定理","count":1,"path":"api/categories/51nod/二项式定理.json"},{"name":"组合数学","slug":"51nod/二项式定理/组合数学","count":1,"path":"api/categories/51nod/二项式定理/组合数学.json"},{"name":"逆元","slug":"51nod/二项式定理/组合数学/逆元","count":1,"path":"api/categories/51nod/二项式定理/组合数学/逆元.json"}],"tags":[{"name":"51nod","slug":"51nod","count":12,"path":"api/tags/51nod.json"},{"name":"二项式定理","slug":"二项式定理","count":1,"path":"api/tags/二项式定理.json"},{"name":"组合数学","slug":"组合数学","count":12,"path":"api/tags/组合数学.json"},{"name":"逆元","slug":"逆元","count":4,"path":"api/tags/逆元.json"}]},{"title":"51nod 1383 整数分解为2的幂","slug":"51nod-1383-2-mo","date":"2018-03-07T04:50:34.000Z","updated":"2019-07-03T13:51:36.862Z","comments":true,"path":"api/articles/51nod-1383-2-mo.json","excerpt":"","keywords":null,"cover":null,"content":"<h1><span id=\"type-组合数学母函数\">Type: 组合数学,母函数</span></h1><h1><span id=\"题目\">题目</span></h1><p>任何正整数都能分解成2的幂，给定整数N，求N的此类划分方法的数量！由于方案数量较大，输出Mod 1000000007的结果。 比如N = 7时，共有6种划分方法。 7=1+1+1+1+1+1+1 =1+1+1+1+1+2 =1+1+1+2+2 =1+2+2+2 =1+1+1+4 =1+2+4</p>\n<h1><span id=\"input\">Input</span></h1><p>输入一个数N（1 &lt;= N &lt;= 10^6)</p>\n<h1><span id=\"output\">Output</span></h1><p>输出划分方法的数量Mod 1000000007</p>\n<h1><span id=\"input示例\">Input示例</span></h1><p>7</p>\n<h1><span id=\"output示例\">Output示例</span></h1><p>6</p>\n<h1><span id=\"题解\">题解</span></h1><blockquote>\n<p>生成函数</p>\n<blockquote>\n<p>我们可以将题意理解为:</p>\n<blockquote>\n<p>有1,2,4,…,2^N&lt;=1000000 种物品可以选择,每种物品可以选择数量为无限,问你当背包重量为 M 时有多少种选择.</p>\n</blockquote>\n</blockquote>\n<p>列出生成函数为:</p>\n<blockquote>\n<p>g(m)=(1+x+x^2+x^3+…)(1+x^2+x^4+x^6+…) (1+x^4+x^8+x^12+…)(1+x^8+x^16+x^24+…) …(1+x^19) | (因为x^20&gt;1e6)</p>\n</blockquote>\n<p>只需要求出展开式中每项的序数即可,输入 N 输出 K[N] 我们给定一个数组 c1 作为储存系数用.</p>\n<blockquote>\n<p>只需要将每个括号内的式子乘入数组 c1 即可.</p>\n<blockquote>\n<p>限制条件为 i=2^t &lt;= 1000000 j+i &lt;= 1000000</p>\n</blockquote>\n</blockquote>\n<p>所有的计算都向第一个括号 (1+x+x^2+…+x^1000000) 为基准进行合并，合并到 j+i&gt;1000000 为止. 其他部分解释放在代码中</p>\n</blockquote>\n<h1><span id=\"code\">Code</span></h1><pre><code>#include&lt;bits/stdc++.h&gt;\nusing namespace std;\nconst int mod=1e9+7;\nconst int maxn=1000100;\nint c1[maxn]={1};\n\ninline void init(int n){\n    for(int i=1;i&lt;=n;i&lt;&lt;=1){\n        for(int j=0;(j+i)&lt;=n;++j){\n            ///j+i是 当前值为j,加上第log2(i)括号内的等差幂次i\n            ///后计算出目标待加值为 (j+i)\n            ///即幂次为(j+i)的母函数系数计算过程为:\n            /// (k)x^(i+j)=(k1)x^j*x^i*(k2)x^(i+j)\n            /// 即 k=k1+k2\n            /// 即 c1[j+i]=c[j]+c[j+i]\n            ///x^i系数为1因为生成函数第log2(i)个括\n            ///号中所有x^i的系数为1\n            c1[j+i]=(c1[j+i]+c1[j])%mod;\n        }\n    }\n}\n\n\nint main(){\n    init(1000000);\n    int N;\n\n    while(cin&gt;&gt;N){\n        cout&lt;&lt;c1[N]&lt;&lt;endl;\n    }\n    return 0;\n}</code></pre>","text":"Type: 组合数学,母函数题目任何正整数都能分解成2的幂，给定整数N，求N的此类划分方法的数量！由于方案数量较大，输出Mod 1000000007的结果。 比如N = 7时，共有6种划分方法。 7=1+1+1+1+1+1+1 =1+1+1+1+1+2 =1+1+1+2+2 =1","link":"","raw":null,"photos":[],"categories":[{"name":"51nod","slug":"51nod","count":12,"path":"api/categories/51nod.json"},{"name":"母函数","slug":"51nod/母函数","count":1,"path":"api/categories/51nod/母函数.json"},{"name":"组合数学","slug":"51nod/母函数/组合数学","count":1,"path":"api/categories/51nod/母函数/组合数学.json"}],"tags":[{"name":"51nod","slug":"51nod","count":12,"path":"api/tags/51nod.json"},{"name":"组合数学","slug":"组合数学","count":12,"path":"api/tags/组合数学.json"},{"name":"母函数","slug":"母函数","count":1,"path":"api/tags/母函数.json"}]},{"title":"51nod 1201 整数划分","slug":"51nod-1201-int-pagi","date":"2018-03-06T01:33:53.000Z","updated":"2019-07-03T13:51:36.862Z","comments":true,"path":"api/articles/51nod-1201-int-pagi.json","excerpt":"","keywords":null,"cover":null,"content":"<h1><span id=\"typedp思维\">Type:DP,思维</span></h1><h1><span id=\"题意\">题意</span></h1><p>将N分为若干个不同整数的和，有多少种不同的划分方式，例如：n = 6，{6} {1,5} {2,4} {1,2,3}，共4种。由于数据较大，输出Mod 10^9 + 7的结果即可。</p>\n<h1><span id=\"input\">Input</span></h1><p>输入1个数N(1 &lt;= N &lt;= 50000)。</p>\n<h1><span id=\"output\">Output</span></h1><p>输出划分的数量Mod 10^9 + 7。</p>\n<h1><span id=\"input示例\">Input示例</span></h1><p>6</p>\n<h1><span id=\"output示例\">Output示例</span></h1><p>4</p>\n<h1><span id=\"题解\">题解</span></h1><blockquote>\n<p>首先我们可以由</p>\n<blockquote>\n<p>1+2+3+…+m=n 估算出 大概只有sqrt(2*n)个数字左右</p>\n</blockquote>\n<p>我们设当前状态为 dp[i][j]</p>\n<blockquote>\n<p>dp[i][j] 代表当前数字为 j ,被划分成了 i 部分. 状态转移推倒:</p>\n<blockquote>\n<p>我们假设已知所有 dp 的划分数序列. (1) 我们将 dp[i][j-i] 每个 划分数每个数字 +1 ,我们将得到 不存在1 的划分数. (2) 我们将 dp[i-1][j-i] 每个 划分数每个数字(共 i-1 个) +1 ,我们将得到 不存在1 的且长度为 i-1 ,和为 j-1 的划分数,然后我们将 1 放到划分数中,即得到全部 有1 的划分数.</p>\n</blockquote>\n<p>即 dp[i][j]=(dp[i][j-i]+dp[i-1][j-i])%mod</p>\n</blockquote>\n<p>正确性证明:</p>\n<blockquote>\n<p>假设已知 dp[i][j] 的全部序列. 我们只需要一直对每个数字 -1 就可以将所有序列置为 全0.</p>\n</blockquote>\n</blockquote>\n<h1><span id=\"给一个例子自己倒着推一下也成立\">给一个例子自己倒着推一下也成立</span></h1><pre><code>组成1的 有 {1} \n\n组成2的 有 {2} \n\n组成3的 有 {1,2} {3}\n\n组成4的 有 {1,3} {4}\n\n组成5的 有 {1,4} {2,3} {5}\n\n组成6的 有 {1,5} {2,4} {1,2,3} {6}\n\n组成7的 有 {1,6} {2,5} {3,4} {1,2,4} {7}</code></pre><h1><span id=\"code\">Code</span></h1><pre><code>#include&lt;bits/stdc++.h&gt;\nusing namespace std;\ntypedef long long LL;\nconst int maxn=50010;\nconst LL mod=1e9+7;\nint N;\nLL dp[330][maxn];\n\nint main(){\n    scanf(&quot;%d&quot;,&amp;N);\n    dp[1][1]=1ll;\n    for(int i=2;i&lt;=N;++i){\n        for(int j=1;j&lt;=(int)sqrt(2*i);++j){\n            dp[j][i]=(dp[j][i-j]+dp[j-1][i-j])%mod;\n        }\n    }\n    LL ans=0;\n    for(int i=1;i&lt;=(int)sqrt(2*N);++i) ans=(ans+dp[i][N])%mod;\n    printf(&quot;%lld\\n&quot;,ans);\n    return 0;\n}</code></pre>","text":"Type:DP,思维题意将N分为若干个不同整数的和，有多少种不同的划分方式，例如：n = 6，{6} {1,5} {2,4} {1,2,3}，共4种。由于数据较大，输出Mod 10^9 + 7的结果即可。Input输入1个数N(1 &lt;= N &lt;= 50000)。Out","link":"","raw":null,"photos":[],"categories":[{"name":"51nod","slug":"51nod","count":12,"path":"api/categories/51nod.json"},{"name":"动态规划","slug":"51nod/动态规划","count":3,"path":"api/categories/51nod/动态规划.json"}],"tags":[{"name":"51nod","slug":"51nod","count":12,"path":"api/tags/51nod.json"},{"name":"动态规划","slug":"动态规划","count":24,"path":"api/tags/动态规划.json"}]},{"title":"51nod 1084 矩阵取数问题 V2","slug":"51nod-1084-jzqs-v2","date":"2018-03-05T15:06:34.000Z","updated":"2019-07-03T13:51:36.862Z","comments":true,"path":"api/articles/51nod-1084-jzqs-v2.json","excerpt":"","keywords":null,"cover":null,"content":"<h1><span id=\"typedp多路进程dp\">Type:DP,多路(进程)DP</span></h1><h1><span id=\"题目\">题目</span></h1><p>一个M*N矩阵中有不同的正整数，经过这个格子，就能获得相应价值的奖励，先从左上走到右下，再从右下走到左上。第1遍时只能向下和向右走，第2遍时只能向上和向左走。两次如果经过同一个格子，则该格子的奖励只计算一次，求能够获得的最大价值。 例如：3 * 3的方格。 1 3 3 2 1 3 2 2 1 能够获得的最大价值为：17。1 -&gt; 3 -&gt; 3 -&gt; 3 -&gt; 1 -&gt; 2 -&gt; 2 -&gt; 2 -&gt; 1。其中起点和终点的奖励只计算1次。</p>\n<h1><span id=\"input\">Input</span></h1><p>第1行：2个数M N，中间用空格分隔，为矩阵的大小。(2 &lt;= M, N &lt;= 200) 第2 - N + 1行：每行M个数，中间用空格隔开，对应格子中奖励的价值。(1 &lt;= A[i,j] &lt;= 10000)</p>\n<h1><span id=\"output\">Output</span></h1><p>输出能够获得的最大价值。</p>\n<h1><span id=\"input示例\">Input示例</span></h1><p>3 3 1 3 3 2 1 3 2 2 1</p>\n<h1><span id=\"output示例\">Output示例</span></h1><p>17</p>\n<h1><span id=\"题解\">题解</span></h1><blockquote>\n<p>一开始的想法是先走一遍取最大值,然后回溯到起点,把走过的地方置为 0,然后WA= =,发现是行不通的,因为两次都是最有没办法保证全局最优.</p>\n<blockquote>\n<p>然后搜了题解</p>\n</blockquote>\n<p>这里用到多进程dp,即我们用 dp[step][j][k] 代表当前走了 step 步,第一个走的人在第 j行,第二个走的人在第 k行时最大的经过路径之和. 如果 j==k 时,即两个人当前路径点重合了.我们只需要随便选取一个加到记忆化数组中即可. 而当我们多路dp时,两个人来到当前状态的方向可能是</p>\n<blockquote>\n<p>(1) 第一个人往下走,第二个人往下走 (2) 第一个人往下走,第二个人往右走 (3) 第一个人往右走,第二个人往下走 (4) 第一个人往右走,第二个人往右走</p>\n</blockquote>\n<p>我们只需要在遍历到每个状态时,对以上四个状态找最大值加上两个人当前地点的数字即可 答案是dp[M+N][N][N]</p>\n</blockquote>\n<h1><span id=\"code\">Code</span></h1><pre><code>#include&lt;bits/stdc++.h&gt;\nusing namespace std;\nconst int maxn=210;\nint N,M,A;\nint mp[maxn][maxn],dp[2*maxn][maxn][maxn];\n\nint main(){\n    ///读题bug,N是行,第二个读入\n    scanf(&quot;%d%d&quot;,&amp;M,&amp;N);\n    for(int i=1;i&lt;=N;++i){\n        for(int j=1;j&lt;=M;++j){\n            scanf(&quot;%d&quot;,&amp;mp[i][j]);\n        }\n    }\n    ///枚举步数\n    for(int i=2;i&lt;=N+M;++i){\n        ///枚举位于行数 i-j or k即为当前所处列(因为总步数为i(行数加列数和))\n        for(int j=1;j&lt;=N&amp;&amp;i-j&gt;=0;++j){\n            for(int k=1;k&lt;=N&amp;&amp;i-k&gt;=0;++k){\n                ///分为四种情况,下下,下右,右下,右右\n                if(k==j){\n                    //下下\n                    dp[i][j][k]=max(dp[i][j][k],dp[i-1][j-1][k-1]+mp[j][i-j]);\n                    //下右\n                    dp[i][j][k]=max(dp[i][j][k],dp[i-1][j][k-1]+mp[j][i-j]);\n                    //右下\n                    dp[i][j][k]=max(dp[i][j][k],dp[i-1][j-1][k]+mp[j][i-j]);\n                    //右右\n                    dp[i][j][k]=max(dp[i][j][k],dp[i-1][j][k]+mp[j][i-j]);\n                }else{\n                    //下下\n                    dp[i][j][k]=max(dp[i][j][k],dp[i-1][j-1][k-1]+mp[j][i-j]+mp[k][i-k]);\n                    //下右\n                    dp[i][j][k]=max(dp[i][j][k],dp[i-1][j][k-1]+mp[j][i-j]+mp[k][i-k]);\n                    //右下\n                    dp[i][j][k]=max(dp[i][j][k],dp[i-1][j-1][k]+mp[j][i-j]+mp[k][i-k]);\n                    //右右\n                    dp[i][j][k]=max(dp[i][j][k],dp[i-1][j][k]+mp[j][i-j]+mp[k][i-k]);\n                }\n            }\n        }\n    }\n    printf(&quot;%d\\n&quot;,dp[N+M][N][N]);\n    return 0;\n}</code></pre>","text":"Type:DP,多路(进程)DP题目一个M*N矩阵中有不同的正整数，经过这个格子，就能获得相应价值的奖励，先从左上走到右下，再从右下走到左上。第1遍时只能向下和向右走，第2遍时只能向上和向左走。两次如果经过同一个格子，则该格子的奖励只计算一次，求能够获得的最大价值。 例如：3 *","link":"","raw":null,"photos":[],"categories":[{"name":"51nod","slug":"51nod","count":12,"path":"api/categories/51nod.json"},{"name":"多进程dp","slug":"51nod/多进程dp","count":1,"path":"api/categories/51nod/多进程dp.json"}],"tags":[{"name":"51nod","slug":"51nod","count":12,"path":"api/tags/51nod.json"},{"name":"动态规划","slug":"动态规划","count":24,"path":"api/tags/动态规划.json"},{"name":"多进程dp","slug":"多进程dp","count":1,"path":"api/tags/多进程dp.json"}]},{"title":"51nod 1020 逆序排列","slug":"51nod-1020-reverse","date":"2018-03-05T04:50:19.000Z","updated":"2019-07-03T13:51:36.862Z","comments":true,"path":"api/articles/51nod-1020-reverse.json","excerpt":"","keywords":null,"cover":null,"content":"<h1><span id=\"typedp逆序数\">Type:DP,逆序数</span></h1><h1><span id=\"题目\">题目</span></h1><p>在一个排列中，如果一对数的前后位置与大小顺序相反，即前面的数大于后面的数，那么它们就称为一个逆序。一个排列中逆序的总数就称为这个排列的逆序数。 如2 4 3 1中，2 1，4 3，4 1，3 1是逆序，逆序数是4。 1-n的全排列中，逆序数最小为0（正序），最大为n*(n-1) / 2（倒序） 给出2个数n和k，求1-n的全排列中，逆序数为k的排列有多少种？ 例如：n = 4 k = 3。 1 2 3 4的排列中逆序为3的共有6个，分别是： 1 4 3 2 2 3 4 1 2 4 1 3 3 1 4 2 3 2 1 4 4 1 2 3 由于逆序排列的数量非常大，因此只需计算并输出该数 Mod 10^9 + 7的结果就可以了。</p>\n<h1><span id=\"input\">Input</span></h1><p>第1行：一个数T，表示后面用作输入测试的数的数量。（1 &lt;= T &lt;= 10000) 第2 - T + 1行：每行2个数n，k。中间用空格分隔。（2 &lt;= n &lt;= 1000, 0 &lt;= k &lt;= 20000)</p>\n<h1><span id=\"output\">Output</span></h1><p>共T行，对应逆序排列的数量 Mod (10^9 + 7)</p>\n<h1><span id=\"input示例\">Input示例</span></h1><p>1 4 3</p>\n<h1><span id=\"output示例\">Output示例</span></h1><p>6</p>\n<h1><span id=\"题解\">题解</span></h1><blockquote>\n<p>考虑 dp[i][j] 表示 元素个数为 i 个时 逆序数为 j 的全排列个数为 dp[i][j] 个.</p>\n<blockquote>\n<p>设当前元素为 N ,则 N 可以放在原来 N-1 个元素的任意全排列的 N-i(i∈[0,N)) 上的位置.</p>\n<blockquote>\n<p>当 N 放在位置 N-i 上时,该排列的逆序数会增长 i (因为N最大,所以后面i个为逆序,前面为顺序),所以当我们想要找长度为 N ,逆序数为 k 的个数时,只需要找长度为 N-1 ,逆序数为 k-i 的全排列的个数即可.</p>\n<blockquote>\n<p>所以 dp[N][k] = lambda(dp[N-1][k-i] | i∈[0,N))</p>\n</blockquote>\n<p>复杂度为 O(k(N^2)) 会炸.</p>\n</blockquote>\n<p>考虑优化:</p>\n<blockquote>\n<p>① dp[N][k] = lambda(dp[N-1][k-i] | i∈[0,N)) ② dp[N][k-1] = lambda(dp[N-1][k-1-i] | i∈[0,N)) ①-②: dp[N][k]-dp[N][k-1] = dp[N-1][k]-dp[N-1][k-N] dp[N][k]=dp[N-1][k]-dp[N-1][k-N]+dp[N][k-1]</p>\n</blockquote>\n</blockquote>\n<p>得出递推公式:</p>\n<blockquote>\n<p>① dp[i][j]=1 j=0 ② dp[i][j]=dp[i-1][j]-dp[i-1][j-i]+dp[i][j-1]</p>\n</blockquote>\n<p>由题目的约束条件:</p>\n<blockquote>\n<p>逆序数最小为0（正序），最大为n*(n-1) / 2（倒序）</p>\n</blockquote>\n<p>故枚举逆序数只需要枚举到 i*(i-1)/2&amp;&amp;j\\&lt;20000即可 注意j-i不能&lt;0</p>\n</blockquote>\n<h1><span id=\"code\">Code</span></h1><pre><code>#include&lt;bits/stdc++.h&gt;\nusing namespace std;\nconst int mod=1e9+7;\nint dp[1010][20010];\n\nvoid init(){\n    for(int i=1;i&lt;=1000;++i) dp[i][0]=1;\n    for(int i=2;i&lt;=1000;++i){\n        for(int j=1;j&lt;=i*(i-1)/2&amp;&amp;j&lt;=20000;++j){\n            dp[i][j]=(dp[i][j-1]+dp[i-1][j])%mod;\n            if(j-i&gt;=0)dp[i][j]=(((dp[i][j]-dp[i-1][j-i])%mod)+mod)%mod;\n        }\n    }\n}\n\nint main(){\n    init();\n    int T;\n    scanf(&quot;%d&quot;,&amp;T);\n    while(T--){\n        int n,k;\n        scanf(&quot;%d%d&quot;,&amp;n,&amp;k);\n        printf(&quot;%d\\n&quot;,dp[n][k]);\n    }\n    return 0;\n}</code></pre>","text":"Type:DP,逆序数题目在一个排列中，如果一对数的前后位置与大小顺序相反，即前面的数大于后面的数，那么它们就称为一个逆序。一个排列中逆序的总数就称为这个排列的逆序数。 如2 4 3 1中，2 1，4 3，4 1，3 1是逆序，逆序数是4。 1-n的全排列中，逆序数最小为0（正序","link":"","raw":null,"photos":[],"categories":[{"name":"51nod","slug":"51nod","count":12,"path":"api/categories/51nod.json"},{"name":"全排列","slug":"51nod/全排列","count":1,"path":"api/categories/51nod/全排列.json"},{"name":"动态规划","slug":"51nod/全排列/动态规划","count":1,"path":"api/categories/51nod/全排列/动态规划.json"},{"name":"逆序数","slug":"51nod/全排列/动态规划/逆序数","count":1,"path":"api/categories/51nod/全排列/动态规划/逆序数.json"}],"tags":[{"name":"逆序数","slug":"逆序数","count":2,"path":"api/tags/逆序数.json"},{"name":"51nod","slug":"51nod","count":12,"path":"api/tags/51nod.json"},{"name":"全排列","slug":"全排列","count":1,"path":"api/tags/全排列.json"},{"name":"动态规划","slug":"动态规划","count":24,"path":"api/tags/动态规划.json"}]},{"title":"51nod 1040 最大公约数之和","slug":"51nod-1040-max-gcd-sum","date":"2018-03-04T14:51:10.000Z","updated":"2019-07-03T13:51:36.862Z","comments":true,"path":"api/articles/51nod-1040-max-gcd-sum.json","excerpt":"","keywords":null,"cover":null,"content":"<h1><span id=\"type欧拉函数gcd性质思维\">Type:欧拉函数,gcd性质,思维</span></h1><h1><span id=\"题目\">题目</span></h1><p>给出一个n，求1-n这n个数，同n的最大公约数的和。比如：n = 6 1,2,3,4,5,6 同6的最大公约数分别为1,2,3,2,1,6，加在一起 = 15</p>\n<h2><span id=\"input\">Input</span></h2><p>1个数N(N &lt;= 10^9)</p>\n<h2><span id=\"output\">Output</span></h2><p>公约数之和</p>\n<h2><span id=\"input示例\">Input示例</span></h2><p>6</p>\n<h2><span id=\"output示例\">Output示例</span></h2><p>15</p>\n<h2><span id=\"题解\">题解</span></h2><blockquote>\n<p>N&lt;=10^9,所以肯定无法暴力枚举 考虑我们要求 lambda(gcd(i,N) | i∈[1,N])</p>\n<blockquote>\n<p>我们可以知道: 对于每个数N,他的约数范围在[1<del>N]之间,即我们可以将问题转化为(设约数为Ni,1</del>N中约数为Ni个数为Mi):</p>\n<blockquote>\n<p>lambda(Ni*Mi)</p>\n</blockquote>\n<p>假设我们已经得到了Ni,问题就在于我们如何求出Mi 设i为1~N中任意数:</p>\n<blockquote>\n<p>(1) Mi=count(gcd(i,N)=Ni | i∈[1<del>N]) =count(gcd(i/Ni,N/Ni)=1 | i∈[1</del>N])</p>\n<blockquote>\n<p>即我们只需要求出1~N中与N/Ni互素的数的个数即可</p>\n<blockquote>\n<p>即 euler(N/Ni)</p>\n</blockquote>\n</blockquote>\n<p>(2) Mi=euler(N/Ni)</p>\n</blockquote>\n<p>ans=lambda(Ni*euler(N/Ni))</p>\n</blockquote>\n<p>然后有一个小性质,即 i*i&lt;=N时,我们枚举到sqrt(i)同时求出 N/i ,枚举完所有的 i 即枚举完所有 1~N 内 N 的约数.</p>\n</blockquote>\n<h2><span id=\"code\">Code</span></h2><pre><code>#include&lt;bits/stdc++.h&gt;\nusing namespace std;\ntypedef long long LL;\nLL N;\n\nLL euler(LL n){\n    LL res=n,a=n;\n    for(LL i=2;i*i&lt;=a;++i){\n        if(a%i==0){\n            res=res/i*(i-1);\n            while(a%i==0)a/=i;\n        }\n    }\n    if(a&gt;1)res=res/a*(a-1);\n    return res;\n}\n\nint main(){\n    while(~scanf(&quot;%lld&quot;,&amp;N)){\n        LL ans=0;\n        for(LL i=1;i*i&lt;=N;++i){\n            if(N%i==0){\n                ans+=(i*euler(N/i));\n                if(i*i!=N){\n                    ans+=((N/i)*euler(i));\n                }\n            }\n        }\n        printf(&quot;%lld\\n&quot;,ans);\n    }\n    return 0;\n}</code></pre>","text":"Type:欧拉函数,gcd性质,思维题目给出一个n，求1-n这n个数，同n的最大公约数的和。比如：n = 6 1,2,3,4,5,6 同6的最大公约数分别为1,2,3,2,1,6，加在一起 = 15Input1个数N(N &lt;= 10^9)Output公约数之和Input示例","link":"","raw":null,"photos":[],"categories":[{"name":"51nod","slug":"51nod","count":12,"path":"api/categories/51nod.json"},{"name":"思维","slug":"51nod/思维","count":1,"path":"api/categories/51nod/思维.json"},{"name":"数论","slug":"51nod/思维/数论","count":1,"path":"api/categories/51nod/思维/数论.json"},{"name":"欧拉函数","slug":"51nod/思维/数论/欧拉函数","count":1,"path":"api/categories/51nod/思维/数论/欧拉函数.json"}],"tags":[{"name":"思维","slug":"思维","count":17,"path":"api/tags/思维.json"},{"name":"数论","slug":"数论","count":28,"path":"api/tags/数论.json"},{"name":"51nod","slug":"51nod","count":12,"path":"api/tags/51nod.json"},{"name":"欧拉函数","slug":"欧拉函数","count":7,"path":"api/tags/欧拉函数.json"}]},{"title":"山东省第七届省赛","slug":"acm-icpc-7","date":"2018-03-04T02:42:24.000Z","updated":"2019-07-03T13:51:36.862Z","comments":true,"path":"api/articles/acm-icpc-7.json","excerpt":"","keywords":null,"cover":null,"content":"<h1><span id=\"a水\">A:水</span></h1><pre><code>#include&lt;bits/stdc++.h&gt;\nusing namespace std;\nint main(){\n    int T,A,B;\n    while(~scanf(&quot;%d&quot;,&amp;T)){\n        for(int i=0;i&lt;T;++i){\n            cin&gt;&gt;A&gt;&gt;B;\n            if(A%B){\n                cout&lt;&lt;(A/B)+1&lt;&lt;endl;\n            }else{\n                cout&lt;&lt;(A/B)&lt;&lt;endl;\n            }\n        }\n    }\n    return 0;\n}</code></pre><h1><span id=\"b二分或者可以暴力只有45个fb结论题用到斐波那契博弈里的一个结论任何数都可以被拆成不同斐波那契的和进而猜测直接从最大的小于n的fb往下找即可\">B:二分(或者可以暴力,只有45个FB)结论题,用到斐波那契博弈里的一个结论:任何数都可以被拆成不同斐波那契的和,进而猜测直接从最大的小于N的FB往下找即可</span></h1><h2><span id=\"我吐槽下sdut的oj尼玛109能写成109劳资找了大大大大大大半天错硬是不知道错哪里了艹\">我吐槽下SDUT的OJ…尼玛10^9能写成109,劳资找了大大大大大大半天错硬是不知道错哪里了艹</span></h2><h2><span id=\"code\">Code</span></h2><pre><code>#include&lt;bits/stdc++.h&gt;\nusing namespace std;\nconst int maxn=45;\nint Fb[maxn],M;\nint vis[maxn],has_ans;\n\nvoid init(){\n    Fb[0]=1;\n    Fb[1]=2;\n    for(int i=2;i&lt;maxn;++i){\n        Fb[i]=Fb[i-1]+Fb[i-2];\n        //printf(&quot;%d\\n&quot;,Fb[i]);\n    }\n\n}\n\nvoid solve(int N){\n    stack&lt;int&gt; ans;\n    int mx=maxn;\n    while(N!=0){\n        int ind=lower_bound(Fb,Fb+mx,N)-Fb;\n        if(Fb[ind]&gt;N)ind-=1;\n        N=N-Fb[ind];\n        ans.push(Fb[ind]);\n    }\n    printf(&quot;%d=&quot;,M);\n    int t=0;\n    while(!ans.empty()){\n        if(!t){\n            printf(&quot;%d&quot;,ans.top());t++;\n        }else printf(&quot;+%d&quot;,ans.top());\n        ans.pop();\n    }\n    printf(&quot;\\n&quot;);\n}\n\nint main(){\n    init();\n    int T;\n    scanf(&quot;%d&quot;,&amp;T);\n    while(T--){\n        memset(vis,0,sizeof(vis));\n        has_ans=0;\n        scanf(&quot;%d&quot;,&amp;M);\n        solve(M);\n    }\n    return 0;\n}\n\n/***************************************************\nUser name: 奥术大师大所大\nResult: Accepted\nTake time: 40ms\nTake Memory: 196KB\nSubmit time: 2018-03-04 13:39:50\n****************************************************/</code></pre><h1><span id=\"e简单枚举\">E:简单枚举</span></h1><pre><code>#include&lt;bits/stdc++.h&gt;\nusing namespace std;\nconst int maxn=110;\n\nint T,N,M;\nchar mp[maxn][maxn];\nint dist[4][2]={ {1,0},{-1,0},{0,-1},{0,1}};\n\nbool check(int x,int y){\n    if(x&lt;1 || x&gt;M || y&lt;1 || y&gt;N) return false;\n    return true;\n}\n\nint main(){\n    scanf(&quot;%d&quot;,&amp;T);\n    while(T--){\n        int ans=0;\n        scanf(&quot;%d%d&quot;,&amp;M,&amp;N);\n        for(int i=1;i&lt;=M;++i){\n            scanf(&quot;%s&quot;,mp[i]+1);\n        }\n        for(int i=1;i&lt;=M;++i){\n            for(int j=1;j&lt;=N;++j){\n                if(mp[i][j]==&apos;#&apos;){\n                    for(int k=0;k&lt;4;++k){\n                        int x=i+dist[k][0],y=j+dist[k][1];\n                        if(check(x,y)){\n                            if(mp[x][y]==&apos;#&apos;)continue;\n                            int room=0;\n                            for(int kk=0;kk&lt;4;++kk){\n                                int xx=x+dist[kk][0],yy=y+dist[kk][1];\n                                if(check(xx,yy)){\n                                    if(mp[xx][yy]==&apos;#&apos;)++room;\n                                }\n                            }\n                            if(room==1)ans++;\n                        }else ++ans;\n                    }\n                }\n            }\n        }\n        printf(&quot;%d\\n&quot;,ans);\n    }\n    return 0;\n}\n\n\n/***************************************************\nUser name: 奥术大师大所大\nResult: Accepted\nTake time: 228ms\nTake Memory: 212KB\nSubmit time: 2018-03-04 14:46:06\n****************************************************/</code></pre><h1><span id=\"g找规律不像博弈抱歉会打表但是规律想不出来对不起\">G:找规律,不像博弈,抱歉,会打表,但是规律想不出来,对不起</span></h1><h2><span id=\"打表\">打表</span></h2><pre><code>#include&lt;bits/stdc++.h&gt;\nusing namespace std;\n\nint solve(int N){\n    int ans=0;\n    for(int i=1;i&lt;N;++i){\n        for(int j=i;j&lt;N-i;++j){\n            int k=N-i-j;\n            if((i^j^k)==0) ans++;\n        }\n    }\n    return ans;\n}\n\nint main(){\n    for(int i=1;i&lt;=200;++i){\n        printf(&quot;%d: %d\\n&quot;,i,solve(i)/3);\n    }\n    return 0;\n}</code></pre><h2><span id=\"找的规律知道规律了直接粘的别人代码\">找的规律,知道规律了,直接粘的别人代码</span></h2><pre><code>#include&lt;bits/stdc++.h&gt;\nusing namespace std;\nint main()\n{\n    int ans,pp;\n    int i;\n    long long int f[100];\n    f[2]=1;\n    f[1]=0;\n    f[0]=0;\n    for(i=3;i&lt;30;i++)\n        f[i]=f[i-1]*3+1;\n    long long int a;\n    int T;\n    cin&gt;&gt;T;\n    while(T--)\n    {\n        cin&gt;&gt;a;\n        ans=0;\n        if(a%2)\n        {\n            cout&lt;&lt;0&lt;&lt;endl;\n            continue;\n        }\n        while(a!=0)\n        {\n            pp=a%2;\n            if(pp)\n                ans++;\n            a/=2;\n        }\n        cout&lt;&lt;f[ans]&lt;&lt;endl;\n    }\n}</code></pre><h1><span id=\"j题目翻译-httpwwwbubukocominfodetail-1612259html-说实话完全理解题意了基本就是水题但对我不是\">J:题目翻译:  说实话,完全理解题意了基本就是水题.但对我不是.</span></h1><pre><code>#include&lt;bits/stdc++.h&gt;\nusing namespace std;\nint T;\nchar str[1000];\nint main(){\n    cin&gt;&gt;T;\n    while(T--){\n        int N,M;\n        cin&gt;&gt;N&gt;&gt;M;\n        int c=0,m=0,o=0,b=0;\n        getchar();\n        for(int i=0;i&lt;N;++i){\n            gets(str);\n            if(str[0]==&apos;C&apos;){\n                c++;\n            }else if(str[0]==&apos;M&apos;){\n                m++;\n            }else if(str[0]==&apos;O&apos;){\n                o++;\n            }else if(str[0]==&apos;B&apos;){\n                b++;\n            }\n        }\n        int ans=o*(2+(N-1)+m*2)+b*(2+m*2);\n        if(ans&gt;=M){\n            puts(&quot;Mrghllghghllghg!&quot;);\n        }else puts(&quot;Tell you a joke, the execution of Paladin.&quot;);\n    }\n    return 0;\n}</code></pre><h1><span id=\"k水\">K:水</span></h1><pre><code>#include&lt;bits/stdc++.h&gt;\nusing namespace std;\nconst int maxn=10010,maxm=5010;\nint N;\nstack&lt;char&gt; st;\nint main(){\n    while(~scanf(&quot;%d\\n&quot;,&amp;N)){\n        char qb;\n        while(N--){\n            int f=0;\n            do{\n                do{\n                    qb=getchar();\n                    if(isalpha(qb)) st.push(qb);\n                }while(qb!=&apos; &apos; &amp;&amp; qb!=&apos;\\n&apos;);\n                if(f==0)f++;\n                else printf(&quot; &quot;);\n                while(!st.empty()){\n                    printf(&quot;%c&quot;,st.top());\n                    st.pop();\n                }\n            }while(qb!=&apos;\\n&apos;);\n            printf(&quot;\\n&quot;);\n        }\n    }\n    return 0;\n}</code></pre>","text":"A:水#include&lt;bits/stdc++.h&gt;using namespace std;int main(){    int T,A,B;    while(~scanf(&quot;%d&quot;,&amp;T)){        for(int i=0;i&","link":"","raw":null,"photos":[],"categories":[{"name":"Sdut","slug":"Sdut","count":11,"path":"api/categories/Sdut.json"},{"name":"二分搜索","slug":"Sdut/二分搜索","count":1,"path":"api/categories/Sdut/二分搜索.json"},{"name":"博弈论","slug":"Sdut/二分搜索/博弈论","count":1,"path":"api/categories/Sdut/二分搜索/博弈论.json"},{"name":"第七届ACM山东省赛","slug":"Sdut/二分搜索/博弈论/第七届ACM山东省赛","count":1,"path":"api/categories/Sdut/二分搜索/博弈论/第七届ACM山东省赛.json"}],"tags":[{"name":"博弈论","slug":"博弈论","count":9,"path":"api/tags/博弈论.json"},{"name":"sdut","slug":"sdut","count":11,"path":"api/tags/sdut.json"},{"name":"二分搜索","slug":"二分搜索","count":3,"path":"api/tags/二分搜索.json"},{"name":"第七届ACM山东省赛","slug":"第七届ACM山东省赛","count":4,"path":"api/tags/第七届ACM山东省赛.json"}]},{"title":"2018年全国多校算法寒假训练营练习比赛（第五场） C KMP-Next数组","slug":"5-c-kmp","date":"2018-02-27T12:23:59.000Z","updated":"2019-07-03T13:51:36.862Z","comments":true,"path":"api/articles/5-c-kmp.json","excerpt":"","keywords":null,"cover":null,"content":"<p>[toc]</p>\n<blockquote>\n<p>Next数组</p>\n</blockquote>\n<h1><span id=\"自己写的卡在9500的代码\">自己写的卡在%95.00的代码</span></h1><p>我自己写的代码,至今想不通漏了什么情况,被卡在%95.00…</p>\n<pre><code>#include&lt;bits/stdc++.h&gt;\nusing namespace std;\nconst int maxn=1001000;\nint Next[maxn],len;\nchar str[maxn];\n\nmap&lt;int,int&gt; ex;\n\nvoid getNext(){\n    Next[0]=-1;\n    int k=-1;\n    int j=0;\n    while(j&lt;len){\n        if(k==-1 || str[j]==str[k]) Next[++j]=++k;\n        else k=Next[k];\n    }\n}\n\nvoid print(){\n    for(int i=1;i&lt;=len;++i){\n        printf(&quot;%d &quot;,Next[i]);\n    }\n}\n\nvoid solve(){\n    ex.clear();\n    getNext();\n    //print();\n    int bef=Next[len],now,max_len=0;\n    if(bef==0){\n        printf(&quot;Just a legend\\n&quot;);\n        return;\n    }\n    while(bef!=0){\n        now=bef;\n        bef=Next[bef];\n    }\n\n    for(int i=1;i&lt;=len;++i){\n        if(Next[i] &amp;&amp; Next[i]%now==0){\n            int k=Next[i]/now;\n            for(int j=1;j&lt;=k;++j){\n                ex[j*now]++;\n            }\n        }\n    }\n    map&lt;int,int&gt;::iterator it;\n    for(it=ex.begin();it!=ex.end();it++){\n        if(it-&gt;second&gt;1) max_len=max(max_len,it-&gt;first);\n    }\n    if(max_len){\n        max_len=min(max_len,Next[len]);\n        for(int i=0;i&lt;max_len;++i){\n            printf(&quot;%c&quot;,str[i]);\n        }\n    }else printf(&quot;Just a legend&quot;);\n    printf(&quot;\\n&quot;);\n}\n\nint main(){\n    while(cin&gt;&gt;str){\n        len=strlen(str);\n        solve();\n    }\n    return 0;\n}</code></pre><h1><span id=\"ac代码\">AC代码</span></h1><blockquote>\n<p>AC代码</p>\n</blockquote>\n<pre><code>#include&lt;bits/stdc++.h&gt;\nusing namespace std;\nconst int maxn=1001000;\nint Next[maxn],len;\nchar str[maxn];\n\nint exist[maxn];\n\nvoid getNext(){\n    Next[0]=-1;\n    int k=-1;\n    int j=0;\n    while(j&lt;len){\n        if(k==-1 || str[j]==str[k]) Next[++j]=++k;\n        else k=Next[k];\n    }\n}\n\nvoid solve(){\n    memset(exist,0,sizeof(exist));\n    getNext();\n    int bef=Next[len];\n    if(bef==0){\n        printf(&quot;Just a legend\\n&quot;);\n        return;\n    }\n    //忽略第一个和最后一个\n    for(int i=2;i&lt;len;++i){\n        exist[Next[i]]++;\n    }\n\n    while(bef&gt;0){\n        if(exist[bef]){\n            for(int i=0;i&lt;bef;++i){\n                printf(&quot;%c&quot;,str[i]);\n            }\n            printf(&quot;\\n&quot;);\n            return;\n        }\n        bef=Next[bef];\n    }\n    printf(&quot;Just a legend\\n&quot;);\n}\n\nint main(){\n    while(cin&gt;&gt;str){\n        len=strlen(str);\n        solve();\n    }\n    return 0;\n}</code></pre><h1><span id=\"当然还有一种方法是比较特别的比较直观把每个可能子串kmp一下如果匹配成功了就直接输出就好了\">当然,还有一种方法是比较特别的(比较直观),把每个可能子串KMP一下,如果匹配成功了,就直接输出就好了</span></h1><pre><code>#include&lt;cstdio&gt;\n#include&lt;cstring&gt;\nchar a[1000005],b[1000005];\nint next[1000006];\nvoid getnext(char *c)\n{\n    next[0]=next[1]=0;\n    int i,j,len=strlen(c);\n    for(i=1,j=0;i&lt;len;i++)\n    {\n        while(c[i]!=c[j]&amp;&amp;j!=0)\n            j=next[j];\n        if(c[i]==c[j])j++;\n        next[i+1]=j;\n    }\n}\nint kmp(char *o,char *f)\n{\n    int cont=0;\n    int i,j,len1=strlen(o),len2=strlen(f);\n    for(i=0,j=0;i&lt;len1;i++)\n    {\n        while(o[i]!=f[j]&amp;&amp;j!=0)\n            j=next[j];\n        if(o[i]==f[j])j++;\n        if(j==len2)\n        {\n            cont++;\n            j=next[j];\n        }\n    }\n    return cont;\n}\nint main()\n{\n    int i;\n    scanf(&quot;%s&quot;,a);\n    getnext(a);\n    int len=next[strlen(a)];\n    if(len==0)\n    {\n        printf(&quot;Just a legend\\n&quot;);\n        return 0;\n    }\n    for(i=0;i&lt;len;i++)\n        b[i]=a[i];\n    b[i]=&apos;\\0&apos;;\n    int cont=kmp(a,b);\n    while(cont&lt;3)\n    {\n        len=next[len];\n        if(len==0)break;\n        for(i=0;i&lt;len;i++)\n            b[i]=a[i];\n        b[i]=&apos;\\0&apos;;\n        cont=kmp(a,b);\n    }\n    if(cont&gt;=3&amp;&amp;len)printf(&quot;%s\\n&quot;,b);\n    else printf(&quot;Just a legend\\n&quot;);\n    return 0;\n}</code></pre><p>1<br>=</p>\n<p>2<br>=</p>\n","text":"[toc]Next数组自己写的卡在%95.00的代码我自己写的代码,至今想不通漏了什么情况,被卡在%95.00…#include&lt;bits/stdc++.h&gt;using namespace std;const int maxn=1001000;int Next[max","link":"","raw":null,"photos":[],"categories":[{"name":"KMP","slug":"KMP","count":2,"path":"api/categories/KMP.json"},{"name":"字符串处理","slug":"KMP/字符串处理","count":1,"path":"api/categories/KMP/字符串处理.json"},{"name":"牛客练习赛","slug":"KMP/字符串处理/牛客练习赛","count":1,"path":"api/categories/KMP/字符串处理/牛客练习赛.json"}],"tags":[{"name":"牛客练习赛","slug":"牛客练习赛","count":10,"path":"api/tags/牛客练习赛.json"},{"name":"KMP","slug":"KMP","count":3,"path":"api/tags/KMP.json"},{"name":"字符串处理","slug":"字符串处理","count":7,"path":"api/tags/字符串处理.json"}]}]}