{"total":370,"pageSize":10,"pageCount":37,"data":[{"title":"基础概念、项目结构和配置","slug":"spring","date":"2019-01-18T11:03:03.000Z","updated":"2019-07-03T13:51:36.863Z","comments":true,"path":"api/articles/spring.json","excerpt":"","keywords":null,"cover":"http://be-sunshine.cn/wp-content/uploads/2019/01/%E6%8D%95%E8%8E%B72.png","content":"<h1 id=\"1-实现简单三层架构单体应用-登入\"><a href=\"#1-实现简单三层架构单体应用-登入\" class=\"headerlink\" title=\"1 - 实现简单三层架构单体应用(登入)\"></a>1 - 实现简单三层架构单体应用(登入)</h1><h2 id=\"项目架构\"><a href=\"#项目架构\" class=\"headerlink\" title=\"项目架构\"></a>项目架构</h2><p><img src=\"http://be-sunshine.cn/wp-content/uploads/2019/01/%E6%8D%95%E8%8E%B72.png\" alt></p>\n<h2 id=\"注意\"><a href=\"#注意\" class=\"headerlink\" title=\"注意\"></a>注意</h2><blockquote>\n<p>不使用新建项目,而采用单独新建文件夹架构项目的方式.</p>\n</blockquote>\n<ol>\n<li>Mark Directory <code>src/main/java</code> as Sources Root</li>\n<li>Mark Directory <code>src/main/resources</code> as Resources Root</li>\n<li>将webapp设置为web目录</li>\n</ol>\n<h2 id=\"宏观流程\"><a href=\"#宏观流程\" class=\"headerlink\" title=\"宏观流程\"></a>宏观流程</h2><blockquote>\n<p>即不深入运行过程,仅从简单逻辑层面来判断.</p>\n</blockquote>\n<p>document.write(“graph TD\\nA[客户端请求] –&gt;|请求到达| B(Controller中 Get/Post处理方法)\\nB –&gt; C(ServiceImpl - extends Service)\\nC –&gt; D(DaoImpl - extends Dao)\\nD –&gt; E(Model实体)\\n”);</p>\n<h2 id=\"xml配置以及基本框架\"><a href=\"#xml配置以及基本框架\" class=\"headerlink\" title=\"xml配置以及基本框架\"></a>xml配置以及基本框架</h2><blockquote>\n<p>对于servlet的配置</p>\n<blockquote>\n<p>WEB-INF下web.xml -&gt; 将Controller映射到某一个Uri上</p>\n</blockquote>\n<p>pom.xml</p>\n<blockquote>\n<p>Maven配置依赖项</p>\n</blockquote>\n<p>spring-context.xml</p>\n<blockquote>\n<p>控制反转,将bean交给SpringIoC容器</p>\n</blockquote>\n</blockquote>\n<h3 id=\"web-xml\"><a href=\"#web-xml\" class=\"headerlink\" title=\"web.xml\"></a>web.xml</h3><pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;\n&lt;web-app xmlns=&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;\n         xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;\n         xsi:schemaLocation=&quot;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd&quot;\n         version=&quot;4.0&quot;&gt;\n&lt;/web-app&gt;</code></pre><h3 id=\"pom-xml\"><a href=\"#pom-xml\" class=\"headerlink\" title=\"pom.xml\"></a>pom.xml</h3><pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;\n&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot;\n         xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;\n         xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;\n    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;\n\n    &lt;groupId&gt;com.funtl&lt;/groupId&gt;\n    &lt;artifactId&gt;spring-demo&lt;/artifactId&gt;\n    &lt;version&gt;1.0.0-SNAPSHOT&lt;/version&gt;\n    &lt;packaging&gt;war&lt;/packaging&gt;\n\n    &lt;dependencies&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.springframework&lt;/groupId&gt;\n            &lt;artifactId&gt;spring-context&lt;/artifactId&gt;\n            &lt;version&gt;4.3.17.RELEASE&lt;/version&gt;\n        &lt;/dependency&gt;\n\n        &lt;dependency&gt;\n            &lt;groupId&gt;junit&lt;/groupId&gt;\n            &lt;artifactId&gt;junit&lt;/artifactId&gt;\n            &lt;version&gt;4.12&lt;/version&gt;\n        &lt;/dependency&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;javax.servlet&lt;/groupId&gt;\n            &lt;artifactId&gt;javax.servlet-api&lt;/artifactId&gt;\n            &lt;version&gt;4.0.1&lt;/version&gt;\n        &lt;/dependency&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.slf4j&lt;/groupId&gt;\n            &lt;artifactId&gt;log4j-over-slf4j&lt;/artifactId&gt;\n            &lt;version&gt;1.7.25&lt;/version&gt;\n        &lt;/dependency&gt;\n    &lt;/dependencies&gt;\n&lt;/project&gt;</code></pre><h3 id=\"spring-context-xml\"><a href=\"#spring-context-xml\" class=\"headerlink\" title=\"spring-context.xml\"></a>spring-context.xml</h3><pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;\n&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;\n       xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;\n       xsi:schemaLocation=&quot;\n       http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;&gt;\n\n&lt;/beans&gt;</code></pre><h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><p><a href=\"https://github.com/834930269/Spring_demo/tree/master/demo/login-demo\" target=\"_blank\" rel=\"noopener\">https://github.com/834930269/Spring_demo/tree/master/demo/login-demo</a></p>\n<hr>\n<h1 id=\"2-理解依赖注入和控制反转\"><a href=\"#2-理解依赖注入和控制反转\" class=\"headerlink\" title=\"2 - 理解依赖注入和控制反转\"></a>2 - 理解依赖注入和控制反转</h1><h2 id=\"项目结构\"><a href=\"#项目结构\" class=\"headerlink\" title=\"项目结构\"></a>项目结构</h2><p><img src=\"http://be-sunshine.cn/wp-content/uploads/2019/01/SPRING-DEMO.png\" alt> Tip: 如果文件名显示,而没有任何错误，大抵是开了版本控制,比如Git.在.idea的vcs.xml文件中将git删掉即可</p>\n<h2 id=\"依赖注入\"><a href=\"#依赖注入\" class=\"headerlink\" title=\"依赖注入\"></a>依赖注入</h2><h3 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h3><p>DI: Dependency injection From Spring实战(第四版) P5</p>\n<blockquote>\n<p>背景: 任何一个实际意义的应用,都会由两个或者更多的类组成.这些类相互协作形成应用.</p>\n<blockquote>\n<p>这样子导致的直接结果是耦合度过高.</p>\n</blockquote>\n<p>DI: 为了解决这一问题,Spring提供了依赖注入这一解决方案.</p>\n</blockquote>\n<h3 id=\"什么叫依赖注入\"><a href=\"#什么叫依赖注入\" class=\"headerlink\" title=\"什么叫依赖注入?\"></a>什么叫依赖注入?</h3><p>举个栗子: 我们想要实现骑士探险这一类,可以自由的为骑士选择探险任务. Knight.java</p>\n<pre><code>package DI;\n\npublic interface Knights {\n    public void embarkOnQuest();\n}</code></pre><p>探险任务</p>\n<pre><code>package DI;\n\npublic class RescueDamselQuest {\n    public void embark(){\n        System.out.println(&quot;已接收&quot;);\n    }\n}</code></pre><p>骑士接受任务</p>\n<pre><code>package DI;\n\npublic class DamselRescuingKnight implements Knights {\n    private RescueDamselQuest quest;\n\n    public DamselRescuingKnight() {\n        quest=new RescueDamselQuest();\n    }\n\n    @Override\n    public void embarkOnQuest() {\n        quest.embark();\n    }\n}</code></pre><p>我们会发现这样写代码使得探险和骑士的耦合度达到了密不可分的地步,写一个探险就要新建一个结合类. 改进措施,提出了依赖注入:</p>\n<blockquote>\n<p>构造器注入</p>\n<blockquote>\n<p>这个比较简单,即将探险类作为构造参数传递进来,但这样依然没有达到代码层面的解耦.</p>\n</blockquote>\n</blockquote>\n<pre><code>public class DamselRescuingKnight implements Knights {\n    private RescueDamselQuest quest;\n\n    public DamselRescuingKnight(Quest quest) {\n        this.quest=quest;\n    }\n\n    @Override\n    public void embarkOnQuest() {\n        quest.embark();\n    }\n}</code></pre><blockquote>\n<p>mock注入</p>\n<blockquote>\n<p>和Spring的依赖注入很像.</p>\n</blockquote>\n</blockquote>\n<h3 id=\"Spring的依赖注入\"><a href=\"#Spring的依赖注入\" class=\"headerlink\" title=\"Spring的依赖注入\"></a>Spring的依赖注入</h3><blockquote>\n<p>接上本小节一开始的那张项目结构图.</p>\n</blockquote>\n<p>Spring是这样做的.你将需要解耦的类交给Spring的容器去保管,需要使用时直接从Spring中取出来即可,而不需要有任何new出来的类.</p>\n<blockquote>\n<p>比如Service,Bean等,都可以交给Spring保管.</p>\n</blockquote>\n<p>举个栗子: UserService.java(接口)</p>\n<pre><code>package com.funtl.spring.service;\n\npublic interface UserService {\n    public void sayhi();\n}</code></pre><p>UserServiceImpl.java</p>\n<pre><code>package com.funtl.spring.service.impl;\n\nimport com.funtl.spring.service.UserService;\n\npublic class UserServiceImpl implements UserService {\n    public void sayhi() {\n        System.out.println(&quot;hello&quot;);\n    }\n}</code></pre><p>resources/spring-context.xml</p>\n<pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;\n&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;\n       xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;\n       xsi:schemaLocation=&quot;\n       http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;&gt;\n\n    &lt;bean id=&quot;userService&quot; class=&quot;com.funtl.spring.service.impl.UserServiceImpl&quot; /&gt;\n&lt;/beans&gt;</code></pre><p>OK,前序工作做完了,我们在运行时就已经将这个类托管给了Spring容器. 那么我们该如何取出来呢? MyTest.java</p>\n<pre><code>package com.funtl.spring;\n\nimport com.funtl.spring.service.UserService;\nimport com.funtl.spring.service.impl.UserServiceImpl;\nimport org.springframework.context.ApplicationContext;\nimport org.springframework.context.support.ClassPathXmlApplicationContext;\n\npublic class MyTest {\n    public static void main(String[] args){\n        //获取Spring容器\n        ApplicationContext applicationContext=new ClassPathXmlApplicationContext(&quot;spring-context.xml&quot;);\n\n        //从Spring容器中获取对象\n        UserService userService= (UserService) applicationContext.getBean(&quot;userService&quot;);\n        userService.sayhi();\n\n    }\n}</code></pre><p>我们可以看到,上面的代码并没有new一个Service,而是从Spring上下文中取出了userService这个对象. 仔细想想,这样是不是就类似于调用静态的工具类那样轻松了呢?</p>\n<blockquote>\n<p>依赖注入的魅力就在于此.</p>\n<blockquote>\n<p>而将类的加载交给容器时,这个容器的模式就叫做 IoC(控制反转)</p>\n</blockquote>\n</blockquote>\n<h1 id=\"最终架构\"><a href=\"#最终架构\" class=\"headerlink\" title=\"最终架构\"></a>最终架构</h1><p><img src=\"http://be-sunshine.cn/wp-content/uploads/2019/01/%E6%8D%95%E8%8E%B73.png\" alt></p>\n","text":"1 - 实现简单三层架构单体应用(登入)项目架构 [Figure] ","link":"","raw":null,"photos":[],"categories":[{"name":"Spring","slug":"Spring","count":4,"path":"api/categories/Spring.json"},{"name":"随笔","slug":"Spring/随笔","count":1,"path":"api/categories/Spring/随笔.json"}],"tags":[{"name":"Spring","slug":"Spring","count":6,"path":"api/tags/Spring.json"}]},{"title":"MyBatis - 数据持久化","slug":"mybatis","date":"2019-01-18T03:38:26.000Z","updated":"2019-07-03T13:51:36.863Z","comments":true,"path":"api/articles/mybatis.json","excerpt":"","keywords":null,"cover":"http://be-sunshine.cn/wp-content/uploads/2019/01/Lusifer2018061304510002.png","content":"<h1 id=\"学习网站\"><a href=\"#学习网站\" class=\"headerlink\" title=\"学习网站\"></a>学习网站</h1><blockquote>\n<p><a href=\"http://www.funtl.com/zh/mybatis/\" title=\"广州前锋\" target=\"_blank\" rel=\"noopener\">广州前锋</a></p>\n</blockquote>\n<h1 id=\"脏读-脏写\"><a href=\"#脏读-脏写\" class=\"headerlink\" title=\"脏读,脏写\"></a>脏读,脏写</h1><blockquote>\n<p>把之前本该不存在的值读,写入数据库</p>\n</blockquote>\n<h1 id=\"MyBatis\"><a href=\"#MyBatis\" class=\"headerlink\" title=\"MyBatis\"></a>MyBatis</h1><blockquote>\n<p>将数据库与应用解耦的中间件. <img src=\"http://be-sunshine.cn/wp-content/uploads/2019/01/Lusifer2018061304510002.png\" alt></p>\n</blockquote>\n<h1 id=\"Druid\"><a href=\"#Druid\" class=\"headerlink\" title=\"Druid\"></a>Druid</h1><blockquote>\n<p>阿里开源的一款框架,目前(?)连接池中最快.</p>\n</blockquote>\n<h1 id=\"先放上一组示例\"><a href=\"#先放上一组示例\" class=\"headerlink\" title=\"先放上一组示例\"></a>先放上一组示例</h1><h2 id=\"项目结构\"><a href=\"#项目结构\" class=\"headerlink\" title=\"项目结构\"></a>项目结构</h2><p><img src=\"http://be-sunshine.cn/wp-content/uploads/2019/01/%E6%8D%95%E8%8E%B7-1.png\" alt></p>\n<h2 id=\"1-环境\"><a href=\"#1-环境\" class=\"headerlink\" title=\"1 环境\"></a>1 环境</h2><p>Idea + maven3.3.9 + mysql5.7</p>\n<h2 id=\"2-开发过程\"><a href=\"#2-开发过程\" class=\"headerlink\" title=\"2 开发过程\"></a>2 开发过程</h2><h3 id=\"建立数据表\"><a href=\"#建立数据表\" class=\"headerlink\" title=\"建立数据表\"></a>建立数据表</h3><p>在本地mysql数据库中建立名为test的database，并建立user表：</p>\n<pre><code>CREATE DATABASE test default charset=utf8;\n\nCREATE TABLE `user` (\n  `name` varchar(64) DEFAULT NULL,\n  `age` int(11) DEFAULT NULL\n) ENGINE=InnoDB DEFAULT CHARSET=utf8;\n\ninsert  into `user`(`name`,`age`) values (&apos;叶莜落&apos;,27),(&apos;张三丰&apos;,128);</code></pre><h3 id=\"建立一个maven工程，POM文件如下：\"><a href=\"#建立一个maven工程，POM文件如下：\" class=\"headerlink\" title=\"建立一个maven工程，POM文件如下：\"></a>建立一个maven工程，POM文件如下：</h3><pre><code>&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;\n  &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;\n  &lt;groupId&gt;com.yeyouluo.mybatis.druid&lt;/groupId&gt;\n  &lt;artifactId&gt;mybatis-druid&lt;/artifactId&gt;\n  &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;\n\n  &lt;properties&gt;\n      &lt;myabtis.version&gt;3.4.1&lt;/myabtis.version&gt;\n  &lt;/properties&gt;\n\n  &lt;dependencies&gt;\n       &lt;dependency&gt;\n            &lt;groupId&gt;org.mybatis&lt;/groupId&gt;\n            &lt;artifactId&gt;mybatis&lt;/artifactId&gt;\n            &lt;version&gt;${myabtis.version}&lt;/version&gt;\n        &lt;/dependency&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;mysql&lt;/groupId&gt;\n            &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;\n            &lt;version&gt;5.1.30&lt;/version&gt;\n        &lt;/dependency&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;com.alibaba&lt;/groupId&gt;\n            &lt;artifactId&gt;druid&lt;/artifactId&gt;\n            &lt;version&gt;1.0.14&lt;/version&gt;\n        &lt;/dependency&gt;\n  &lt;/dependencies&gt;\n&lt;/project&gt;</code></pre><h3 id=\"配置文件\"><a href=\"#配置文件\" class=\"headerlink\" title=\"配置文件\"></a>配置文件</h3><p>①db.properties</p>\n<pre><code>driver=com.mysql.jdbc.Driver\nurl=jdbc:mysql://localhost:3306/test\nusername=root\npassword=root</code></pre><p>②mybatis-config.xml</p>\n<pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;\n&lt;!DOCTYPE configuration PUBLIC &quot;-//mybatis.org//DTD Config 3.0//EN&quot;\n        &quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;&gt;\n&lt;configuration&gt;\n    &lt;!-- 引用db.properties配置文件 --&gt;\n    &lt;properties resource=&quot;db.properties&quot; /&gt;\n\n    &lt;typeAliases&gt;\n        &lt;typeAlias type=&quot;com.yeyouluo.mybatis.druid.utils.DruidDataSourceFactory&quot;\n            alias=&quot;DRUID&quot; /&gt;\n    &lt;/typeAliases&gt;\n\n    &lt;!-- development : 开发模式 work : 工作模式 --&gt;\n    &lt;environments default=&quot;work&quot;&gt;\n        &lt;environment id=&quot;work&quot;&gt;\n            &lt;transactionManager type=&quot;JDBC&quot; /&gt;\n            &lt;!-- 配置数据库连接信息 --&gt;\n            &lt;dataSource type=&quot;DRUID&quot;&gt;\n                &lt;!-- value属性值引用db.properties配置文件中配置的值 --&gt;\n                &lt;property name=&quot;driver&quot; value=&quot;${driver}&quot; /&gt;\n                &lt;property name=&quot;url&quot; value=&quot;${url}&quot; /&gt;\n                &lt;property name=&quot;username&quot; value=&quot;${username}&quot; /&gt;\n                &lt;property name=&quot;password&quot; value=&quot;${password}&quot; /&gt;\n            &lt;/dataSource&gt;\n        &lt;/environment&gt;\n    &lt;/environments&gt;\n\n    &lt;!-- mybatis的mapper文件，每个xml配置文件对应一个接口 --&gt;\n    &lt;mappers&gt;\n        &lt;mapper resource=&quot;mapper/userMapper.xml&quot; /&gt;\n    &lt;/mappers&gt;\n&lt;/configuration&gt;</code></pre><p>③在resources目录下建立userMapper.xml</p>\n<pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;  \n&lt;!DOCTYPE mapper PUBLIC &quot;-//ibatis.apache.org//DTD Mapper 3.0//EN&quot;      \n &quot;http://ibatis.apache.org/dtd/ibatis-3-mapper.dtd&quot;&gt;\n&lt;mapper namespace=&quot;com.yeyouluo.mybatis.druid.dao.userDao&quot;&gt;\n    &lt;select id=&quot;findAllUsers&quot; resultType=&quot;com.yeyouluo.mybatis.druid.pojo.User&quot;&gt;\n        select * from user\n    &lt;/select&gt;\n&lt;/mapper&gt;</code></pre><h3 id=\"实体类-User\"><a href=\"#实体类-User\" class=\"headerlink\" title=\"实体类 User\"></a>实体类 User</h3><pre><code>package com.yeyouluo.mybatis.druid.pojo;\n\npublic class User {\n\n    private String name;\n    private int age;\n\n    public String getName() {\n        return name;\n    }\n\n    public void setName(String name) {\n        this.name = name;\n    }\n\n    public int getAge() {\n        return age;\n    }\n\n    public void setAge(int age) {\n        this.age = age;\n    }\n\n    @Override\n    public String toString() {\n        return &quot;User [name=&quot; + name + &quot;, age=&quot; + age + &quot;]&quot;;\n    }\n\n}</code></pre><h3 id=\"工具类\"><a href=\"#工具类\" class=\"headerlink\" title=\"工具类\"></a>工具类</h3><p>①DruidDataSourceFactory.java</p>\n<pre><code>package com.yeyouluo.mybatis.druid.utils;\n\nimport java.sql.SQLException;\nimport java.util.Properties;\nimport javax.sql.DataSource;\nimport org.apache.ibatis.datasource.DataSourceFactory;\nimport com.alibaba.druid.pool.DruidDataSource;\n\npublic class DruidDataSourceFactory implements DataSourceFactory {\n    private Properties props;\n\n    @Override\n    public DataSource getDataSource() {\n        DruidDataSource dds = new DruidDataSource();\n        dds.setDriverClassName(this.props.getProperty(&quot;driver&quot;));\n        dds.setUrl(this.props.getProperty(&quot;url&quot;));\n        dds.setUsername(this.props.getProperty(&quot;username&quot;));\n        dds.setPassword(this.props.getProperty(&quot;password&quot;));\n        // 其他配置可以根据MyBatis主配置文件进行配置\n        try {\n            dds.init();\n        } catch (SQLException e) {\n            e.printStackTrace();\n        }\n        return dds;\n    }\n\n    @Override\n    public void setProperties(Properties props) {\n        this.props = props;\n    }\n}</code></pre><p>②MyBatisUtil.java</p>\n<pre><code>package com.yeyouluo.mybatis.druid.utils;\n\nimport java.io.InputStream;\n\nimport org.apache.ibatis.io.Resources;\nimport org.apache.ibatis.session.SqlSession;\nimport org.apache.ibatis.session.SqlSessionFactory;\nimport org.apache.ibatis.session.SqlSessionFactoryBuilder;\n\npublic class MyBatisUtil {\n    private static final String configFile = &quot;mybatis-config.xml&quot;;\n\n    /**\n     * 创建连接\n     */\n    public static SqlSession getSession() {\n        SqlSession session = null;\n        try {\n            InputStream is = Resources.getResourceAsStream(configFile);\n            SqlSessionFactory factory = new SqlSessionFactoryBuilder().build(is);\n            session = factory.openSession();\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n        return session;\n    }\n\n    public static void closeSession(SqlSession session) {\n        session.close();\n    }\n\n    public static void main(String[] args) {\n        SqlSession session = MyBatisUtil.getSession();\n        System.out.println(session);\n        session.close();\n    }\n}</code></pre><h3 id=\"DAO\"><a href=\"#DAO\" class=\"headerlink\" title=\"DAO\"></a>DAO</h3><p>①接口IUserDao.java</p>\n<pre><code>package com.yeyouluo.mybatis.druid.dao;\n\nimport java.util.List;\n\nimport com.yeyouluo.mybatis.druid.pojo.User;\n\npublic interface IUserDao {\n    public List&lt;User&gt; findAllUsers();\n}</code></pre><p>②实现类UserDao.java</p>\n<pre><code>package com.yeyouluo.mybatis.druid.dao.impl;\n\nimport java.util.List;\n\nimport org.apache.ibatis.session.SqlSession;\n\nimport com.yeyouluo.mybatis.druid.dao.IUserDao;\nimport com.yeyouluo.mybatis.druid.pojo.User;\nimport com.yeyouluo.mybatis.druid.utils.MyBatisUtil;\n\npublic class UserDao implements IUserDao {\n\n    private static final String namespace = &quot;com.yeyouluo.mybatis.druid.dao.userDao.&quot;;\n\n    @Override\n    public List&lt;User&gt; findAllUsers() {\n        List&lt;User&gt; users = null;\n        SqlSession session = MyBatisUtil.getSession();\n        try {\n            users = session.selectList(namespace + &quot;findAllUsers&quot;, User.class);\n            //注意：此处有陷阱，如果做了更新、插入或删除操作，必须使用：\n            //session.commit();\n        } catch (Exception e) {\n            e.printStackTrace();\n        }finally{\n            MyBatisUtil.closeSession(session);\n        }\n        return users;\n    }\n\n}</code></pre><h3 id=\"测试类UserDaoTest-java\"><a href=\"#测试类UserDaoTest-java\" class=\"headerlink\" title=\"测试类UserDaoTest.java\"></a>测试类UserDaoTest.java</h3><pre><code>package com.yeyouluo.mybatis.druid.dao.test;\n\nimport java.util.List;\n\nimport com.yeyouluo.mybatis.druid.dao.IUserDao;\nimport com.yeyouluo.mybatis.druid.dao.impl.UserDao;\nimport com.yeyouluo.mybatis.druid.pojo.User;\n\npublic class UserDaoTest {\n\n    public static void main(String[] args) {\n        // TODO Auto-generated method stub\n        IUserDao userDao = new UserDao();\n        List&lt;User&gt; users= userDao.findAllUsers();\n\n        for(User user : users){\n            System.out.println(user.toString());\n        }\n    }\n\n}</code></pre>","text":"学习网站广州前锋脏读,脏写把之前本该不存在的值读,写入数据库MyBatis将数据库与应用解耦的中间件.  [Figure] 1 环境Idea + maven3.3.9 + mysql5.72 开发过程建立数据表在本地mysql数据库中建立名为test的database，并建立us","link":"","raw":null,"photos":[],"categories":[{"name":"MyBatis","slug":"MyBatis","count":2,"path":"api/categories/MyBatis.json"}],"tags":[{"name":"MyBatis","slug":"MyBatis","count":2,"path":"api/tags/MyBatis.json"}]},{"title":"滴水穿石","slug":"constant-dripping-wears-away-a-stone","date":"2019-01-17T05:34:23.000Z","updated":"2019-07-03T13:51:36.863Z","comments":true,"path":"api/articles/constant-dripping-wears-away-a-stone.json","excerpt":"","keywords":null,"cover":null,"content":"<h3 id=\"Constant-dripping-wears-away-a-stone\"><a href=\"#Constant-dripping-wears-away-a-stone\" class=\"headerlink\" title=\"Constant dripping wears away a stone.\"></a><strong>Constant dripping wears away a stone.</strong></h3><blockquote>\n<p>有一些最好的选择是放在眼前.</p>\n<blockquote>\n<p>既然想要追随自己的欲望.</p>\n<blockquote>\n<p>那就让它一直存在,永远不消失.</p>\n</blockquote>\n<p>就像这样.</p>\n</blockquote>\n<p>始终爱着一切.</p>\n</blockquote>\n","text":"Constant dripping wears away a stone.有一些最好的选择是放在眼前.既然想要追随自己的欲望.那就让它一直存在,永远不消失.就像这样.始终爱着一切.","link":"","raw":null,"photos":[],"categories":[{"name":"随笔","slug":"随笔","count":28,"path":"api/categories/随笔.json"}],"tags":[]},{"title":"Java虚拟机","slug":"java-jvm","date":"2019-01-15T07:30:52.000Z","updated":"2019-07-03T13:51:36.863Z","comments":true,"path":"api/articles/java-jvm.json","excerpt":"","keywords":null,"cover":"http://be-sunshine.cn/wp-content/uploads/2019/01/727331339920439686.jpg","content":"<h1 id=\"JDK与JRE和JVM关系\"><a href=\"#JDK与JRE和JVM关系\" class=\"headerlink\" title=\"JDK与JRE和JVM关系\"></a>JDK与JRE和JVM关系</h1><blockquote>\n<p>如图</p>\n</blockquote>\n<p><img src=\"http://be-sunshine.cn/wp-content/uploads/2019/01/727331339920439686.jpg\" alt></p>\n","text":"JDK与JRE和JVM关系如图 [Figure] ","link":"","raw":null,"photos":[],"categories":[{"name":"Java虚拟机","slug":"Java虚拟机","count":1,"path":"api/categories/Java虚拟机.json"}],"tags":[{"name":"Java虚拟机","slug":"Java虚拟机","count":1,"path":"api/tags/Java虚拟机.json"}]},{"title":"近期在更","slug":"updating","date":"2019-01-15T04:09:32.000Z","updated":"2019-07-03T13:51:36.863Z","comments":true,"path":"api/articles/updating.json","excerpt":"","keywords":null,"cover":null,"content":"<blockquote>\n<p>最后更新于 <code>2019/2/12</code></p>\n<blockquote>\n<p>本贴记录的是2019/1 以后所发的贴的整合</p>\n</blockquote>\n</blockquote>\n<h1 id=\"闲时杂兴\"><a href=\"#闲时杂兴\" class=\"headerlink\" title=\"闲时杂兴\"></a>闲时杂兴</h1><hr>\n<h2 id=\"《Gamemaker-studio-2-系列开坑》\"><a href=\"#《Gamemaker-studio-2-系列开坑》\" class=\"headerlink\" title=\"《Gamemaker studio 2 系列开坑》\"></a>《Gamemaker studio 2 系列开坑》</h2><p>:cyclone:<a href=\"http://be-sunshine.cn/index.php/2019/01/12/gamemaker-studio-2/\" target=\"_blank\" rel=\"noopener\">http://be-sunshine.cn/index.php/2019/01/12/gamemaker-studio-2/</a></p>\n<h2 id=\"JeffE算法课程系列个人翻译\"><a href=\"#JeffE算法课程系列个人翻译\" class=\"headerlink\" title=\"JeffE算法课程系列个人翻译\"></a>JeffE算法课程系列个人翻译</h2><p>:cyclone:<a href=\"http://be-sunshine.cn/index.php/2019/04/08/jeffe-traslation/\" target=\"_blank\" rel=\"noopener\">http://be-sunshine.cn/index.php/2019/04/08/jeffe-traslation/</a></p>\n<hr>\n<h1 id=\"技术\"><a href=\"#技术\" class=\"headerlink\" title=\"技术\"></a>技术</h1><hr>\n<h2 id=\"1-神经网络-NLP实现聊天机器人\"><a href=\"#1-神经网络-NLP实现聊天机器人\" class=\"headerlink\" title=\"1 - 神经网络+NLP实现聊天机器人\"></a>1 - 神经网络+NLP实现聊天机器人</h2><h3 id=\"01-NLP与基础知识\"><a href=\"#01-NLP与基础知识\" class=\"headerlink\" title=\"01 NLP与基础知识\"></a>01 NLP与基础知识</h3><p>:cyclone:<a href=\"http://be-sunshine.cn/index.php/2019/01/01/type-2/\" target=\"_blank\" rel=\"noopener\">http://be-sunshine.cn/index.php/2019/01/01/type-2/</a></p>\n<h3 id=\"02-处理语料库\"><a href=\"#02-处理语料库\" class=\"headerlink\" title=\"02 处理语料库\"></a>02 处理语料库</h3><p>:cyclone:<a href=\"http://be-sunshine.cn/index.php/2019/01/04/type-3/\" target=\"_blank\" rel=\"noopener\">http://be-sunshine.cn/index.php/2019/01/04/type-3/</a></p>\n<h3 id=\"03-Seq2Seq\"><a href=\"#03-Seq2Seq\" class=\"headerlink\" title=\"03 Seq2Seq\"></a>03 Seq2Seq</h3><p>:cyclone:<a href=\"http://be-sunshine.cn/index.php/2019/01/06/seq2seq/\" target=\"_blank\" rel=\"noopener\">http://be-sunshine.cn/index.php/2019/01/06/seq2seq/</a></p>\n<h2 id=\"2-聊天室架构从0开始\"><a href=\"#2-聊天室架构从0开始\" class=\"headerlink\" title=\"2 - 聊天室架构从0开始\"></a>2 - 聊天室架构从0开始</h2><h3 id=\"01-TCP-amp-UDP-基础知识\"><a href=\"#01-TCP-amp-UDP-基础知识\" class=\"headerlink\" title=\"01 TCP&amp;UDP 基础知识\"></a>01 TCP&amp;UDP 基础知识</h3><p>:cyclone:<a href=\"http://be-sunshine.cn/index.php/2019/01/01/type-1/\" target=\"_blank\" rel=\"noopener\">http://be-sunshine.cn/index.php/2019/01/01/type-1/</a></p>\n<h3 id=\"02-客户端UDP请求服务端TCP端口\"><a href=\"#02-客户端UDP请求服务端TCP端口\" class=\"headerlink\" title=\"02 客户端UDP请求服务端TCP端口\"></a>02 客户端UDP请求服务端TCP端口</h3><p>:cyclone:<a href=\"http://be-sunshine.cn/index.php/2019/01/14/ty2/\" target=\"_blank\" rel=\"noopener\">http://be-sunshine.cn/index.php/2019/01/14/ty2/</a></p>\n<h2 id=\"3-Java虚拟机\"><a href=\"#3-Java虚拟机\" class=\"headerlink\" title=\"3 - Java虚拟机\"></a>3 - Java虚拟机</h2><p>:cyclone:<a href=\"http://be-sunshine.cn/wp-admin/post.php?post=2384&action=edit\" target=\"_blank\" rel=\"noopener\">http://be-sunshine.cn/wp-admin/post.php?post=2384&amp;action=edit</a></p>\n<h2 id=\"4-MyBatis\"><a href=\"#4-MyBatis\" class=\"headerlink\" title=\"4 - MyBatis\"></a>4 - MyBatis</h2><p>:cyclone:<a href=\"http://be-sunshine.cn/index.php/2019/01/18/mybatis/\" target=\"_blank\" rel=\"noopener\">http://be-sunshine.cn/index.php/2019/01/18/mybatis/</a></p>\n<h2 id=\"5-Maven\"><a href=\"#5-Maven\" class=\"headerlink\" title=\"5 - Maven\"></a>5 - Maven</h2><p>:cyclone:<a href=\"http://be-sunshine.cn/index.php/2018/06/20/maven/\" target=\"_blank\" rel=\"noopener\">http://be-sunshine.cn/index.php/2018/06/20/maven/</a></p>\n<h2 id=\"6-本地远程连接Mysql\"><a href=\"#6-本地远程连接Mysql\" class=\"headerlink\" title=\"6 - 本地远程连接Mysql\"></a>6 - 本地远程连接Mysql</h2><p>:cyclone:<a href=\"http://be-sunshine.cn/index.php/2019/01/20/linke-mysql/\" target=\"_blank\" rel=\"noopener\">http://be-sunshine.cn/index.php/2019/01/20/linke-mysql/</a></p>\n<hr>\n<h1 id=\"Spring系列\"><a href=\"#Spring系列\" class=\"headerlink\" title=\"Spring系列\"></a>Spring系列</h1><hr>\n<h2 id=\"单体应用-三层架构\"><a href=\"#单体应用-三层架构\" class=\"headerlink\" title=\"单体应用-三层架构\"></a>单体应用-三层架构</h2><p>:cyclone:<a href=\"http://be-sunshine.cn/index.php/2019/01/18/spring/\" target=\"_blank\" rel=\"noopener\">http://be-sunshine.cn/index.php/2019/01/18/spring/</a></p>\n<h2 id=\"依赖注入和控制反转\"><a href=\"#依赖注入和控制反转\" class=\"headerlink\" title=\"依赖注入和控制反转\"></a>依赖注入和控制反转</h2><p>连接也是上面那个</p>\n<h2 id=\"Bean的装配\"><a href=\"#Bean的装配\" class=\"headerlink\" title=\"Bean的装配\"></a>Bean的装配</h2><p>:cyclone:<a href=\"http://be-sunshine.cn/index.php/2019/01/25/bean/\" target=\"_blank\" rel=\"noopener\">http://be-sunshine.cn/index.php/2019/01/25/bean/</a></p>\n<h2 id=\"Maven项目间依赖\"><a href=\"#Maven项目间依赖\" class=\"headerlink\" title=\"Maven项目间依赖\"></a>Maven项目间依赖</h2><p>:cyclone:<a href=\"http://be-sunshine.cn/index.php/2019/02/02/maven-modules/\" target=\"_blank\" rel=\"noopener\">http://be-sunshine.cn/index.php/2019/02/02/maven-modules/</a></p>\n<h2 id=\"Spring-胶水框架-粘贴Druid\"><a href=\"#Spring-胶水框架-粘贴Druid\" class=\"headerlink\" title=\"Spring(胶水框架)粘贴Druid\"></a>Spring(胶水框架)粘贴Druid</h2><p>:cyclone:<a href=\"http://be-sunshine.cn/index.php/2019/02/03/spring-druid/\" target=\"_blank\" rel=\"noopener\">http://be-sunshine.cn/index.php/2019/02/03/spring-druid/</a></p>\n<h2 id=\"Spring-粘贴-Mybatis\"><a href=\"#Spring-粘贴-Mybatis\" class=\"headerlink\" title=\"Spring 粘贴 Mybatis\"></a>Spring 粘贴 Mybatis</h2><p>:cyclone:<a href=\"http://be-sunshine.cn/index.php/2019/02/04/spring-cohesive-mybatis/\" target=\"_blank\" rel=\"noopener\">http://be-sunshine.cn/index.php/2019/02/04/spring-cohesive-mybatis/</a></p>\n<h2 id=\"拦截器-AOP\"><a href=\"#拦截器-AOP\" class=\"headerlink\" title=\"拦截器(AOP)\"></a>拦截器(AOP)</h2><p>Emmm…= =懒得写了.</p>\n<h2 id=\"ModelAttribute\"><a href=\"#ModelAttribute\" class=\"headerlink\" title=\"@ModelAttribute\"></a>@ModelAttribute</h2><p>:cyclone:<a href=\"http://be-sunshine.cn/index.php/2019/02/05/spring-annotation-modelattribute/\" target=\"_blank\" rel=\"noopener\">http://be-sunshine.cn/index.php/2019/02/05/spring-annotation-modelattribute/</a></p>\n<h2 id=\"热部署\"><a href=\"#热部署\" class=\"headerlink\" title=\"热部署\"></a>热部署</h2><p>:cyclone:<a href=\"http://be-sunshine.cn/index.php/2019/02/05/asdasdas/\" target=\"_blank\" rel=\"noopener\">http://be-sunshine.cn/index.php/2019/02/05/asdasdas/</a></p>\n<h2 id=\"Spring-Validation\"><a href=\"#Spring-Validation\" class=\"headerlink\" title=\"Spring Validation\"></a>Spring Validation</h2><p>:cyclone:<a href=\"http://be-sunshine.cn/index.php/2019/02/09/spring-validation-spring/\" target=\"_blank\" rel=\"noopener\">http://be-sunshine.cn/index.php/2019/02/09/spring-validation-spring/</a></p>\n<hr>\n<h1 id=\"闲时码题\"><a href=\"#闲时码题\" class=\"headerlink\" title=\"闲时码题\"></a>闲时码题</h1><hr>\n<h2 id=\"1-LintCode-1-11-114\"><a href=\"#1-LintCode-1-11-114\" class=\"headerlink\" title=\"1 - LintCode(1-11+114)\"></a>1 - LintCode(1-11+114)</h2><p>:cyclone:<a href=\"http://be-sunshine.cn/index.php/2018/06/17/pl2-lintcode/\" target=\"_blank\" rel=\"noopener\">http://be-sunshine.cn/index.php/2018/06/17/pl2-lintcode/</a></p>\n<h2 id=\"2-LintCode-12-22\"><a href=\"#2-LintCode-12-22\" class=\"headerlink\" title=\"2 - LintCode(12-22)\"></a>2 - LintCode(12-22)</h2><p><a href=\"http://be-sunshine.cn/index.php/2019/02/10/lintcode12-22/\" target=\"_blank\" rel=\"noopener\">http://be-sunshine.cn/index.php/2019/02/10/lintcode12-22/</a></p>\n<hr>\n<h1 id=\"整理Java-全部笔记\"><a href=\"#整理Java-全部笔记\" class=\"headerlink\" title=\"整理Java(全部笔记)\"></a>整理Java(全部笔记)</h1><hr>\n<h2 id=\"类与对象\"><a href=\"#类与对象\" class=\"headerlink\" title=\"类与对象\"></a>类与对象</h2><p>:cyclone:<a href=\"http://be-sunshine.cn/index.php/2018/01/12/java-class-object/\" target=\"_blank\" rel=\"noopener\">http://be-sunshine.cn/index.php/2018/01/12/java-class-object/</a></p>\n<p>包<br>-</p>\n<p><a href=\"http://be-sunshine.cn/index.php/2018/01/12/java-package/\" target=\"_blank\" rel=\"noopener\">http://be-sunshine.cn/index.php/2018/01/12/java-package/</a></p>\n<h2 id=\"枚举类\"><a href=\"#枚举类\" class=\"headerlink\" title=\"枚举类\"></a>枚举类</h2><p><a href=\"http://be-sunshine.cn/index.php/2018/01/12/java-enum/\" target=\"_blank\" rel=\"noopener\">http://be-sunshine.cn/index.php/2018/01/12/java-enum/</a></p>\n<h2 id=\"接口\"><a href=\"#接口\" class=\"headerlink\" title=\"接口\"></a>接口</h2><p><a href=\"http://be-sunshine.cn/index.php/2018/01/12/java-interface/\" target=\"_blank\" rel=\"noopener\">http://be-sunshine.cn/index.php/2018/01/12/java-interface/</a></p>\n<h2 id=\"默认方法\"><a href=\"#默认方法\" class=\"headerlink\" title=\"默认方法\"></a>默认方法</h2><p><a href=\"http://be-sunshine.cn/index.php/2018/01/13/java-8-default/\" target=\"_blank\" rel=\"noopener\">http://be-sunshine.cn/index.php/2018/01/13/java-8-default/</a></p>\n<h2 id=\"Throwable\"><a href=\"#Throwable\" class=\"headerlink\" title=\"Throwable\"></a>Throwable</h2><p><a href=\"http://be-sunshine.cn/index.php/2018/01/15/java-throwable/\" target=\"_blank\" rel=\"noopener\">http://be-sunshine.cn/index.php/2018/01/15/java-throwable/</a></p>\n<h2 id=\"Java-I-O\"><a href=\"#Java-I-O\" class=\"headerlink\" title=\"Java I/O\"></a>Java I/O</h2><p>:cyclone:<a href=\"http://be-sunshine.cn/index.php/2018/01/16/java-i-o/\" target=\"_blank\" rel=\"noopener\">http://be-sunshine.cn/index.php/2018/01/16/java-i-o/</a></p>\n<hr>\n<h1 id=\"设计模式\"><a href=\"#设计模式\" class=\"headerlink\" title=\"设计模式\"></a>设计模式</h1><hr>\n<h2 id=\"单例\"><a href=\"#单例\" class=\"headerlink\" title=\"单例\"></a>单例</h2><p><a href=\"http://be-sunshine.cn/index.php/2018/01/12/java-singleton/\" target=\"_blank\" rel=\"noopener\">http://be-sunshine.cn/index.php/2018/01/12/java-singleton/</a></p>\n","text":"最后更新于 2019/2/12本贴记录的是2019/1 以后所发的贴的整合闲时杂兴《Gamemaker studio 2 系列开坑》:cyclone:http://be-sunshine.cn/index.php/2019/01/12/gamemaker-studio-2/Jef","link":"","raw":null,"photos":[],"categories":[{"name":"技术","slug":"技术","count":10,"path":"api/categories/技术.json"}],"tags":[{"name":"技术","slug":"技术","count":14,"path":"api/tags/技术.json"}]},{"title":"2019/1/15","slug":"2372","date":"2019-01-15T01:21:29.000Z","updated":"2019-07-03T13:51:36.863Z","comments":true,"path":"api/articles/2372.json","excerpt":"","keywords":null,"cover":null,"content":"<blockquote>\n<p>昨天决战平安京一发免费单抽抽到了个史诗皮肤.今天狗子特写解锁，狗子超帅. :squirrel:</p>\n</blockquote>\n","text":"昨天决战平安京一发免费单抽抽到了个史诗皮肤.今天狗子特写解锁，狗子超帅. :squirrel:","link":"","raw":null,"photos":[],"categories":[{"name":"随笔","slug":"随笔","count":28,"path":"api/categories/随笔.json"}],"tags":[]},{"title":"聊天室架构从0开始 – 2 TCP+UDP 实现搜索IP与端口","slug":"ty2","date":"2019-01-14T14:17:07.000Z","updated":"2019-07-03T13:51:36.863Z","comments":true,"path":"api/articles/ty2.json","excerpt":"","keywords":null,"cover":null,"content":"<h1 id=\"Root\"><a href=\"#Root\" class=\"headerlink\" title=\"Root\"></a>Root</h1><h1 id=\"目录结构\"><a href=\"#目录结构\" class=\"headerlink\" title=\"目录结构\"></a>目录结构</h1><ul>\n<li>java<ul>\n<li>client<ul>\n<li>bean<ul>\n<li>ServerInfo.java(记录服务端所需信息model)</li>\n</ul>\n</li>\n<li>Client.java(客户端执行)</li>\n<li>ClientSearcher.java(客户端广播向服务端,并且接受服务端返回的地址)</li>\n<li>TCPClient.java(TCP连接客户端)</li>\n</ul>\n</li>\n<li>clink(工具包)<ul>\n<li>utils<ul>\n<li>ByteUtils.java</li>\n</ul>\n</li>\n<li>Clink.java</li>\n</ul>\n</li>\n<li>constants(常量)<ul>\n<li>TCPConstants.java</li>\n<li>UDPConstants.java</li>\n</ul>\n</li>\n<li>server<ul>\n<li>Server.java</li>\n<li>ServerProvider.java(服务提供者)</li>\n<li>TCPServer.java(TCP连接服务端)</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"UDP向服务端广播搜索TCP地址\"><a href=\"#UDP向服务端广播搜索TCP地址\" class=\"headerlink\" title=\"UDP向服务端广播搜索TCP地址\"></a>UDP向服务端广播搜索TCP地址</h2><blockquote>\n<p>老一套,先开启监听,再发送数据.</p>\n</blockquote>\n<h3 id=\"方式和流程和传输数据结构\"><a href=\"#方式和流程和传输数据结构\" class=\"headerlink\" title=\"方式和流程和传输数据结构\"></a>方式和流程和传输数据结构</h3><blockquote>\n<p>方式,利用UDP独有的广播向服务端request地址和端口.并通过监听的端口等待服务端的回复. 报文格式:</p>\n<blockquote>\n<p>包裹层(HEADER,用于验证) IP - String 数据 - Byte[]</p>\n</blockquote>\n<p>数据格式:</p>\n<blockquote>\n<p>HEADER(验证字段,正式的数据要跳过这一段) cmd - 命令(1为客户端发送,2为服务端回送) LISTEN_PORT - 请求服务端后回复信息时的端口号,或客户端代连接服务端的端口号 - INT</p>\n</blockquote>\n</blockquote>\n<h3 id=\"代码-IDEA-放在Github上\"><a href=\"#代码-IDEA-放在Github上\" class=\"headerlink\" title=\"代码(IDEA,放在Github上)\"></a>代码(IDEA,放在Github上)</h3><p><a href=\"https://github.com/834930269/TCP_AND_UDP/tree/master/SocketDemo-L5\" target=\"_blank\" rel=\"noopener\">https://github.com/834930269/TCP_AND_UDP/tree/master/SocketDemo-L5</a></p>\n<h2 id=\"在上一步基础上建立TCP连接\"><a href=\"#在上一步基础上建立TCP连接\" class=\"headerlink\" title=\"在上一步基础上建立TCP连接\"></a>在上一步基础上建立TCP连接</h2><h3 id=\"方式\"><a href=\"#方式\" class=\"headerlink\" title=\"方式\"></a>方式</h3><blockquote>\n<p>通过UDP获取到的服务端的IP和端口.</p>\n<blockquote>\n<p>用Socket连接之.</p>\n</blockquote>\n</blockquote>\n<h3 id=\"通过键盘流输入\"><a href=\"#通过键盘流输入\" class=\"headerlink\" title=\"通过键盘流输入\"></a>通过键盘流输入</h3><pre><code>InputStream in=System.in;\nBufferedReader input=new BufferedReader(new InputStreamReader(in));\n//键盘读取一行\nString str=input.readLine();</code></pre><h3 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h3><p><a href=\"https://github.com/834930269/TCP_AND_UDP/tree/master/SocketDemo-L5-2/SocketDemo-L5\" target=\"_blank\" rel=\"noopener\">https://github.com/834930269/TCP_AND_UDP/tree/master/SocketDemo-L5-2/SocketDemo-L5</a></p>\n<h2 id=\"完成当前目标-服务端与客户端发送与接收并行\"><a href=\"#完成当前目标-服务端与客户端发送与接收并行\" class=\"headerlink\" title=\"完成当前目标,服务端与客户端发送与接收并行\"></a>完成当前目标,服务端与客户端发送与接收并行</h2><h3 id=\"方式-1\"><a href=\"#方式-1\" class=\"headerlink\" title=\"方式\"></a>方式</h3><blockquote>\n<p>将读写分开,读继承Thread,写重写Runnable. 广播： 用一个list记录,每当有客户端连接来时,就记录下那个客户端的Socket.</p>\n<blockquote>\n<p>遍历广播即可</p>\n</blockquote>\n</blockquote>\n<h3 id=\"代码-1\"><a href=\"#代码-1\" class=\"headerlink\" title=\"代码\"></a>代码</h3><p><a href=\"https://github.com/834930269/TCP_AND_UDP/tree/master/SocketDemo-L5-3/SocketDemo-L5\" target=\"_blank\" rel=\"noopener\">https://github.com/834930269/TCP_AND_UDP/tree/master/SocketDemo-L5-3/SocketDemo-L5</a></p>\n","text":"Root目录结构javaclientbeanServerInfo.java(记录服务端所需信息model)Client.java(客户端执行)ClientSearcher.java(客户端广播向服务端,并且接受服务端返回的地址)TCPClient.java(TCP连接客户端)cl","link":"","raw":null,"photos":[],"categories":[{"name":"tcp","slug":"tcp","count":2,"path":"api/categories/tcp.json"},{"name":"网络编程","slug":"tcp/网络编程","count":2,"path":"api/categories/tcp/网络编程.json"},{"name":"随笔","slug":"tcp/网络编程/随笔","count":1,"path":"api/categories/tcp/网络编程/随笔.json"}],"tags":[{"name":"网络编程","slug":"网络编程","count":4,"path":"api/tags/网络编程.json"},{"name":"tcp","slug":"tcp","count":3,"path":"api/tags/tcp.json"}]},{"title":"Gamemaker studio 2 系列开坑","slug":"gamemaker-studio-2","date":"2019-01-12T13:52:23.000Z","updated":"2019-07-03T13:51:36.863Z","comments":true,"path":"api/articles/gamemaker-studio-2.json","excerpt":"","keywords":null,"cover":null,"content":"<blockquote>\n<p>事先说好,这个坑不是2019今年的主要任务,但因为在之前对游戏制作的一些概念已经接触了许多(比如精灵,场景,碰撞检测等等),所以接触这个的压力并不是很大. 但仅做兴趣,目前有做独立游戏的想法,也有一个比较想要呈现出来的玩法和剧情,但因为快毕业刚开始学Java没多久(大学修.Net,不想做.Net),所以目前主要任务是学Java和做课程设计..</p>\n<blockquote>\n<p>目前仅仅以插块的方式进行填坑.慢慢完善</p>\n</blockquote>\n</blockquote>\n<h1 id=\"Egret龙骨导入到GMS2中\"><a href=\"#Egret龙骨导入到GMS2中\" class=\"headerlink\" title=\"Egret龙骨导入到GMS2中\"></a>Egret龙骨导入到GMS2中</h1><h2 id=\"龙骨是什么\"><a href=\"#龙骨是什么\" class=\"headerlink\" title=\"龙骨是什么?\"></a>龙骨是什么?</h2><blockquote>\n<p>龙骨是方便制作动画的一种脚本+图片存储的制作方式. 以将精灵拆成几块+json文件存储动作作为基础来制作精灵的动作.</p>\n<blockquote>\n<p>精灵可以理解为场景中的可操作(你或电脑)物体.</p>\n</blockquote>\n</blockquote>\n<h2 id=\"注意事项\"><a href=\"#注意事项\" class=\"headerlink\" title=\"注意事项\"></a>注意事项</h2><blockquote>\n<p>1.不可以直接导入,因为Egret的记录方式与GMS不同,即需要处理json文件以后才可以导入GMS中. 2.GML中,只有用draw_self才可以绘制龙骨动画,如果用draw_sprite_ext()函数来控制形变的话,就会只显示第一帧.</p>\n</blockquote>\n<h3 id=\"软件\"><a href=\"#软件\" class=\"headerlink\" title=\"软件\"></a>软件</h3><p>龙骨软件在这里下载: <a href=\"http://dragonbones.com\" target=\"_blank\" rel=\"noopener\">http://dragonbones.com</a> 转换软件(将导出龙骨转换成GMS兼容格式)在这里下载: <a href=\"http://52gmk.com/thread-1835.htm\" target=\"_blank\" rel=\"noopener\">http://52gmk.com/thread-1835.htm</a></p>\n<h4 id=\"软件使用方法\"><a href=\"#软件使用方法\" class=\"headerlink\" title=\"软件使用方法\"></a>软件使用方法</h4><blockquote>\n<p>1.先在龙骨软件中将制作好的龙骨</p>\n<blockquote>\n<p>文件 -&gt; 导出 -&gt; 数据类型设置为Spine -&gt; 保存(完成,注意调整比例)</p>\n</blockquote>\n<p>2.将转换文件copy到龙骨json所在文件夹,执行即可. 3.打开gms在项目中新建精灵,并import转换后的json文件即可. 4.添加物体,连接精灵,加入场景,运行后即可看到运动效果</p>\n</blockquote>\n","text":"事先说好,这个坑不是2019今年的主要任务,但因为在之前对游戏制作的一些概念已经接触了许多(比如精灵,场景,碰撞检测等等),所以接触这个的压力并不是很大. 但仅做兴趣,目前有做独立游戏的想法,也有一个比较想要呈现出来的玩法和剧情,但因为快毕业刚开始学Java没多久(大学修.Net","link":"","raw":null,"photos":[],"categories":[{"name":"Gamemaker","slug":"Gamemaker","count":1,"path":"api/categories/Gamemaker.json"},{"name":"游戏制作","slug":"Gamemaker/游戏制作","count":1,"path":"api/categories/Gamemaker/游戏制作.json"}],"tags":[{"name":"Gamemaker","slug":"Gamemaker","count":1,"path":"api/tags/Gamemaker.json"},{"name":"游戏制作","slug":"游戏制作","count":4,"path":"api/tags/游戏制作.json"}]},{"title":"Emmmm...","slug":"emmmm","date":"2019-01-11T12:23:56.000Z","updated":"2019-07-03T13:51:36.863Z","comments":true,"path":"api/articles/emmmm.json","excerpt":"","keywords":null,"cover":null,"content":"<blockquote>\n<p>说一个笑话……千元机想训练聊天机器人的语料库…</p>\n</blockquote>\n","text":"说一个笑话……千元机想训练聊天机器人的语料库…","link":"","raw":null,"photos":[],"categories":[{"name":"随笔","slug":"随笔","count":28,"path":"api/categories/随笔.json"}],"tags":[]},{"title":"旁观，生活","slug":"e6-97-81-e8-a7-82-ef-bc-8c-e7-94-9f-e6-b4-bb","date":"2019-01-10T12:44:34.000Z","updated":"2019-07-03T13:51:36.863Z","comments":true,"path":"api/articles/e6-97-81-e8-a7-82-ef-bc-8c-e7-94-9f-e6-b4-bb.json","excerpt":"","keywords":null,"cover":null,"content":"<blockquote>\n<p>若能让我开心，今后所做的一切，为你罢，帮你也罢，都行. 但若我坦然处事，得不到任何，只为成就，未来，生活，那才可悲. 且若开心二字，你若安好，便是晴天.你若得到你想要的生活，便是晴天.</p>\n</blockquote>\n","text":"若能让我开心，今后所做的一切，为你罢，帮你也罢，都行. 但若我坦然处事，得不到任何，只为成就，未来，生活，那才可悲. 且若开心二字，你若安好，便是晴天.你若得到你想要的生活，便是晴天.","link":"","raw":null,"photos":[],"categories":[{"name":"未分类","slug":"未分类","count":16,"path":"api/categories/未分类.json"}],"tags":[]}]}