{"total":370,"pageSize":10,"pageCount":37,"data":[{"title":"LA 3905","slug":"la-3905","date":"2017-04-05T09:18:51.000Z","updated":"2019-07-03T13:51:36.847Z","comments":true,"path":"api/articles/la-3905.json","excerpt":"","keywords":null,"cover":null,"content":"<p><strong>【类型】</strong> <strong>区间扫描,  抽象成事件来做的区间扫描</strong> <strong>【题解】</strong> <strong>蓝书P45</strong> <strong><a href=\"http://blog.csdn.net/xl2015190026/article/details/52937814\" target=\"_blank\" rel=\"noopener\">另一个更详细的blog</a></strong> <strong>代码中难懂的部分都已经注释了.</strong> <strong>【Code】</strong></p>\n<blockquote>\n<p><strong>#include&lt;bits/stdc++.h&gt;</strong> <strong>using namespace std;</strong> <strong>//0&lt;x+a*t&lt;w</strong> <strong>//0&lt;x+a*t&lt;w,0&lt;y+b*t&lt;h,  t&gt;0</strong> <strong>//起始坐标:(x,y) 速度:(a,b)</strong> <strong>//x横坐标运动范围(0-w) y纵坐标运动范围(0-h)</strong> <strong>//题目给的公式 在时刻t坐标:p+tv=(x,y)+(t*a,t*b)</strong> <strong>//然后根据这个范围求出出现在镜框的范围内的时间区间,开区间</strong> <strong>//因为出现在镜框上不算进入射程.</strong> <strong>void update(int x,int a,int w,double &amp;L,double &amp;R){</strong> **    if(a==0){** **        if(x&lt;=0 || x&gt;=w) R=L-1;//无解,无法出现在镜框范围内** **    }else if(a&gt;0){** **        L=max(L,-(double)x/a);** **        R=min(R,(double)(w-x)/a);** **    }else{** **        L=max(L,(double)(w-x)/a);** **        R=min(R,-(double)x/a);** **    }** <strong>}</strong> <strong>const int maxn=100000+10;</strong> <strong>struct Event{</strong> **    double x;** **    int type;//状态,0为右端点,1为左端点** **    bool operator&lt;(const Event &amp;a)const{** **        return x&lt;a.x || (x==a.x &amp;&amp; type&gt;a.type);//先处理右端点** **    }** <strong>}events[maxn*2];</strong> <strong>int main(){</strong> **    int T;** **    scanf(“%d”,&amp;T);** **    while(T–){** **        int w,h,n,e=0;** **        scanf(“%d%d%d”,&amp;w,&amp;h,&amp;n);** **        for(int i=0;i&lt;n;++i){** **            int x,y,a,b;** **            scanf(“%d%d%d%d”,&amp;x,&amp;y,&amp;a,&amp;b);** **            //0&lt;x+a*t&lt;w,0&lt;y+b*t&lt;h,  t&gt;0** **            double L=0,R=1e9;//先开一个无穷大的区间** **            update(x,a,w,L,R);** **            update(y,b,h,L,R);** **            if(R&gt;L){//只把有效可进入镜框的点加入区间** **                events[e++]=(Event){L,0};** **                events[e++]=(Event){R,1};** **            }** **        }** **        //排序区间,可以画图看下.** **        sort(events,events+e);** **        int cnt=0,ans=0;** **        for(int i=0;i&lt;e;++i){** **            if(events[i].type==0)** **                cnt++,ans=max(ans,cnt);** **            else cnt–;** **        }** **        printf(“%d\\n”,ans);** **    }** **    return 0;** <strong>}</strong></p>\n</blockquote>\n","text":"【类型】 区间扫描,  抽象成事件来做的区间扫描 【题解】 蓝书P45 另一个更详细的blog 代码中难懂的部分都已经注释了. 【Code】#include&lt;bits/stdc++.h&gt; using namespace std; //0&lt;x+a*t&lt;w /","link":"","raw":null,"photos":[],"categories":[{"name":"LA","slug":"LA","count":7,"path":"api/categories/LA.json"},{"name":"事件","slug":"LA/事件","count":1,"path":"api/categories/LA/事件.json"},{"name":"区间","slug":"LA/事件/区间","count":1,"path":"api/categories/LA/事件/区间.json"}],"tags":[{"name":"LA","slug":"LA","count":8,"path":"api/tags/LA.json"},{"name":"事件","slug":"事件","count":1,"path":"api/tags/事件.json"},{"name":"区间","slug":"区间","count":1,"path":"api/tags/区间.json"}]},{"title":"UVa 11549","slug":"uva-11549","date":"2017-04-05T05:00:42.000Z","updated":"2019-07-03T13:51:36.847Z","comments":true,"path":"api/articles/uva-11549.json","excerpt":"","keywords":null,"cover":null,"content":"<p><strong>【题解】</strong> <strong>Floyd判圈法</strong> <strong>【Code】</strong></p>\n<blockquote>\n<p><strong>#include&lt;bits/stdc++.h&gt;</strong> <strong>using namespace std;</strong> <strong>int buf[200];</strong> <strong>int next(int n,int k){</strong> **    if(!k) return 0;** **    int p=0,i=0;** **    long long RES=(long long)k<em>k;*</em> **    while(RES&gt;0){buf[i++]=RES%10;RES/=10;}** **    if(n&gt;i)n=i;** **    for(int t=0;t&lt;n;++t)p=p<em>10+buf[–i];*</em> **    return p;** <strong>}</strong> <strong>void floyd_check(int n,int k){</strong> **        int k1=k,k2=k,ans=k;//ans=k** **        do{** **            k1=next(n,k1);** **            k2=next(n,k2);if(k2&gt;ans)ans=k2;** **            k2=next(n,k2);if(k2&gt;ans)ans=k2;** **        }while(k1!=k2);** **        printf(“%d\\n”,ans);** <strong>}</strong> <strong>int main(){</strong> **    int T,n,go;** **    scanf(“%d”,&amp;T);** **    while(T–){** **        scanf(“%d%d”,&amp;n,&amp;go);** **        floyd_check(n,go);** **    }** **    return 0;** <strong>}</strong></p>\n</blockquote>\n","text":"【题解】 Floyd判圈法 【Code】#include&lt;bits/stdc++.h&gt; using namespace std; int buf[200]; int next(int n,int k){ **    if(!k) return 0;** **    i","link":"","raw":null,"photos":[],"categories":[{"name":"Floyd判圈法","slug":"Floyd判圈法","count":2,"path":"api/categories/Floyd判圈法.json"},{"name":"UVa","slug":"Floyd判圈法/UVa","count":1,"path":"api/categories/Floyd判圈法/UVa.json"},{"name":"思维","slug":"Floyd判圈法/UVa/思维","count":1,"path":"api/categories/Floyd判圈法/UVa/思维.json"}],"tags":[{"name":"思维","slug":"思维","count":17,"path":"api/tags/思维.json"},{"name":"UVa","slug":"UVa","count":39,"path":"api/tags/UVa.json"},{"name":"Floyd判圈法","slug":"Floyd判圈法","count":2,"path":"api/tags/Floyd判圈法.json"}]},{"title":"UVa 11078","slug":"uva-11078","date":"2017-04-04T11:57:26.000Z","updated":"2019-07-03T13:51:36.847Z","comments":true,"path":"api/articles/uva-11078.json","excerpt":"","keywords":null,"cover":null,"content":"<p><strong>【生词】</strong> <strong>Credit 信誉,信用,相信,信任</strong> <strong>senior 上司,高级的</strong> <strong>as if 犹如,好似</strong> <strong>attend 出席,致力于,照料</strong> <strong>requisite 必需品,必需的</strong> <strong>advance 发展,前行,增长</strong> <strong>assess 评定,估价</strong> <strong>amount 数量,总数,总计</strong> <strong>figure out 计算出,估计</strong> <strong>【题解】</strong> <strong>记录输入时队列前面的最大值,然后用最大值依次减去后面比他小的数,维护ans.</strong> <strong>【Code】</strong></p>\n<blockquote>\n<p><strong>#include&lt;bits/stdc++.h&gt;</strong> <strong>#define INF 0x3f3f3f3f</strong> <strong>using namespace std;</strong> <strong>int ans,T,N,Max,c;</strong> <strong>int main(){</strong> **    scanf(“%d”,&amp;T);** **    while(T–){** **        scanf(“%d”,&amp;N);** **        ans=-INF;Max=-INF;** **        for(int i=0;i&lt;N;++i){** **                scanf(“%d”,&amp;c);** **                ans=max(ans,Max-c);** **                Max=max(Max,c);** **        }** **        printf(“%d\\n”,ans);** **    }** **    return 0;** <strong>}</strong></p>\n</blockquote>\n","text":"【生词】 Credit 信誉,信用,相信,信任 senior 上司,高级的 as if 犹如,好似 attend 出席,致力于,照料 requisite 必需品,必需的 advance 发展,前行,增长 assess 评定,估价 amount 数量,总数,总计 figure ou","link":"","raw":null,"photos":[],"categories":[{"name":"UVa","slug":"UVa","count":35,"path":"api/categories/UVa.json"},{"name":"思维","slug":"UVa/思维","count":4,"path":"api/categories/UVa/思维.json"}],"tags":[{"name":"思维","slug":"思维","count":17,"path":"api/tags/思维.json"},{"name":"UVa","slug":"UVa","count":39,"path":"api/tags/UVa.json"}]},{"title":"UVa 11462","slug":"uva-11462","date":"2017-04-04T10:51:00.000Z","updated":"2019-07-03T13:51:36.847Z","comments":true,"path":"api/articles/uva-11462.json","excerpt":"","keywords":null,"cover":null,"content":"<p><strong>【题解】</strong> <strong>数据过大,因为年龄只有120左右,所以用数组映射,计数排序.</strong> <strong>【Code】</strong></p>\n<blockquote>\n<p><strong>#include&lt;bits/stdc++.h&gt;</strong> <strong>//isdigit宏在cctype中</strong> <strong>using namespace std;</strong> <strong>inline int readint(){</strong> **    char c=getchar();** **    while(!isdigit(c)) c=getchar();** **    int x=0;** **    while(isdigit(c)){** **        x=x<em>10+c-‘0’;*</em> **        c=getchar();** **    }** **    return x;** <strong>}</strong> <strong>int buf[10]; //声明成全局变量可以减小开销</strong> <strong>inline void writeint(int i){</strong> **    int p=0;** **    if(i==0)p++;//特殊情况:i等于0的时候需要输出0,而不是什么也不输出;** **    else while(i){** **        buf[p++]=i%10;** **        i/=10;** **    }** **    for(int j=p-1;j&gt;=0;j–) putchar(‘0’+buf[j]);//逆序输出** <strong>}</strong> <strong>int main(){</strong> **    int n,x,c[101];** **    while(n=readint()){** **        memset(c,0,sizeof(c));** **        for(int i=0;i&lt;n;++i) c[readint()]++;** **        int first=1;** **        for(int i=1;i&lt;=100;++i)** **            for(int j=0;j&lt;c[i];++j){** **                if(!first) putchar(‘ ‘);** **                first=0;** **                writeint(i);** **            }** **        putchar(‘\\n’);** **    }** **    return 0;** <strong>}</strong></p>\n</blockquote>\n","text":"【题解】 数据过大,因为年龄只有120左右,所以用数组映射,计数排序. 【Code】#include&lt;bits/stdc++.h&gt; //isdigit宏在cctype中 using namespace std; inline int readint(){ **    ","link":"","raw":null,"photos":[],"categories":[{"name":"UVa","slug":"UVa","count":35,"path":"api/categories/UVa.json"}],"tags":[{"name":"UVa","slug":"UVa","count":39,"path":"api/tags/UVa.json"}]},{"title":"优化 模板","slug":"youhua-muban","date":"2017-04-04T10:49:58.000Z","updated":"2019-07-03T13:51:36.847Z","comments":true,"path":"api/articles/youhua-muban.json","excerpt":"","keywords":null,"cover":null,"content":"<p><strong>【I/O优化】</strong> <strong>UVA11462   非负整数I/O优化</strong></p>\n<blockquote>\n<p><strong>#include&lt;bits/stdc++.h&gt;</strong> <strong>//isdigit宏在cctype中</strong> <strong>using namespace std;</strong> <strong>inline int readint(){</strong> **    char c=getchar();** **    while(!isdigit(c)) c=getchar();** **    int x=0;** **    while(isdigit(c)){** **        x=x<em>10+c-‘0’;*</em> **        c=getchar();** **    }** **    return x;** <strong>}</strong> <strong>int buf[10]; //声明成全局变量可以减小开销</strong> <strong>inline void writeint(int i){</strong> **    int p=0;** **    if(i==0)p++;//特殊情况:i等于0的时候需要输出0,而不是什么也不输出;** **    else while(i){** **        buf[p++]=i%10;** **        i/=10;** **    }** **    for(int j=p-1;j&gt;=0;j–) putchar(‘0’+buf[j]);//逆序输出** <strong>}</strong> <strong>int main(){</strong> **    int n,x,c[101];** **    while(n=readint()){** **        memset(c,0,sizeof(c));** **        for(int i=0;i&lt;n;++i) c[readint()]++;** **        int first=1;** **        for(int i=1;i&lt;=100;++i)** **            for(int j=0;j&lt;c[i];++j){** **                if(!first) putchar(‘ ‘);** **                first=0;** **                writeint(i);** **            }** **        putchar(‘\\n’);** **    }** **    return 0;** <strong>}</strong></p>\n</blockquote>\n","text":"【I/O优化】 UVA11462   非负整数I/O优化#include&lt;bits/stdc++.h&gt; //isdigit宏在cctype中 using namespace std; inline int readint(){ **    char c=getchar","link":"","raw":null,"photos":[],"categories":[{"name":"UVa","slug":"UVa","count":35,"path":"api/categories/UVa.json"},{"name":"模板","slug":"UVa/模板","count":1,"path":"api/categories/UVa/模板.json"}],"tags":[{"name":"UVa","slug":"UVa","count":39,"path":"api/tags/UVa.json"}]},{"title":"UVa 11384","slug":"uva-11384","date":"2017-04-04T09:45:31.000Z","updated":"2019-07-03T13:51:36.847Z","comments":true,"path":"api/articles/uva-11384.json","excerpt":"","keywords":null,"cover":null,"content":"<p><strong>【生词】</strong> <strong>screen 屏幕</strong> <strong>subtract 减去,扣掉</strong> <strong>objective 目标,目的</strong> <strong>Her objective will be to make all the numbers 0.  他的目标是将所有的数字变成0.</strong> <strong>as 作为</strong> <strong>twist 扭曲,拧,拧伤,使苦恼</strong> <strong>for each 为每一个</strong> <strong>determine 下决心,决定,确定</strong> <strong>terminated 终止于</strong> <strong>separate 单独的</strong> <strong>【题解】</strong> <strong>蓝书P26</strong> <strong>【Code】</strong></p>\n<blockquote>\n<p><strong>#include&lt;bits/stdc++.h&gt;</strong> <strong>using namespace std;</strong> <strong>int N,cnt;</strong> <strong>//可以发现..其实右边界并没有用到= =Orz</strong> <strong>int solve(int l,int r,int num){</strong> **    if(l==1 &amp;&amp; r==1){** **        printf(“%d\\n”,num);** **        return num;** **    }** **    solve((l-1)/2+1,l-1,num+1);** <strong>}</strong> <strong>int main(){</strong> **    while(~scanf(“%d”,&amp;N)){** **        cnt=0;** **        cnt=solve(N/2+1,N,1);** **    }** **    return 0;** <strong>}</strong></p>\n</blockquote>\n","text":"【生词】 screen 屏幕 subtract 减去,扣掉 objective 目标,目的 Her objective will be to make all the numbers 0.  他的目标是将所有的数字变成0. as 作为 twist 扭曲,拧,拧伤,使苦恼 for ","link":"","raw":null,"photos":[],"categories":[{"name":"UVa","slug":"UVa","count":35,"path":"api/categories/UVa.json"},{"name":"思维","slug":"UVa/思维","count":4,"path":"api/categories/UVa/思维.json"}],"tags":[{"name":"思维","slug":"思维","count":17,"path":"api/tags/思维.json"},{"name":"UVa","slug":"UVa","count":39,"path":"api/tags/UVa.json"}]},{"title":"LA 3401","slug":"la-3401","date":"2017-04-04T08:44:39.000Z","updated":"2019-07-03T13:51:36.847Z","comments":true,"path":"api/articles/la-3401.json","excerpt":"","keywords":null,"cover":null,"content":"<p>【生词】 identical 完全相同的事物,同一的,完全的 suitable 适当的,相配的 rotations 旋转 mirror 镜子,反射 Figure 3 图3 repainting 重新检测,重涂,重画 fewer 较少的,较少数 separate 分开,单独的</p>\n","text":"【生词】 identical 完全相同的事物,同一的,完全的 suitable 适当的,相配的 rotations 旋转 mirror 镜子,反射 Figure 3 图3 repainting 重新检测,重涂,重画 fewer 较少的,较少数 separate 分开,单独的","link":"","raw":null,"photos":[],"categories":[{"name":"LA","slug":"LA","count":7,"path":"api/categories/LA.json"},{"name":"模拟","slug":"LA/模拟","count":1,"path":"api/categories/LA/模拟.json"}],"tags":[{"name":"模拟","slug":"模拟","count":9,"path":"api/tags/模拟.json"},{"name":"LA","slug":"LA","count":8,"path":"api/tags/LA.json"}]},{"title":"LA 2995","slug":"la-2995","date":"2017-04-04T06:41:40.000Z","updated":"2019-07-03T13:51:36.847Z","comments":true,"path":"api/articles/la-2995.json","excerpt":"","keywords":null,"cover":null,"content":"<p><strong>【生词】</strong> <strong>small lightweight object 轻量级的对象(比较轻的物体)</strong> <strong>hold 控制,保留,支持,持有,保存,这里意为举起</strong> <strong>intelligence 智力,情报工作,情报机关,理解力</strong> <strong>determine 下决心,决定</strong> <strong>cardinal 主要的,基本的</strong> <strong>inferring 推理,猜想</strong> <strong>upper limited 上限,最大值</strong> <strong>assume 借取,篡夺,假定,假想</strong> <strong>form 形式,形状,构成</strong> <strong>lattice 晶格,格子,格架</strong> <strong>cubes 立方体</strong> <strong>weighs权衡,重量为</strong> <strong>gram 克/g</strong> <strong>is not necessarily 没必要/不一定</strong> <strong>separated 分隔,分开的</strong> <strong>corresponds 符合,一致,相应</strong> <strong>similar 类似的,相似的</strong> <strong>【Tip】</strong> <strong>这个模拟…额…有点蒙..效率起见,回头看,蓝书P15</strong> <strong>【Code】</strong></p>\n<blockquote>\n<p><strong>#include&lt;bits/stdc++.h&gt;</strong> <strong>#define INF 0x3f3f3f3f</strong> <strong>#define REP(i,n) for(int i=0;i&lt;(n);++i)</strong> <strong>using namespace std;</strong> <strong>const int maxn =10;</strong> <strong>int n;</strong> <strong>char pos[maxn][maxn][maxn];</strong> <strong>char view[6][maxn][maxn];</strong> <strong>char read_char(){</strong> **    char ch;** **    for(;;){** **        ch=getchar();** **        if((ch&gt;=’A’ &amp;&amp; ch&lt;=’Z’) || ch==’.’) return ch;** **    }** <strong>}</strong> <strong>//get函数表示第k个视图中,第i行j列,深度为len的单位立方体</strong> <strong>//在原立方体中的坐标(x,y,z)</strong> <strong>void get(int k,int i,int j,int len,int &amp;x,int &amp;y,int &amp;z){</strong> **    if(k==0){x=len;y=j;z=i;}** **    if(k==1){x=n-1-j;y=len;z=i;}** **    if(k==2){x=n-1-len;y=n-1-j;z=i;}** **    if(k==3){x=j;y=n-1-len;z=i;}** **    if(k==4){x=n-1-i;y=j;z=len;}** **    if(k==5){x=i;y=j;z=n-1-len;}** <strong>}</strong> <strong>int main(){</strong> **    while(~scanf(“%d”,&amp;n) &amp;&amp; n){** **        REP(i,n) REP(k,6) REP(j,n) view[k][i][j]=read_char();** **        REP(i,n) REP(j,n) REP(k,n) pos[i][j][k]=’#’;** **        REP(k,6) REP(i,n) REP(j,n) if(view[k][i][j]==’.’)** **            REP(p,n){** **                int x,y,z;** **                get(k,i,j,p,x,y,z);** **                pos[x][y][z]=’.’;** **            }** **        for(;;){** **            bool done=true;** **            REP(k,6) REP(i,n) REP(j,n) if(view[k][i][j]!=’.’){** **                REP(p,n){** **                    int x,y,z;** **                    get(k,i,j,p,x,y,z);** **                    if(pos[x][y][z]==’.’) continue;** **                    if(pos[x][y][z]==’#’) {** **                        pos[x][y][z]=view[k][i][j];** **                        break;** **                    }** **                    if(pos[x][y][z]==view[k][i][j]) break;** **                    pos[x][y][z]=’.’;** **                    done=false;** **                }** **            }** **            if(done) break;** **        }** **        int ans=0;** **        REP(i,n) REP(j,n) REP(k,n)** **            if(pos[i][j][k]!=’.’) ans++;** **        printf(“Maximum weight: %d gram(s)\\n”,ans);** **    }** **    return 0;** <strong>}</strong></p>\n</blockquote>\n","text":"【生词】 small lightweight object 轻量级的对象(比较轻的物体) hold 控制,保留,支持,持有,保存,这里意为举起 intelligence 智力,情报工作,情报机关,理解力 determine 下决心,决定 cardinal 主要的,基本的 infe","link":"","raw":null,"photos":[],"categories":[{"name":"POJ","slug":"POJ","count":21,"path":"api/categories/POJ.json"},{"name":"模拟","slug":"POJ/模拟","count":1,"path":"api/categories/POJ/模拟.json"}],"tags":[{"name":"模拟","slug":"模拟","count":9,"path":"api/tags/模拟.json"},{"name":"POJ","slug":"POJ","count":22,"path":"api/tags/POJ.json"}]},{"title":"PAT L3-005","slug":"pat-l3-005","date":"2017-04-03T17:18:58.000Z","updated":"2019-07-03T13:51:36.847Z","comments":true,"path":"api/articles/pat-l3-005.json","excerpt":"","keywords":null,"cover":null,"content":"<p><strong>【Tip】</strong> <strong>Dijsktra模板题</strong> <strong>【Code】</strong></p>\n<blockquote>\n<p><strong>#include&lt;bits/stdc++.h&gt;</strong> <strong>#define fill(x) memset(x,0,sizeof(x))</strong> <strong>#define INF 0x3f3f3f3f</strong> <strong>using namespace std;</strong> <strong>const int maxn=30000;</strong> <strong>int N,M,K,D;</strong> <strong>char alpha1[100],alpha2[100];</strong> <strong>int now,goal,di;</strong>  <strong>struct Edge{</strong> <strong>int from,to,dist;</strong> <strong>};</strong> <strong>struct HeapNode{  //Dijkstra算法用到的优先队列的节点</strong> **    int d,u;** **    bool operator&lt;(const HeapNode&amp; rhs)const{** <strong>return d&gt;rhs.d;</strong> <strong>}</strong> <strong>};</strong> <strong>struct Dijkstra{</strong> **    int n,m; //点数和边数** **    vector<edge> edges; //边列表** **    vector<int> G[maxn]; //每个节点出发的边编号(从0开始编号)** **    bool done[maxn];    //是否永久标号** **    int d[maxn];        //s到各个点的距离** <strong>int p[maxn];        //最短路中的上一条边</strong> **    void init(int n){** **        this-&gt;n=n;** **        for(int i=0;i&lt;n;++i) G[i].clear();//清空邻接表** <strong>edges.clear();//清空边表</strong> <strong>}</strong>  **    void AddEdge(int from,int to,int dist){** **        //如果是无向图,每条无向边需调用两次AddEdge** **        edges.push_back((Edge){from,to,dist});** **        m=edges.size();** <strong>G[from].push_back(m-1);</strong> <strong>}</strong>  **    void dijkstra(int s){//求s到所有点的距离** **         priority_queue<heapnode> Q;** **         for(int i=0;i&lt;n;++i) d[i]=INF;** **         d[s]=0;** **         fill(done);** **         Q.push((HeapNode){0,s});** **         while(!Q.empty()){** **             HeapNode x=Q.top(); Q.pop();** **            int u=x.u;** **            if(done[u])continue;** **            done[u]=true;** **            for(int i=0;i&lt;G[u].size();++i){** **                Edge &amp;e=edges[G[u][i]];** **                if(d[e.to]&gt;d[u]+e.dist){** **                    d[e.to]=d[u]+e.dist;** **                    p[e.to]=G[u][i];** <strong>Q.push((HeapNode){d[e.to],e.to});</strong> <strong>}</strong> <strong>}</strong> **         }** <strong>}</strong> <strong>};</strong> <strong>int main(){</strong> **    while(~scanf(“%d%d%d%d”,&amp;N,&amp;M,&amp;K,&amp;D)){** **        Dijkstra dj;** <strong>dj.init(N+M);</strong> **        for(int i=0;i&lt;K;++i){** <strong>scanf(“\\n%s %s %d”,alpha1,alpha2,&amp;di);</strong> **            //因为可能出现G10 123等字符串** **            //所以这里转换必须用atoi或stoi** <strong>//后者是c11的</strong> <strong>if(alpha1[0]==’G’){</strong> <strong>now = N-1 + atoi(alpha1+1);</strong> **            }else** <strong>now = atoi(alpha1)-1;</strong>  <strong>if(alpha2[0]==’G’){</strong> **                goal = N-1 + atoi(alpha2+1);** **            }else** **                goal = atoi(alpha2)-1;**  **            dj.AddEdge(now,goal,di);** <strong>dj.AddEdge(goal,now,di);</strong> <strong>}</strong> **        int ansid=-1,ansdis=INF;** <strong>double ansave=INF;</strong>  **        for(int i=0;i&lt;M;++i){** **            int index=i+N,mindis=INF;** **            bool flag=true;** **            double ave=0.0;** **            dj.dijkstra(index);** **            for(int j=0;j&lt;N;++j){** **                if(dj.d[j]&gt;D){** **                    flag=false;** **                    break;** **                }** **                ave+=1.0<em>dj.d[j];*</em> **                mindis=mindis&gt;dj.d[j]?dj.d[j]:mindis;** <strong>}</strong> **            if(!flag)** **                continue;** **            else{** **                if(ansdis==INF){** **                    ave=ave/N;** **                    ansave=ave;** **                    ansid=i;** **                    ansdis=mindis;** **                }else if(mindis&gt;ansdis){** **                    ave=ave/N;** **                    ansave=ave;** **                    ansid=i;** **                    ansdis=mindis;** **                }else if(ansdis==mindis){** **                    ave=ave/N;** **                    if(ave&lt;ansave){** **                        ansave=ave;** **                        ansid=i;** **                        ansdis=mindis;** **                    }else if(ave==ansave){** **                        ansid=i&gt;ansid?ansid:i;** **                        ansdis=mindis;** **                    }** **                }** **            }** **        }**  **        if(ansid==-1)** **            printf(“No Solution\\n”);** **        else{** **            printf(“G%d\\n”,ansid+1);** <strong>printf(“%.1f %.1f\\n”,1.0*ansdis,ansave);</strong> <strong>}</strong> <strong>}</strong> <strong>return 0;</strong> <strong>}</strong></heapnode></int></edge></p>\n</blockquote>\n","text":"【Tip】 Dijsktra模板题 【Code】#include&lt;bits/stdc++.h&gt; #define fill(x) memset(x,0,sizeof(x)) #define INF 0x3f3f3f3f using namespace std; cons","link":"","raw":null,"photos":[],"categories":[{"name":"Dijsktra","slug":"Dijsktra","count":1,"path":"api/categories/Dijsktra.json"},{"name":"图论","slug":"Dijsktra/图论","count":1,"path":"api/categories/Dijsktra/图论.json"}],"tags":[{"name":"图论","slug":"图论","count":6,"path":"api/tags/图论.json"},{"name":"Dijsktra","slug":"Dijsktra","count":1,"path":"api/tags/Dijsktra.json"}]},{"title":"图论 模板","slug":"graph-muban","date":"2017-04-03T13:17:38.000Z","updated":"2019-07-03T13:51:36.847Z","comments":true,"path":"api/articles/graph-muban.json","excerpt":"","keywords":null,"cover":null,"content":"<p><strong>【前向星存储法】</strong></p>\n<blockquote>\n<p><strong>#include <iostream></iostream></strong> <strong>#include &lt;string.h&gt;</strong> <strong>#include <algorithm></algorithm></strong> <strong>using namespace std;</strong> <strong>int head[10005]; //存储起点为Vi的第一条边的位置</strong> <strong>struct note{</strong> **    int xx,yy,ww;  //起点，终点，权值** <strong>}e[10005];</strong> <strong>bool cmp(note a, note b){</strong> **    if(a.xx==b.xx &amp;&amp; a.yy==b.yy) return a.ww&lt;b.ww;** **    if(a.xx==b.xx)  return a.yy&lt;b.yy;** **    return a.xx&lt;b.xx;** <strong>}</strong> <strong>int main(){</strong> **     int n, m;** <strong>cin &gt;&gt; n &gt;&gt; m; //n个顶点, m条边</strong> <strong>for(int i=0; i&lt;m; i++) cin &gt;&gt; e[i].xx &gt;&gt; e[i].yy &gt;&gt; e[i].ww; //读入边</strong> <strong>sort(e,e+m,cmp); //将边按顶点从小到大排序</strong> <strong>memset(head, -1, sizeof(head));  //head初始化为-1</strong> **     head[e[0].xx]=0;** **     for(int i=1; i&lt;m; i++)** **        if(e[i].xx!=e[i-1].xx) head[e[i].xx]=i; //确定起点为Vi的第一条边的位置** **     int k;** **     for(int i=1;i&lt;=n;i++)** **         for(k=head[i]; e[k].xx==i &amp;&amp; k&lt;m; k++) cout &lt;&lt; e[k].xx&lt;&lt;” “ &lt;&lt; e[k].yy&lt;&lt;” “&lt;&lt; e[k].ww &lt;&lt; endl;** **     return 0;** <strong>}</strong></p>\n</blockquote>\n<p><strong>【邻接表存储法】</strong></p>\n<blockquote>\n<p><strong>#include&lt;bits/stdc++.h&gt;</strong> <strong>using namespace std;</strong> <strong>struct edgenode{</strong> **    int to;** **    int w;** **    edgenode <em>next;*</em> <strong>}*N[10005];</strong> <strong>int main(){</strong> **    int i,j,w,n;** **    while(~scanf(“%d”,&amp;n)){** **        for(int kk=0;kk&lt;n;++kk){** **            cin&gt;&gt;i&gt;&gt;j&gt;&gt;w;** **            edgenode <em>p=new edgenode();*</em> **            p-&gt;to=j;** **            p-&gt;w=w;** <strong>p-&gt;next=N[i];//把该节点下所有的边用链表存下来</strong> **            N[i]=p;** **        }** <strong>cout&lt;&lt;endl;</strong> **        for(int i=1;i&lt;=n;++i)** **            for(edgenode <em>k=N[i];k!=NULL;k=k-&gt;next)*</em> **                cout &lt;&lt; i &lt;&lt; “ “ &lt;&lt; k -&gt;to &lt;&lt; “ “ &lt;&lt; k-&gt;w &lt;&lt; endl;** **    }** **    return 0;** <strong>}</strong></p>\n</blockquote>\n<p><strong>【Dijstra模板】</strong></p>\n<blockquote>\n<p><strong>#include&lt;bits/stdc++.h&gt;</strong> <strong>#define fill(x) memset(x,0,sizeof(x))</strong> <strong>#define INF 0x3f3f3f3f</strong> <strong>using namespace std;</strong> <strong>const int maxn=1000000;</strong> <strong>struct Edge{</strong> <strong>int from,to,dist;</strong> <strong>};</strong> <strong>struct HeapNode{  //Dijkstra算法用到的优先队列的节点</strong> **    int d,u;** **    bool operator&lt;(const HeapNode&amp; rhs)const{** <strong>return d&gt;rhs.d;</strong> <strong>}</strong> <strong>};</strong> <strong>struct Dijkstra{</strong> **    int n,m; //点数和边数** **    vector<edge> edges; //边列表** **    vector<int> G[maxn]; //每个节点出发的边编号(从0开始编号)** **    bool done[maxn];    //是否永久标号** **    int d[maxn];        //s到各个点的距离** <strong>int p[maxn];        //最短路中的上一条边</strong> **    void init(int n){** **        this-&gt;n=n;** **        for(int i=0;i&lt;n;++i) G[i].clear();//清空邻接表** <strong>edges.clear();//清空边表</strong> <strong>}</strong>  **    void AddEdge(int from,int to,int dist){** **        //如果是无向图,每条无向边需调用两次AddEdge** **        edges.push_back((Edge){from,to,dist});** **        m=edges.size();** <strong>G[from].push_back(m-1);</strong> <strong>}</strong>  **    void dijkstra(int s){//求s到所有点的距离** **         priority_queue<heapnode> Q;** **         for(int i=0;i&lt;n;++i) d[i]=INF;** **         d[s]=0;** **         fill(done);** **         Q.push((HeapNode){0,s});** **         while(!Q.empty()){** **             HeapNode x=Q.top(); Q.pop();** **            int u=x.u;** **            if(done[u])continue;** **            done[u]=true;** **            for(int i=0;i&lt;G[u].size();++i){** **                Edge &amp;e=edges[G[u][i]];** **                if(d[e.to]&gt;d[u]+e.dist){** **                    d[e.to]=d[u]+e.dist;** **                    p[e.to]=G[u][i];** <strong>Q.push((HeapNode){d[e.to],e.to});</strong> <strong>}</strong> <strong>}</strong> **         }** <strong>}</strong> <strong>};</strong> <strong>int main(){</strong>  <strong>return 0;</strong> <strong>}</strong></heapnode></int></edge></p>\n</blockquote>\n<p><strong>—题目应用,pat L3-005 垃圾箱分布</strong></p>\n<blockquote>\n<p><strong>#include&lt;bits/stdc++.h&gt;</strong> <strong>#define fill(x) memset(x,0,sizeof(x))</strong> <strong>#define INF 0x3f3f3f3f</strong> <strong>using namespace std;</strong> <strong>const int maxn=30000;</strong> <strong>int N,M,K,D;</strong> <strong>char alpha1[100],alpha2[100];</strong> <strong>int now,goal,di;</strong>  <strong>struct Edge{</strong> <strong>int from,to,dist;</strong> <strong>};</strong> <strong>struct HeapNode{  //Dijkstra算法用到的优先队列的节点</strong> **    int d,u;** **    bool operator&lt;(const HeapNode&amp; rhs)const{** <strong>return d&gt;rhs.d;</strong> <strong>}</strong> <strong>};</strong> <strong>struct Dijkstra{</strong> **    int n,m; //点数和边数** **    vector<edge> edges; //边列表** **    vector<int> G[maxn]; //每个节点出发的边编号(从0开始编号)** **    bool done[maxn];    //是否永久标号** **    int d[maxn];        //s到各个点的距离** <strong>int p[maxn];        //最短路中的上一条边</strong> **    void init(int n){** **        this-&gt;n=n;** **        for(int i=0;i&lt;n;++i) G[i].clear();//清空邻接表** <strong>edges.clear();//清空边表</strong> <strong>}</strong>  **    void AddEdge(int from,int to,int dist){** **        //如果是无向图,每条无向边需调用两次AddEdge** **        edges.push_back((Edge){from,to,dist});** **        m=edges.size();** <strong>G[from].push_back(m-1);</strong> <strong>}</strong>  **    void dijkstra(int s){//求s到所有点的距离** **         priority_queue<heapnode> Q;** **         for(int i=0;i&lt;n;++i) d[i]=INF;** **         d[s]=0;** **         fill(done);** **         Q.push((HeapNode){0,s});** **         while(!Q.empty()){** **             HeapNode x=Q.top(); Q.pop();** **            int u=x.u;** **            if(done[u])continue;** **            done[u]=true;** **            for(int i=0;i&lt;G[u].size();++i){** **                Edge &amp;e=edges[G[u][i]];** **                if(d[e.to]&gt;d[u]+e.dist){** **                    d[e.to]=d[u]+e.dist;** **                    p[e.to]=G[u][i];** <strong>Q.push((HeapNode){d[e.to],e.to});</strong> <strong>}</strong> <strong>}</strong> **         }** <strong>}</strong> <strong>};</strong> <strong>int main(){</strong> **    while(~scanf(“%d%d%d%d”,&amp;N,&amp;M,&amp;K,&amp;D)){** **        Dijkstra dj;** <strong>dj.init(N+M);</strong> **        for(int i=0;i&lt;K;++i){** <strong>scanf(“\\n%s %s %d”,alpha1,alpha2,&amp;di);</strong> **            //因为可能出现G10 123等字符串** **            //所以这里转换必须用atoi或stoi** <strong>//后者是c11的</strong> <strong>if(alpha1[0]==’G’){</strong> <strong>now = N-1 + atoi(alpha1+1);</strong> **            }else** <strong>now = atoi(alpha1)-1;</strong>  <strong>if(alpha2[0]==’G’){</strong> **                goal = N-1 + atoi(alpha2+1);** **            }else** **                goal = atoi(alpha2)-1;**  **            dj.AddEdge(now,goal,di);** <strong>dj.AddEdge(goal,now,di);</strong> <strong>}</strong> **        int ansid=-1,ansdis=INF;** <strong>double ansave=INF;</strong>  **        for(int i=0;i&lt;M;++i){** **            int index=i+N,mindis=INF;** **            bool flag=true;** **            double ave=0.0;** **            dj.dijkstra(index);** **            for(int j=0;j&lt;N;++j){** **                if(dj.d[j]&gt;D){** **                    flag=false;** **                    break;** **                }** **                ave+=1.0<em>dj.d[j];*</em> **                mindis=mindis&gt;dj.d[j]?dj.d[j]:mindis;** <strong>}</strong> **            if(!flag)** **                continue;** **            else{** **                if(ansdis==INF){** **                    ave=ave/N;** **                    ansave=ave;** **                    ansid=i;** **                    ansdis=mindis;** **                }else if(mindis&gt;ansdis){** **                    ave=ave/N;** **                    ansave=ave;** **                    ansid=i;** **                    ansdis=mindis;** **                }else if(ansdis==mindis){** **                    ave=ave/N;** **                    if(ave&lt;ansave){** **                        ansave=ave;** **                        ansid=i;** **                        ansdis=mindis;** **                    }else if(ave==ansave){** **                        ansid=i&gt;ansid?ansid:i;** **                        ansdis=mindis;** **                    }** **                }** **            }** **        }**  **        if(ansid==-1)** **            printf(“No Solution\\n”);** **        else{** **            printf(“G%d\\n”,ansid+1);** <strong>printf(“%.1f %.1f\\n”,1.0*ansdis,ansave);</strong> <strong>}</strong> <strong>}</strong> <strong>return 0;</strong> <strong>}</strong></heapnode></int></edge></p>\n</blockquote>\n<p><strong>【Floyd-任意两点间最短路】</strong></p>\n<blockquote>\n<p><strong>int d[max_V][max_V];//d[u][v]表示e(u,v)的边权值(不存在时设为INF,不过d[i][i]=0)</strong> <strong>int V;</strong> <strong>void folyd(){</strong> **     for(int k=0;k&lt;V;++k)** **        for(int i=0;i&lt;V;++i)** **            for(int j=0;j&lt;V;++j)** **               d[i][j]=min(d[i][j],d[i][k]+d[k][j]);** <strong>}</strong></p>\n</blockquote>\n<p><strong>【并查集】</strong></p>\n<blockquote>\n<p><strong>//并查集</strong> <strong>int par[MAX_N];//父亲</strong> <strong>int rank[MAX_N];//树的高度</strong> <strong>void init(int n){</strong> **    for(int i=0;i&lt;n;++i){** **        par[i]=i;** **        rank[i]=0;** **    }** <strong>}</strong> <strong>//查询树的根</strong> <strong>int find(int x){</strong> **    if(par[x]==x){** **        return x;** **    }else{** **        return par[x]=find(par[x]);** **    }** <strong>}</strong> <strong>//合并x和y所属集合</strong> <strong>void unite(int x,int y){</strong> **    x=find(x);** **    y=find(y);** **    if(x==y) return;** **    if(rank[x]&lt;rank[y]){** **        par[x]=y;** **    }else{** **        par[y]=x;** **        if(rank[x]==rank[y]) rank[x]++;** **    }** <strong>}</strong> <strong>//判断x和y是否属于同一个集合</strong> <strong>bool same(int x,int y){</strong> **    return find(x)==find(y);** <strong>}</strong></p>\n</blockquote>\n<p><strong>【并查集优化Kruskal】</strong></p>\n<blockquote>\n<p><strong>struct edge{</strong> **    int u,v,cost;** <strong>};</strong> <strong>bool comp(const edge&amp; e1,const edge&amp; e2){</strong> **    return e1.cost&lt;e2.cost;** <strong>}</strong> <strong>edge es[MAX_N];</strong> <strong>int V,E;//顶点数和边数</strong> <strong>//并查集</strong> <strong>int par[MAX_N];//父亲</strong> <strong>int rank[MAX_N];//树的高度</strong> <strong>void init_union_find(int n){</strong> **    for(int i=0;i&lt;n;++i){** **        par[i]=i;** **        rank[i]=0;** **    }** <strong>}</strong> <strong>//查询树的根</strong> <strong>int find(int x){</strong> **    if(par[x]==x){** **        return x;** **    }else{** **        return par[x]=find(par[x]);** **    }** <strong>}</strong> <strong>//合并x和y所属集合</strong> <strong>void unite(int x,int y){</strong> **    x=find(x);** **    y=find(y);** **    if(x==y) return;** **    if(rank[x]&lt;rank[y]){** **        par[x]=y;** **    }else{** **        par[y]=x;** **        if(rank[x]==rank[y]) rank[x]++;** **    }** <strong>}</strong> <strong>//判断x和y是否属于同一个集合</strong> <strong>bool same(int x,int y){</strong> **    return find(x)==find(y);** <strong>}</strong> <strong>int kruskal(){</strong> **    sort(es,es+E,comp);** **    int res=0;** **    init_union_find(V);** **    for(int i=0;i&lt;E;++i){** **        edge e=es[i];** **        if(!same(e.u,e.v)){** **            unite(e.u,e.v);** **            res+=e.cost;** **        }** **    }** **    return res;** <strong>}</strong></p>\n</blockquote>\n<p><strong>【最大流Dinic】</strong> <strong>对应例题 POJ 1273</strong></p>\n<blockquote>\n<p><strong>#include &lt;bits/stdc++.h&gt;</strong> <strong>using namespace std;</strong> <strong>typedef long long ll;</strong> <strong>const int INF = 0x3f3f3f3f;</strong> <strong>#define cle(a,val) memset(a,(val),sizeof(a))</strong> <strong>#define SI(N) scanf(“%d”,&amp;(N))</strong> <strong>#define SII(N,M) scanf(“%d %d”,&amp;(N),&amp;(M))</strong> <strong>#define SIII(N,M,K) scanf(“%d %d %d”,&amp;(N),&amp;(M),&amp;(K))</strong> <strong>#define rep(i,b) for(int i=0;i&lt;(b);i++)</strong> <strong>#define rez(i,a,b) for(int i=(a);i&lt;=(b);i++)</strong> <strong>#define red(i,a,b) for(int i=(a);i&gt;=(b);i–)</strong> <strong>const ll LINF = 0x3f3f3f3f3f3f3f3f;</strong> <strong>#define PU(x) puts(#x);</strong> <strong>#define PI(A) cout&lt;&lt;(A)&lt;&lt;endl;</strong> <strong>#define DG(x) cout&lt;&lt;#x&lt;&lt;”=”&lt;&lt;(x)&lt;&lt;endl;</strong> <strong>#define DGG(x,y) cout&lt;&lt;#x&lt;&lt;”=”&lt;&lt;(x)&lt;&lt;” “&lt;&lt;#y&lt;&lt;”=”&lt;&lt;(y)&lt;&lt;endl;</strong> <strong>#define DGGG(x,y,z) cout&lt;&lt;#x&lt;&lt;”=”&lt;&lt;(x)&lt;&lt;” “&lt;&lt;#y&lt;&lt;”=”&lt;&lt;(y)&lt;&lt;” “&lt;&lt;#z&lt;&lt;”=”&lt;&lt;(z)&lt;&lt;endl;</strong> <strong>#define PIar(a,n) rep(i,n)cout&lt;&lt;a[i]&lt;&lt;” “;cout&lt;&lt;endl;</strong> <strong>#define PIarr(a,n,m) rep(aa,n){rep(bb, m)cout&lt;&lt;a[aa][bb]&lt;&lt;” “;cout&lt;&lt;endl;}</strong> <strong>const double EPS = 1e-9 ;</strong> <strong>/*  ////////////////////////   C o d i n g  S p a c e   ////////////////////////  */</strong> <strong>//弧,从from到to的容量为cap,流量为flow的弧当cap=0时,意味此边是反向弧</strong> <strong>//当且仅当flow&lt;cap时,该弧存在于残量网络中</strong> <strong>struct Edge</strong> <strong>{</strong> **    Edge(){}** **    Edge(int from,int to,int cap,int flow):from(from),to(to),cap(cap),flow(flow){}** **    int from,to,cap,flow;** <strong>};</strong> <strong>struct Dinic{</strong> **    int n,m,s,t; //节点数,边数** **    vector<edge> edges;//边表。edges[e]和edges[e^1]互为反向弧。** **    vector<int> G[maxn]; //邻接表,G[i][j]表示节点i的第j条边在e数组中的序号** **    bool vis[maxn]; //BFS使用** **    int d[maxn]; //从起点到i的距离** **    int cur[maxn]; //当前弧的下标** **    //插入弧,原图中的一条弧对应于两个Edge结构体,一个是这条弧本身,另一个是他的反向弧** **    //根据插入顺序不难看出,edges[0]和edges[1]互为反向弧,edges[2]和edges[3]** **    //一般的,edges[e]和edges[e^1]互为反向弧** **    void AddEdge(int from,int to,int cap){** **        edges.push_back((Edge){from,to,cap,0});** **        edges.push_back((Edge){to,from,0,0});** **        m=edges.size();** **        G[from].push_back(m-2);** **        G[to].push_back(m-1);** **    }** **    bool BFS(){** **        cle(vis,0);** **        queue<int> Q;** **        Q.push(s);** **        d[s]=0;** **        vis[s]=1;** **        while(!Q.empty()){** **            int x=Q.front();Q.pop();** **            for(int i=0;i&lt;G[x].size();++i){** **                Edge&amp; e=edges[G[x][i]];** **                if(!vis[e.to] &amp;&amp; e.cap&gt;e.flow){//只考虑残量网络中的狐** **                    vis[e.to]=1;** **                    d[e.to]=d[x]+1;** **                    Q.push(e.to);** **                }** **            }** **        }** **        return vis[t];** **    }** **    int DFS(int x,int a){** **        if(x==t || a==0) return a;** **        int flow=0,f;** **        for(int&amp; i=cur[x];i&lt;G[x].size();++i){//从上次考虑的弧** **            Edge&amp; e=edges[G[x][i]];** **            if(d[x]+1==d[e.to] &amp;&amp; (f=DFS(e.to,min(a,e.cap-e.flow)))&gt;0){** **                e.flow+=f;** **                edges[G[x][i]^1].flow-=f;** **                flow+=f;** **                a-=f;** **                if(a==0) break;** **            }** **        }** **        return flow;** **    }** **    int Maxflow(int s,int t){** **        this-&gt;s=s;this-&gt;t=t;** **        int flow=0;** **        while(BFS()){** **            cle(cur,0);** **            flow+=DFS(s,INF);** **        }** **        return flow;** **    }** <strong>};</strong> <strong>int main(){</strong> **    return 0;** <strong>}</strong></int></int></edge></p>\n</blockquote>\n<p><strong>【SPFA最小费用最大流】</strong></p>\n<blockquote>\n<p><strong>#include &lt;bits/stdc++.h&gt;</strong> <strong>using namespace std;</strong> <strong>typedef long long ll;</strong> <strong>const int INF = 0x3f3f3f3f;</strong> <strong>#define cle(a,val) memset(a,(val),sizeof(a))</strong> <strong>#define SI(N) scanf(“%d”,&amp;(N))</strong> <strong>#define SII(N,M) scanf(“%d %d”,&amp;(N),&amp;(M))</strong> <strong>#define SIII(N,M,K) scanf(“%d %d %d”,&amp;(N),&amp;(M),&amp;(K))</strong> <strong>#define rep(i,b) for(int i=0;i&lt;(b);i++)</strong> <strong>#define rez(i,a,b) for(int i=(a);i&lt;=(b);i++)</strong> <strong>#define red(i,a,b) for(int i=(a);i&gt;=(b);i–)</strong> <strong>const ll LINF = 0x3f3f3f3f3f3f3f3f;</strong> <strong>#define PU(x) puts(#x);</strong> <strong>#define PI(A) cout&lt;&lt;(A)&lt;&lt;endl;</strong> <strong>#define DG(x) cout&lt;&lt;#x&lt;&lt;”=”&lt;&lt;(x)&lt;&lt;endl;</strong> <strong>#define DGG(x,y) cout&lt;&lt;#x&lt;&lt;”=”&lt;&lt;(x)&lt;&lt;” “&lt;&lt;#y&lt;&lt;”=”&lt;&lt;(y)&lt;&lt;endl;</strong> <strong>#define DGGG(x,y,z) cout&lt;&lt;#x&lt;&lt;”=”&lt;&lt;(x)&lt;&lt;” “&lt;&lt;#y&lt;&lt;”=”&lt;&lt;(y)&lt;&lt;” “&lt;&lt;#z&lt;&lt;”=”&lt;&lt;(z)&lt;&lt;endl;</strong> <strong>#define PIar(a,n) rep(i,n)cout&lt;&lt;a[i]&lt;&lt;” “;cout&lt;&lt;endl;</strong> <strong>#define PIarr(a,n,m) rep(aa,n){rep(bb, m)cout&lt;&lt;a[aa][bb]&lt;&lt;” “;cout&lt;&lt;endl;}</strong> <strong>const double EPS = 1e-9 ;</strong> <strong>/*  ////////////////////////   C o d i n g  S p a c e   ////////////////////////  */</strong> <strong>struct Edge</strong> <strong>{</strong> **    Edge(){}** **    Edge(int a,int b,int c,int d):v(a),f(b),w(c),nxt(d){}** **    int v,f,w,nxt;** <strong>};</strong> <strong>struct MCMF{</strong> **    int n,lmt;** **    int g[maxn+10];** **    Edge e[maxm+10];//maxm最大边数** **    int nume;** **    int src,sink;** **    void init(){** **        nume=1;** **        cle(g,0);** **    }** **    void Addedge(int u,int v,int c,int w){//u-&gt;v,容量为c费用为w的边** **        e[++nume]=(Edge){v,c,w,g[u]};** **        g[u]=nume;** **        e[++nume]=(Edge){u,0,-w,g[v]};** **        g[v]=nume;** **    }** **    queue<int> que;** **    bool inQue[maxn+10];** **    int dist[maxn+10];** **    int prev[maxn+10],pree[maxn+10];** **    bool Spfa(){** **        while(!que.empty()) que.pop();** **        que.push(src);** **        cle(dist,63);** **        dist[src]=0;** **        inQue[src]=true;** **        while(!que.empty()){** **            int u=que.front();** **            que.pop();** **            for(int i=g[u];i;i=e[i].nxt){** **                if(e[i].f&gt;0 &amp;&amp; dist[u]+e[i].w&lt;dist[e[i].v]){** **                    dist[e[i].v]=dist[u]+e[i].w;** **                    prev[e[i].v]=u;** **                    pree[e[i].v]=i;** **                    if(!inQue[e[i].v]){** **                        inQue[e[i].v]=true;** **                        que.push(e[i].v);** **                    }** **                }** **            }** **            inQue[u]=false;** **        }** **        if(dist[sink]&lt;INF) return true; else return false;** **    }** **    int augment(){** **        int u=sink;** **        int delta=INF;** **        while(u!=src){** **            if(e[pree[u]].f&lt;delta) delta=e[pree[u]].f;** **            u=prev[u];** **        }** **        u=sink;** **        while(u!=src){** **            e[pree[u]].f-=delta;** **            e[pree[u]^1].f+=delta;** **            u=prev[u];** **        }** **        return dist[sink]<em>delta;*</em> **    }** **    ll mincostflow(){** **        ll cur=0;** **        while(Spfa()){** **            cur+=augment();** **  //          if(cur&lt;ans) ans=cur;** **        }** **        return cur;** **    }** <strong>};</strong></int></p>\n</blockquote>\n","text":"【前向星存储法】#include  #include &lt;string.h&gt; #include  using namespace std; int head[10005]; //存储起点为Vi的第一条边的位置 struct note{ **    int xx,yy,w","link":"","raw":null,"photos":[],"categories":[{"name":"未分类","slug":"未分类","count":16,"path":"api/categories/未分类.json"},{"name":"模板","slug":"未分类/模板","count":3,"path":"api/categories/未分类/模板.json"}],"tags":[]}]}