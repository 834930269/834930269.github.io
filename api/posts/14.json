{"total":369,"pageSize":10,"pageCount":37,"data":[{"title":"Java 包","slug":"java-package","date":"2018-01-12T12:24:34.000Z","updated":"2019-07-03T13:51:36.860Z","comments":true,"path":"api/articles/java-package.json","excerpt":"","keywords":null,"cover":"http://stepimagewm.how2j.cn/612.png","content":"<p>首先我在这里贴一下四种修饰词的作用域: <a href=\"http://stepimagewm.how2j.cn/612.png\" target=\"_blank\" rel=\"noopener\"><img src=\"http://stepimagewm.how2j.cn/612.png\" alt></a> 比如我们将hero类放在 <code>包</code>:<code>charactor</code> 下</p>\n<pre><code>package charactor;\n\npublic class Hero {\n\n    String name; //姓名\n\n    float hp; //血量\n\n    float armor; //护甲\n\n    int moveSpeed; //移动速度\n\n    public Hero(){\n\n    }\n\n    public Hero(String name,float hp){\n        this.name = name;\n        this.hp = hp;\n    }\n\n    //复活\n    public void revive(Hero h){\n        h = new Hero(&quot;提莫&quot;,383);\n    }\n}</code></pre><p>我们将武器放在 <code>包</code>:<code>property</code> 中:</p>\n<pre><code>//Item.java\npackage property;\n\n//类继承\n//物品类\npublic class Item{\n    String name;\n    int price;\n}\n\n//Weapon.java\npackage property;\n\npublic class Weapon extends Item{\n    int damage;//攻击力\n}</code></pre><p>当你想引用其他包中的类时,需要使用 <code>import</code> <code>包名.类名</code></p>\n<pre><code>package charactor;\n//Weapon类在其他包里，使用必须进行import\nimport property.Weapon;\n\npublic class Hero {\n\n    String name; //姓名\n\n    float hp; //血量\n\n    float armor; //护甲\n\n    int moveSpeed; //移动速度\n\n    public Hero(){\n\n    }\n\n    public Hero(String name,float hp){\n        this.name = name;\n        this.hp = hp;\n    }\n\n    //复活\n    public void revive(Hero h){\n        h = new Hero(&quot;提莫&quot;,383);\n    }\n    //装备一把武器\n    public void equip(Weapon w){\n\n    }\n}</code></pre><h1><span id=\"包与包之间的关系\">包与包之间的关系</span></h1><p><a href=\"http://stepimagewm.how2j.cn/605.png\" target=\"_blank\" rel=\"noopener\"><img src=\"http://stepimagewm.how2j.cn/605.png\" alt></a> 类和类之间的关系有如下几种: 以Hero为例 自身：指的是Hero自己 同包子类：ADHero这个类是Hero的子类，并且和Hero处于同一个包下 不同包子类：Support这个类是Hero的子类，但是在另一个包下 同包类： GiantDragon 这个类和Hero是同一个包，但是彼此没有继承关系 其他类：Item这个类，在不同包，也没有继承关系的类</p>\n","text":"首先我在这里贴一下四种修饰词的作用域:  [Figure]  类和类之间的关系有如下几种: 以Hero为例 自身：指的是Hero自己 同包子类：ADHero这个类是Hero的子类，并且和Hero处于同一个包下 不同包子类：Support这个类是Hero的子类，但是在另一个包下 同","link":"","raw":null,"photos":[],"categories":[{"name":"Java","slug":"Java","count":21,"path":"api/categories/Java.json"}],"tags":[{"name":"Java","slug":"Java","count":21,"path":"api/tags/Java.json"}]},{"title":"Java 类与对象","slug":"java-class-object","date":"2018-01-12T12:08:47.000Z","updated":"2019-07-03T13:51:36.860Z","comments":true,"path":"api/articles/java-class-object.json","excerpt":"","keywords":null,"cover":null,"content":"<p>这里仅记录学习过程中与其他语言相差较大的部分.</p>\n<pre><code>//简单类\npublic class Hero {\n    String name;//姓名\n    float hp;//血量\n    float armor;//护甲\n    int moveSpeed;//移动速度\n    // 方法名和类名一样（包括大小写）\n    // 没有返回类型\n    public Hero() {\n        System.out.println(&quot;实例化一个对象的时候，必然调用构造方法&quot;);\n    }\n\n    //构造方法重载\n    //带一个参数的构造方法\n    public Hero(String heroname){ \n        name = heroname;\n    }\n\n    //带两个参数的构造方法\n    public Hero(String heroname,float herohp){ \n        this.name = heroname;\n        this.hp = herohp;\n    }\n\n    //复活\n    //这里一个问题,传进来的引用指向哪个示例?\n    public void revive(Hero h){\n        h = new Hero(&quot;提莫&quot;,383);\n    }\n\n    public static void main(String[] args){\n        //创建一个对象\n        new Hero();\n        //创建一个引用来指向这个对象\n        Hero h = new Hero(&quot;提莫&quot;,383);    \n        //挂了\n        h.hp -=400;\n        //复活\n        h.revive(h);\n        System.out.println(h.hp);\n        //输出 -17.0,证明指向的实例没变\n    }\n}\n\n\n\n//类继承\n//物品类\npublic class Item{\n    String name;\n    int price;\n}\n\n\n\n//武器类,继承Item\npublic class Weapon extends Item{\n    int damage;//攻击力\n    public static void main(String[] args){\n        Weapon  infinityEdge= new Weapon();\n        infinityEdge.damage = 65; //damage属性在类Weapon中新设计的\n\n        infinityEdge.name = &quot;无尽之刃&quot;;//name属性，是从Item中继承来的，就不需要重复设计了\n        infinityEdge.price = 3600;      \n    }\n}</code></pre><p>Java属性初始化与其他相比不同的几个方式: 1.对象属性(实例化后的类)</p>\n<pre><code>//块初始化\n\npackage charactor;\n\npublic class Hero {\n    //直接初始化\n    public String name = &quot;some hero&quot;; //声明该属性的时候初始化\n    protected float hp;\n    //块初始化\n    float maxHP;\n\n    {\n        maxHP = 200; //初始化块\n    }  \n    //构造方法初始化\n    public Hero(){\n        hp = 100; //构造方法中初始化\n    }\n}</code></pre><p>2.类属性初始化</p>\n<pre><code>package charactor;\n\npublic class Hero {\n    public String name;\n    protected float hp;\n    float maxHP;\n\n    //物品栏的容量\n    public static int itemCapacity=8; //声明的时候 初始化\n\n    //通过静态块初始化\n    static{\n        itemCapacity = 6;//静态初始化块 初始化\n    }\n\n    public Hero(){\n\n    }\n\n    public static void main(String[] args) {\n        System.out.println(Hero.itemCapacity);\n    }\n\n}</code></pre>","text":"这里仅记录学习过程中与其他语言相差较大的部分.//简单类public class Hero {    String name;//姓名    float hp;//血量    float armor;//护甲    int moveSpeed;//移动速度    // 方法名和类","link":"","raw":null,"photos":[],"categories":[{"name":"Java","slug":"Java","count":21,"path":"api/categories/Java.json"}],"tags":[{"name":"Java","slug":"Java","count":21,"path":"api/tags/Java.json"}]},{"title":"Pygame constants.py","slug":"pygame-constants-py","date":"2018-01-09T08:46:01.000Z","updated":"2019-07-03T13:51:36.860Z","comments":true,"path":"api/articles/pygame-constants-py.json","excerpt":"","keywords":null,"cover":null,"content":"<h1><span id=\"一些按键相关以及一些屏幕处理的常量\">一些按键相关,以及一些屏幕处理的常量</span></h1><pre><code># encoding: utf-8\n# module pygame.constants\n# from D:\\Software\\AnAconda\\lib\\site-packages\\pygame\\constants.cp36-win_amd64.pyd\n# by generator 1.145\n&quot;&quot;&quot; Constants defined by SDL and needed in Pygame. &quot;&quot;&quot;\n# no imports\n\n# Variables with simple values\n\nACTIVEEVENT = 1\n\nANYFORMAT = 268435456\n\nASYNCBLIT = 4\n\nAUDIO_S16 = 32784\nAUDIO_S16LSB = 32784\nAUDIO_S16MSB = 36880\nAUDIO_S16SYS = 32784\nAUDIO_S8 = 32776\nAUDIO_U16 = 16\nAUDIO_U16LSB = 16\nAUDIO_U16MSB = 4112\nAUDIO_U16SYS = 16\nAUDIO_U8 = 8\n\nBIG_ENDIAN = 4321\n\nBLEND_ADD = 1\nBLEND_MAX = 5\nBLEND_MIN = 4\nBLEND_MULT = 3\nBLEND_PREMULTIPLIED = 17\n\nBLEND_RGBA_ADD = 6\nBLEND_RGBA_MAX = 16\nBLEND_RGBA_MIN = 9\nBLEND_RGBA_MULT = 8\nBLEND_RGBA_SUB = 7\n\nBLEND_RGB_ADD = 1\nBLEND_RGB_MAX = 5\nBLEND_RGB_MIN = 4\nBLEND_RGB_MULT = 3\nBLEND_RGB_SUB = 2\n\nBLEND_SUB = 2\n\nBUTTON_X1 = 6\nBUTTON_X2 = 7\n\nDOUBLEBUF = 1073741824\n\nFULLSCREEN = -2147483648\n\nGL_ACCELERATED_VISUAL = 15\n\nGL_ACCUM_ALPHA_SIZE = 11\n\nGL_ACCUM_BLUE_SIZE = 10\n\nGL_ACCUM_GREEN_SIZE = 9\n\nGL_ACCUM_RED_SIZE = 8\n\nGL_ALPHA_SIZE = 3\n\nGL_BLUE_SIZE = 2\n\nGL_BUFFER_SIZE = 4\n\nGL_DEPTH_SIZE = 6\n\nGL_DOUBLEBUFFER = 5\n\nGL_GREEN_SIZE = 1\n\nGL_MULTISAMPLEBUFFERS = 13\nGL_MULTISAMPLESAMPLES = 14\n\nGL_RED_SIZE = 0\n\nGL_STENCIL_SIZE = 7\n\nGL_STEREO = 12\n\nGL_SWAP_CONTROL = 16\n\nHAT_CENTERED = 0\nHAT_DOWN = 4\nHAT_LEFT = 8\nHAT_LEFTDOWN = 12\nHAT_LEFTUP = 9\nHAT_RIGHT = 2\nHAT_RIGHTDOWN = 6\nHAT_RIGHTUP = 3\nHAT_UP = 1\n\nHWACCEL = 256\nHWPALETTE = 536870912\nHWSURFACE = 1\n\nIYUV_OVERLAY = 1448433993\n\nJOYAXISMOTION = 7\nJOYBALLMOTION = 8\nJOYBUTTONDOWN = 10\nJOYBUTTONUP = 11\nJOYHATMOTION = 9\n\nKEYDOWN = 2\nKEYUP = 3\n\nKMOD_ALT = 768\nKMOD_CAPS = 8192\nKMOD_CTRL = 192\nKMOD_LALT = 256\nKMOD_LCTRL = 64\nKMOD_LMETA = 1024\nKMOD_LSHIFT = 1\nKMOD_META = 3072\nKMOD_MODE = 16384\nKMOD_NONE = 0\nKMOD_NUM = 4096\nKMOD_RALT = 512\nKMOD_RCTRL = 128\nKMOD_RMETA = 2048\nKMOD_RSHIFT = 2\nKMOD_SHIFT = 3\n\nK_0 = 48\nK_1 = 49\nK_2 = 50\nK_3 = 51\nK_4 = 52\nK_5 = 53\nK_6 = 54\nK_7 = 55\nK_8 = 56\nK_9 = 57\nK_a = 97\nK_AMPERSAND = 38\nK_ASTERISK = 42\nK_AT = 64\nK_b = 98\nK_BACKQUOTE = 96\nK_BACKSLASH = 92\nK_BACKSPACE = 8\nK_BREAK = 318\nK_c = 99\nK_CAPSLOCK = 301\nK_CARET = 94\nK_CLEAR = 12\nK_COLON = 58\nK_COMMA = 44\nK_d = 100\nK_DELETE = 127\nK_DOLLAR = 36\nK_DOWN = 274\nK_e = 101\nK_END = 279\nK_EQUALS = 61\nK_ESCAPE = 27\nK_EURO = 321\nK_EXCLAIM = 33\nK_f = 102\nK_F1 = 282\nK_F10 = 291\nK_F11 = 292\nK_F12 = 293\nK_F13 = 294\nK_F14 = 295\nK_F15 = 296\nK_F2 = 283\nK_F3 = 284\nK_F4 = 285\nK_F5 = 286\nK_F6 = 287\nK_F7 = 288\nK_F8 = 289\nK_F9 = 290\nK_FIRST = 0\nK_g = 103\nK_GREATER = 62\nK_h = 104\nK_HASH = 35\nK_HELP = 315\nK_HOME = 278\nK_i = 105\nK_INSERT = 277\nK_j = 106\nK_k = 107\nK_KP0 = 256\nK_KP1 = 257\nK_KP2 = 258\nK_KP3 = 259\nK_KP4 = 260\nK_KP5 = 261\nK_KP6 = 262\nK_KP7 = 263\nK_KP8 = 264\nK_KP9 = 265\n\nK_KP_DIVIDE = 267\nK_KP_ENTER = 271\nK_KP_EQUALS = 272\nK_KP_MINUS = 269\nK_KP_MULTIPLY = 268\nK_KP_PERIOD = 266\nK_KP_PLUS = 270\n\nK_l = 108\nK_LALT = 308\nK_LAST = 323\nK_LCTRL = 306\nK_LEFT = 276\nK_LEFTBRACKET = 91\nK_LEFTPAREN = 40\nK_LESS = 60\nK_LMETA = 310\nK_LSHIFT = 304\nK_LSUPER = 311\nK_m = 109\nK_MENU = 319\nK_MINUS = 45\nK_MODE = 313\nK_n = 110\nK_NUMLOCK = 300\nK_o = 111\nK_p = 112\nK_PAGEDOWN = 281\nK_PAGEUP = 280\nK_PAUSE = 19\nK_PERIOD = 46\nK_PLUS = 43\nK_POWER = 320\nK_PRINT = 316\nK_q = 113\nK_QUESTION = 63\nK_QUOTE = 39\nK_QUOTEDBL = 34\nK_r = 114\nK_RALT = 307\nK_RCTRL = 305\nK_RETURN = 13\nK_RIGHT = 275\nK_RIGHTBRACKET = 93\nK_RIGHTPAREN = 41\nK_RMETA = 309\nK_RSHIFT = 303\nK_RSUPER = 312\nK_s = 115\nK_SCROLLOCK = 302\nK_SEMICOLON = 59\nK_SLASH = 47\nK_SPACE = 32\nK_SYSREQ = 317\nK_t = 116\nK_TAB = 9\nK_u = 117\nK_UNDERSCORE = 95\nK_UNKNOWN = 0\nK_UP = 273\nK_v = 118\nK_w = 119\nK_x = 120\nK_y = 121\nK_z = 122\n\nLIL_ENDIAN = 1234\n\nMOUSEBUTTONDOWN = 5\nMOUSEBUTTONUP = 6\nMOUSEMOTION = 4\n\nNOEVENT = 0\nNOFRAME = 32\n\nNUMEVENTS = 32\n\nOPENGL = 2\nOPENGLBLIT = 10\n\nPREALLOC = 16777216\n\nQUIT = 12\n\nRESIZABLE = 16\n\nRLEACCEL = 16384\nRLEACCELOK = 8192\n\nSCRAP_BMP = &apos;image/bmp&apos;\nSCRAP_CLIPBOARD = 0\nSCRAP_PBM = &apos;image/pbm&apos;\nSCRAP_PPM = &apos;image/ppm&apos;\nSCRAP_SELECTION = 1\nSCRAP_TEXT = &apos;text/plain&apos;\n\nSRCALPHA = 65536\nSRCCOLORKEY = 4096\n\nSWSURFACE = 0\n\nSYSWMEVENT = 13\n\nTIMER_RESOLUTION = 10\n\nUSEREVENT = 24\n\nUSEREVENT_DROPFILE = 4096\n\nUYVY_OVERLAY = 1498831189\n\nVIDEOEXPOSE = 17\nVIDEORESIZE = 16\n\nYUY2_OVERLAY = 844715353\n\nYV12_OVERLAY = 842094169\n\nYVYU_OVERLAY = 1431918169\n\n# no functions\n# no classes\n# variables with complex values\n\n__loader__ = None # (!) real value is &apos;&apos;\n\n__spec__ = None # (!) real value is &apos;&apos;</code></pre>","text":"一些按键相关,以及一些屏幕处理的常量# encoding: utf-8# module pygame.constants# from D:\\Software\\AnAconda\\lib\\site-packages\\pygame\\constants.cp36-win_amd64.py","link":"","raw":null,"photos":[],"categories":[{"name":"pygame","slug":"pygame","count":3,"path":"api/categories/pygame.json"},{"name":"Python","slug":"pygame/Python","count":3,"path":"api/categories/pygame/Python.json"},{"name":"游戏制作","slug":"pygame/Python/游戏制作","count":3,"path":"api/categories/pygame/Python/游戏制作.json"}],"tags":[{"name":"Python","slug":"Python","count":65,"path":"api/tags/Python.json"},{"name":"游戏制作","slug":"游戏制作","count":4,"path":"api/tags/游戏制作.json"},{"name":"pygame","slug":"pygame","count":3,"path":"api/tags/pygame.json"}]},{"title":"ALDS1_4_C Dictionary","slug":"alds1-4-c-dictionary","date":"2018-01-08T10:47:39.000Z","updated":"2019-07-03T13:51:36.860Z","comments":true,"path":"api/articles/alds1-4-c-dictionary.json","excerpt":"","keywords":null,"cover":null,"content":"<p>原题连接: <a href=\"https://vjudge.net/problem/Aizu-ALDS1_4_C\" title=\"https://vjudge.net/problem/Aizu-ALDS1_4_C\" target=\"_blank\" rel=\"noopener\">https://vjudge.net/problem/Aizu-ALDS1_4_C</a> 题型: 开放式散列表(可以用c++库函数做,但那样就忒没诚意了是啊吧 :triumph: ) PS:对于散列表性能影响最大的一般是散列函数.如果出现TLE,证明散列函数出问题了,改改试试. Code:</p>\n<pre><code>/*\n//alds1_4_c:Dictionary\n//算法:开放地址法散列表\n//Time: 2018/1/8 星期一\n*/\n#include&lt;stdio.h&gt;\n#include&lt;string.h&gt;\n\nconst int M=1000003;\nconst int L=14;\n\nchar H[M][L];\n\n//对于每个字符返回的定义值\nint getChar(char ch){\n    if(ch==&apos;A&apos;) return 1;\n    if(ch==&apos;C&apos;) return 2;\n    if(ch==&apos;D&apos;) return 3;\n    if(ch==&apos;T&apos;) return 4;\n    return 0;\n}\n//对于字符串返回的初始散列值\nlong long getKey(char str[]){\n    long long len=strlen(str),sum=0,p=1;\n    for(int i=0;i&lt;len;++i){\n        sum+=p*getChar(str[i]);\n        //每次获取定义值后p*5,相当于转换成五进制,不会冲突\n        p*=5;\n    }\n    return sum;\n}\n\n//开放式散列值计算式: h(k,i)=(h1(k)+i*h2(k))%M\nint h1(int key){\n    return key%M;\n}\n//为了保证不会递归冲突(即往下算结果始终相同),必须使h2(key)与M互素\n//TLE最好的情况就是改这个函数= =\n//目前可以AC的: 1+(key%(M-1))\n//(1+key)%(M-1)\nint h2(int key){\n    return (1+key)%(M-1);\n}\n\n//查找\n//-1表示找到\n//h表示找到第一个可插入点\nint find(char str[]){\n    long long key=getKey(str),i,h;\n    for(i=0;;++i){\n        h=(h1(key)+i*h2(key))%M;\n        if(strcmp(H[h],str)==0) return -1;\n        else if(strlen(H[h])==0) return h;\n    }\n    return 0;\n}\n\n//插入\nvoid insert(char str[]){\n    int key=find(str);\n    if(key!=-1) strcpy(H[key],str);\n}\n\nint main(){\n    for(int i=0;i&lt;M;++i) H[M][0]=&apos;\\0&apos;;\n    char str[L],com[L];\n    int n;\n    scanf(&quot;%d&quot;,&amp;n);\n    for(int i=0;i&lt;n;++i){\n        scanf(&quot;%s %s&quot;,com,str);\n\n        if(com[0]==&apos;i&apos;){\n            insert(str);\n        }else{\n            if(find(str)==-1)\n                printf(&quot;yes\\n&quot;);\n            else\n                printf(&quot;no\\n&quot;);\n        }\n    }\n\n    return 0;\n}</code></pre>","text":"原题连接: https://vjudge.net/problem/Aizu-ALDS1_4_C 题型: 开放式散列表(可以用c++库函数做,但那样就忒没诚意了是啊吧 :triumph: ) PS:对于散列表性能影响最大的一般是散列函数.如果出现TLE,证明散列函数出问题了,改改试","link":"","raw":null,"photos":[],"categories":[{"name":"AOJ","slug":"AOJ","count":5,"path":"api/categories/AOJ.json"},{"name":"散列表","slug":"AOJ/散列表","count":1,"path":"api/categories/AOJ/散列表.json"}],"tags":[{"name":"AOJ","slug":"AOJ","count":5,"path":"api/tags/AOJ.json"},{"name":"散列表","slug":"散列表","count":1,"path":"api/tags/散列表.json"}]},{"title":"python 机器学习 科学计算库","slug":"python-sklearn-moudle","date":"2018-01-08T08:34:43.000Z","updated":"2019-07-03T13:51:36.860Z","comments":true,"path":"api/articles/python-sklearn-moudle.json","excerpt":"","keywords":null,"cover":null,"content":"<h1><span id=\"jupyter-notebook\">Jupyter Notebook</span></h1><p><strong>math Last Checkpoint: a few seconds ago (autosaved) [Python 3]</strong> <strong>Python 3</strong> <strong>Code:</strong></p>\n<pre><code>import numpy as np\n\nnp.arange(10)\n\narray([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\n\na=np.arange(10)\n\n#可以直接对数组进行运算\n\na = a ** 2\n\na\n\narray([ 0,  1,  4,  9, 16, 25, 36, 49, 64, 81], dtype=int32)\n\n​\n\n#Scipy\n\n#用来做高等数学等计算的包\n\nfrom scipy import linalg\n\n#生成一个二维数组\n\nA = np.array([[1,2],[3,4]])\n\nA\n\narray([[1, 2],\n       [3, 4]])\n\n#计算行列式的值\n\n#1*4-2*3\n\nlinalg.det(A)\n\n​\n\n-2.0\n\n#Pandas\n\n#是一种构建于Numpy的高级数据结构和精巧工具,快速简单的处理数据\n\nimport pandas as pd\n\n#序列\n\ns = pd.Series([1,3,5,np.nan,6,8])\n\ns\n\n0    1.0\n1    3.0\n2    5.0\n3    NaN\n4    6.0\n5    8.0\ndtype: float64\n\n#时间数组,起始时间到六天\n\ndates = pd.date_range(&apos;20130101&apos;,periods=6)\n\ndates\n\nDatetimeIndex([&apos;2013-01-01&apos;, &apos;2013-01-02&apos;, &apos;2013-01-03&apos;, &apos;2013-01-04&apos;,\n               &apos;2013-01-05&apos;, &apos;2013-01-06&apos;],\n              dtype=&apos;datetime64[ns]&apos;, freq=&apos;D&apos;)\n\n#生成表格\n\n#index:行标识\n\n#columns:列标识\n\n#rand是0-1的均匀分布，randn是均值为0方差为1的正态分布；\n\n#rand(n)或randn(n)生成n*n的随机数矩阵。\n\n#rand(n,m)或randn(m,n)生成m*n的随机数矩阵。\n\ndf = pd.DataFrame(np.random.randn(6,4),index=dates,columns=list(&apos;ABCD&apos;))\n\ndf\n\n    A   B   C   D\n2013-01-01  1.210884    0.616424    0.961066    0.173936\n2013-01-02  0.358245    0.506724    -0.047834   0.587061\n2013-01-03  -0.508396   0.012049    -0.114224   -1.195929\n2013-01-04  2.303441    0.536666    -1.013810   -0.574154\n2013-01-05  -1.327828   -0.003089   0.662432    0.038886\n2013-01-06  1.379826    1.554135    -0.681174   -0.816094\n\n#通过B列降序排序\n\ndf.sort_values(by=&apos;B&apos;)\n\n#从上到下多少行\n\n#df.head()\n\n#从下到上多少行\n\n#df.tail()\n\n#所有值和描述\n\n#df.describe()\n\n#转置\n\n#df.T\n\n​\n\n    A   B   C   D\n2013-01-01  1.210884    0.616424    0.961066    0.173936\n2013-01-02  0.358245    0.506724    -0.047834   0.587061\n2013-01-03  -0.508396   0.012049    -0.114224   -1.195929\n2013-01-04  2.303441    0.536666    -1.013810   -0.574154\n2013-01-05  -1.327828   -0.003089   0.662432    0.038886\n\n#绘图\n\nimport matplotlib.pyplot as plt\n\nplt.plot([1,2,3])\n\nplt.ylabel(&apos;some numbers&apos;)\n\nplt.show()\n\n​</code></pre>","text":"Jupyter Notebookmath Last Checkpoint: a few seconds ago (autosaved) [Python 3] Python 3 Code:import numpy as npnp.arange(10)array([0, 1, 2, ","link":"","raw":null,"photos":[],"categories":[{"name":"Python","slug":"Python","count":41,"path":"api/categories/Python.json"},{"name":"机器学习","slug":"Python/机器学习","count":2,"path":"api/categories/Python/机器学习.json"},{"name":"相关库","slug":"Python/机器学习/相关库","count":1,"path":"api/categories/Python/机器学习/相关库.json"}],"tags":[{"name":"Python","slug":"Python","count":65,"path":"api/tags/Python.json"},{"name":"机器学习","slug":"机器学习","count":4,"path":"api/tags/机器学习.json"}]},{"title":"使用django搭建的文件上传系统","slug":"use-django-fileshare","date":"2018-01-08T02:17:42.000Z","updated":"2019-07-03T13:51:36.860Z","comments":true,"path":"api/articles/use-django-fileshare.json","excerpt":"","keywords":null,"cover":null,"content":"<p>link -&gt; <a href=\"http://be-sunshine.cn:9011\" title=\"http://be-sunshine.cn:9011\" target=\"_blank\" rel=\"noopener\">http://be-sunshine.cn:9011</a></p>\n<h1><span id=\"关于-这个仓库\"><strong>关于</strong> 这个仓库…</span></h1><ol>\n<li><p>上传文件大小最大不能超过… 5M</p>\n</li>\n<li><p>请妥善保存文件的备份连接.</p>\n</li>\n</ol>\n","text":"link -&gt; http://be-sunshine.cn:9011关于 这个仓库…上传文件大小最大不能超过… 5M请妥善保存文件的备份连接.","link":"","raw":null,"photos":[],"categories":[{"name":"django","slug":"django","count":2,"path":"api/categories/django.json"},{"name":"Python","slug":"django/Python","count":2,"path":"api/categories/django/Python.json"},{"name":"Web","slug":"django/Python/Web","count":2,"path":"api/categories/django/Python/Web.json"}],"tags":[{"name":"Python","slug":"Python","count":65,"path":"api/tags/Python.json"},{"name":"Web","slug":"Web","count":7,"path":"api/tags/Web.json"},{"name":"django","slug":"django","count":2,"path":"api/tags/django.json"}]},{"title":"python web django","slug":"python-web-django","date":"2018-01-07T13:39:23.000Z","updated":"2019-07-03T13:51:36.860Z","comments":true,"path":"api/articles/python-web-django.json","excerpt":"","keywords":null,"cover":null,"content":"<p>Django的模板语法，如下:</p>\n<pre><code>{ {}} :用于变量替换。\n{%for i in content%}{ {i}}{%endfor%} : for 循环\n{%extends \"base.html\"%} : 用于指定父模板文件\n{%block name %} ··· {%endblock%} :用于指定被替换的内容,内容名称为 name.\n{%if 条件%} .....{% elif 条件%} ....{%else%}... {%endif%} :用于 if 语句</code></pre><p>常用的 ORM 查询操作:</p>\n<pre><code>ModelName.object.all() #返回 model 的所有数据集\n\nModelName.object.filter(**kwargs) #返回符合筛选条件的数据集\n\nModelName.object.exclude(**kwargs) #返回不符合筛选条件的数据集\n\nModelName.object.get(**kwargs) #用于查询单条记录</code></pre><h1><span id=\"创建数据\">创建数据</span></h1><pre><code># 第一种方式\n# models.UserInfo.objects.create(username=&quot;root&quot;,password=&quot;123&quot;)\n# 第二种方式\n# obj = models.UserInfo(username=&apos;fzh&apos;, password=&quot;iajtag&quot;)\n# obj.save()\n# 第三种方式\n# dic = {&apos;username&apos;:&apos;fgf&apos;, &apos;password&apos;:&apos;666&apos;}\n# models.UserInfo.objects.create(**dic)</code></pre><h1><span id=\"查询数据\">查询数据</span></h1><pre><code># result = models.UserInfo.objects.all()  # 查询所有，为QuerySet类型，可理解成列表\n# result = models.UserInfo.objects.filter(username=&quot;fgf&quot;,password=&quot;666&quot;)  # 列表\n# result = models.UserInfo.objects.filter(username=&quot;fgf&quot;).first()  # 对象\n# 条件查询。filter 相当于where查询条件，里面的&quot;，&quot;会组成and条件\n# for row in result:  # 打印查询到数据。\n#     print(row.id,row.username,row.password)\n\n# 查看QuerySet类型具体做了什么事情，可以： print(result.query)</code></pre><h1><span id=\"删除数据\">删除数据</span></h1><pre><code># models.UserInfo.objects.all().delete()  # 删除所有\n# models.UserInfo.objects.filter(id=4).delete()  # 删除所有</code></pre><h1><span id=\"更新数据\">更新数据</span></h1><pre><code># models.UserInfo.objects.all().update(password=8888)\n# models.UserInfo.objects.filter(id=3).update(password=888888)</code></pre><p>数据库(ORM)操作相关: 如果想要完全删除migrations(使用sqllite时),需要将所有缓存文件/夹都删掉 然后新建一个空的migrations</p>\n<blockquote>\n<p>python manage.py makemigrations –empty (你的app名字) python manage.py makemigrations python manage.py migrate 解决!</p>\n</blockquote>\n","text":"Django的模板语法，如下:{ {}} :用于变量替换。{%for i in content%}{ {i}}{%endfor%} : for 循环{%extends \"base.html\"%} : 用于指定父模板文件{%block name %} ··· {%endblock%","link":"","raw":null,"photos":[],"categories":[{"name":"django","slug":"django","count":2,"path":"api/categories/django.json"},{"name":"Python","slug":"django/Python","count":2,"path":"api/categories/django/Python.json"},{"name":"Web","slug":"django/Python/Web","count":2,"path":"api/categories/django/Python/Web.json"}],"tags":[{"name":"Python","slug":"Python","count":65,"path":"api/tags/Python.json"},{"name":"Web","slug":"Web","count":7,"path":"api/tags/Web.json"},{"name":"django","slug":"django","count":2,"path":"api/tags/django.json"}]},{"title":"pygame 碰撞检测","slug":"pygame-collision-detection","date":"2017-12-30T14:59:50.000Z","updated":"2019-07-03T13:51:36.859Z","comments":true,"path":"api/articles/pygame-collision-detection.json","excerpt":"","keywords":null,"cover":null,"content":"<p>碰撞检测 即两个Sprite是否碰撞-重叠之类的(你懂得) :horse_racing: github: <a href=\"https://github.com/834930269/Pygame-Learn/tree/master/EatApple\" title=\"https://github.com/834930269/Pygame-Learn/tree/master/EatApple\" target=\"_blank\" rel=\"noopener\">https://github.com/834930269/Pygame-Learn/tree/master/EatApple</a> 吃苹果游戏:</p>\n<pre><code># MyLibrary.py\nfrom pygame import *\nimport sys, time, random, math, pygame\n\ndef print_text(font,x,y,text,color=(255,255,255)):\n    imgText = font.render(text,True,color)\n    #req&apos;d when function moved into MyLibrary\n    screen = pygame.display.get_surface()\n    #移动\n    screen.blit(imgText,(x,y))\n\nclass MySprite(pygame.sprite.Sprite):\n    def __init__(self):\n        pygame.sprite.Sprite.__init__(self)\n        self.master_image = None\n        self.frame = 0\n        self.old_frame = -1\n        self.frame_width = 1\n        self.frame_height = 1\n        self.first_frame = 0\n        self.last_frame = 0\n        self.columns = 1\n        self.last_time = 0\n        self.row = 1\n        self.direction = 0\n        self.velocity = Point(0.0,0.0)\n\n    #x property\n    def _getx(self): return self.rect.x\n    def _setx(self,value): self.rect.x = value\n    X = property(_getx,_setx)\n\n    #y property\n    def _gety(self): return self.rect.y\n    def _sety(self,value): self.rect.y = value\n    Y = property(_gety,_sety)\n\n    # position property\n    def _getpos(self): return self.rect.topleft\n    def _setpos(self,pos):self.rect.topleft = pos\n    position = property(_getpos,_setpos)\n\n    # filename 帧图宽度,帧图高度,帧图行,帧图列\n    def load(self,filename,width,height,columns,row):\n        self.master_image = pygame.image.load(filename).convert_alpha()\n        self.frame_width = width\n        self.frame_height = height\n        self.rect = Rect(0,0,width,height)\n        self.columns = columns\n        self.row = row\n        rect = self.master_image.get_rect()\n        self.last_frame = (rect.width // width)*(rect.height // height) - 1\n\n    def update(self,current_time,rate=30):\n        if current_time &gt; self.last_time +rate:\n            self.frame += 1\n            if self.frame &gt; self.last_frame:\n                self.frame = self.first_frame\n            self.last_frame = current_time\n\n        if self.frame != self.old_frame:\n            frame_x = (self.frame % self.columns) * self.frame_width\n            #添加了row以后每次计算对row取余即可计算出当前列数\n            frame_y = (self.frame // self.columns) % self.row * self.frame_height\n            #如果把frame_y置为0,则表示始终都是在位图的第一行\n            # 多行的话,可以通过frame_y来解决,但是要注意,y=0则返回\n            rect = Rect(frame_x, frame_y, self.frame_width, self.frame_height)\n            self.image = self.master_image.subsurface(rect)\n            self.old_frame = self.frame\n\n    def __str__(self):\n        return str(self.frame) + &quot;,&quot; + str(self.first_frame) + \\\n            &quot;,&quot; + str(self.last_frame) + &quot;,&quot; + str(self.frame_width) + \\\n            &quot;,&quot; + str(self.frame_height) + &quot;,&quot; + str(self.columns) + \\\n            &quot;,&quot; + str(self.rect)\n\n#Point class\nclass Point(object):\n    def __init__(self,x,y):\n        self.__x = x\n        self.__y = y\n    #X property\n    def getx(self): return self.__x\n    def setx(self, x): self.__x = x\n    x = property(getx, setx)\n\n    #Y property\n    def gety(self): return self.__y\n    def sety(self, y): self.__y = y\n    y = property(gety, sety)\n\n    def __str__(self):\n        return &quot;{X:&quot; + &quot;{:.0f}&quot;.format(self.__x) + \\\n            &quot;,Y:&quot; + &quot;{:.0f}&quot;.format(self.__y) + &quot;}&quot;\n\n\n#app.py\nimport itertools, sys, time, random, math, pygame\nfrom pygame import *\nfrom MyLibrary import *\n\ndef calc_velocity(direction,vel=1.0):\n    velocity = Point(0,0)\n    if direction == 0 :#上\n        velocity.y = -vel\n    elif direction == 2:#右\n        velocity.x=vel\n    elif direction == 4:#下\n        velocity.y=vel\n    elif direction == 6:#左\n        velocity.x=-vel\n    return velocity\n\npygame.init()\nscreen = pygame.display.set_mode((800,600))\npygame.display.set_caption(&quot;吃苹果&quot;)\nfont = pygame.font.Font(None,36)\ntimer = pygame.time.Clock()\n\n#创建精灵组\nplayer_group = pygame.sprite.Group()\nfood_group = pygame.sprite.Group()\n\n#初始化玩家精灵组\nplayer = MySprite()\nplayer.load(&quot;farmer walk.png&quot;,96,96,8,8)\n#初始位置\nplayer.position = 80,80\n#初始方向\nplayer.direction = 4\n#添加进组\nplayer_group.add(player)\n\n#初始化食物精灵组\nfor n in range(1,50):\n    food = MySprite()\n    food.load(&quot;food_low.png&quot;,35,35,1,1)\n    #随机分布\n    food.position = random.randint(0,780),random.randint(0,580)\n    food_group.add(food)\n\ngame_over=False\nplayer_moving = False\nplayer_health = 0\n\nwhile True:\n    timer.tick(30)\n    ticks = pygame.time.get_ticks()\n\n    for event in pygame.event.get():\n        if event.type == QUIT:\n            pygame.quit()\n            sys.exit()\n    #获取当前按键\n    keys = pygame.key.get_pressed()\n    if keys[K_ESCAPE]:\n        sys.exit()\n    elif keys[K_UP] or keys[K_w]:#上\n        player.direction = 0\n        player_moving = True\n    elif keys[K_RIGHT] or keys[K_d]:#右\n        player.direction = 2\n        player_moving = True\n    elif keys[K_DOWN] or keys[K_s]:#下\n        player.direction = 4\n        player_moving = True\n    elif keys[K_LEFT] or keys[K_a]:#左\n        player.direction = 6\n        player_moving = True\n    else:\n        player_moving = False\n\n    if not game_over:\n        #根据角色方向不同,使用不同的动画帧\n        player.first_frame = player.direction * player.columns\n        player.last_frame = player.first_frame + player.columns-1\n        if player.frame &lt; player.first_frame:\n            player.frame = player.first_frame\n\n        if not player_moving:\n            # 当停止按键（即人物停止移动的时候），停止更新动画帧\n            player.frame = player.first_frame = player.last_frame\n        else:\n            player.velocity = calc_velocity(player.direction,1.5)\n            player.velocity.x *= 1.5\n            player.velocity.y *= 1.5\n\n        #更新玩家精灵组\n        player_group.update(ticks, 50)\n        # 移动玩家\n        if player_moving:\n            player.X += player.velocity.x\n            player.Y += player.velocity.y\n            if player.X &lt; 0:\n                player.X = 0\n            elif player.X &gt; 700:\n                player.X = 700\n            if player.Y &lt; 0:\n                player.Y = 0\n            elif player.Y &gt; 500:\n                player.Y = 500\n\n        attacker = None\n        #判断是否有碰撞产生\n        attacker = pygame.sprite.spritecollideany(player,food_group)\n        if attacker!=None:\n            #有,增加精度\n            if pygame.sprite.collide_circle_ratio(0.65)(player,attacker):\n                player_health += 2\n                food_group.remove(attacker)\n        if player_health &gt; 100:\n            player_health = 100\n        #更新食物精灵组\n        food_group.update(ticks,50)\n        if len(food_group)==0:\n            game_over = True\n\n    #清屏\n    screen.fill((50,50,100))\n    # 绘制精灵\n    food_group.draw(screen)\n    player_group.draw(screen)\n\n    # 绘制玩家血量条\n    pygame.draw.rect(screen, (50, 150, 50, 180), Rect(300, 570, player_health * 2, 25))\n    pygame.draw.rect(screen, (100, 200, 100, 180), Rect(300, 570, 200, 25), 2)\n\n    if game_over:\n        print_text(font, 300, 100, &quot;GAME OVER&quot;)\n\n    pygame.display.update()</code></pre><p>接下来才是难中之难…如果想要实现人物随场景移动. 估计要自己撸框架了. 大体思路如下: 1:近景(左侧)1/2前景不随人物移动 2:1/2以后景随人物移动 3:远景(右侧)1/2前景不随人物移动 4:景采用大地图形式,造可封装类(障碍物,场景地图,宽度,高度等信息) 5:考虑如何移动场景,数学公式想好,-移动方向,移动速度,景中心… 6:加油!</p>\n","text":"碰撞检测 即两个Sprite是否碰撞-重叠之类的(你懂得) :horse_racing: github: https://github.com/834930269/Pygame-Learn/tree/master/EatApple 吃苹果游戏:# MyLibrary.pyfrom","link":"","raw":null,"photos":[],"categories":[{"name":"pygame","slug":"pygame","count":3,"path":"api/categories/pygame.json"},{"name":"Python","slug":"pygame/Python","count":3,"path":"api/categories/pygame/Python.json"},{"name":"游戏制作","slug":"pygame/Python/游戏制作","count":3,"path":"api/categories/pygame/Python/游戏制作.json"}],"tags":[{"name":"Python","slug":"Python","count":65,"path":"api/tags/Python.json"},{"name":"游戏制作","slug":"游戏制作","count":4,"path":"api/tags/游戏制作.json"},{"name":"pygame","slug":"pygame","count":3,"path":"api/tags/pygame.json"}]},{"title":"pygame sprite","slug":"pygame-sprite","date":"2017-12-30T09:20:40.000Z","updated":"2019-07-03T13:51:36.859Z","comments":true,"path":"api/articles/pygame-sprite.json","excerpt":"","keywords":null,"cover":"http://be-sunshine.cn/wp-content/uploads/2017/12/mdm.png","content":"<p>自定义Sprite类: 让嗷大喵动起来! <a href=\"http://be-sunshine.cn/wp-content/uploads/2017/12/mdm.png\" target=\"_blank\" rel=\"noopener\"><img src=\"http://be-sunshine.cn/wp-content/uploads/2017/12/mdm.png\" alt></a> 以上图片叫做帧图,背景为空,和二维数组一样的用法. 这个帧图的行为4,列为1. 对网上别人自定义的MySprite类做了修改,使其变成列行同时循环. 学习项目地址: <a href=\"https://github.com/834930269/Pygame-Learn/tree/master/second\" title=\"pygame-learn-sprite\" target=\"_blank\" rel=\"noopener\">pygame-learn-sprite</a> <code>class MySprite</code></p>\n<pre><code>class MySprite(pygame.sprite.Sprite):\n    def __init__(self,target):\n        pygame.sprite.Sprite.__init__(self)\n        self.target_surface = target\n        self.image = None\n        self.master_image = None\n        self.rect = None\n        self.topleft = 0,0\n        self.frame = 0\n        self.old_frame = -1\n        self.frame_width = 1\n        self.frame_height = 1\n        self.first_frame = 0\n        self.last_frame = 0\n        self.columns = 1\n        self.last_time = 0\n        self.row = 1\n\n    # filename 帧图宽度,帧图高度,帧图行,帧图列\n    def load(self,filename,width,height,columns,row):\n        self.master_image = pygame.image.load(filename).convert_alpha()\n        self.frame_width = width\n        self.frame_height = height\n        self.rect = 0,0,width,height\n        self.columns = columns\n        self.row = row\n        rect = self.master_image.get_rect()\n        self.last_frame = (rect.width // width)*(rect.height // height) - 1\n\n    def update(self,current_time,rate=60):\n        if current_time &gt; self.last_time +rate:\n            self.frame += 1\n            if self.frame &gt; self.last_frame:\n                self.frame = self.first_frame\n            self.last_frame = current_time\n\n        if self.frame != self.old_frame:\n            frame_x = (self.frame % self.columns) * self.frame_width\n            #添加了row以后每次计算对row取余即可计算出当前列数\n            frame_y = (self.frame // self.columns) % self.row * self.frame_height\n            #如果把frame_y置为0,则表示始终都是在位图的第一行\n            # 多行的话,可以通过frame_y来解决,但是要注意,y=0则返回\n            rect = (frame_x, frame_y, self.frame_width, self.frame_height)\n            self.image = self.master_image.subsurface(rect)\n            self.old_frame = self.frame</code></pre><p>让嗷大喵动起来吧!!</p>\n<pre><code>import pygame\nfrom pygame import *\n\nclass MySprite(pygame.sprite.Sprite):\n    def __init__(self,target):\n        pygame.sprite.Sprite.__init__(self)\n        self.target_surface = target\n        self.image = None\n        self.master_image = None\n        self.rect = None\n        self.topleft = 0,0\n        self.frame = 0\n        self.old_frame = -1\n        self.frame_width = 1\n        self.frame_height = 1\n        self.first_frame = 0\n        self.last_frame = 0\n        self.columns = 1\n        self.last_time = 0\n        self.row = 1\n\n    # filename 帧图宽度,帧图高度,帧图行,帧图列\n    def load(self,filename,width,height,columns,row):\n        self.master_image = pygame.image.load(filename).convert_alpha()\n        self.frame_width = width\n        self.frame_height = height\n        self.rect = 0,0,width,height\n        self.columns = columns\n        self.row = row\n        rect = self.master_image.get_rect()\n        self.last_frame = (rect.width // width)*(rect.height // height) - 1\n\n    def update(self,current_time,rate=60):\n        if current_time &gt; self.last_time +rate:\n            self.frame += 1\n            if self.frame &gt; self.last_frame:\n                self.frame = self.first_frame\n            self.last_frame = current_time\n\n        if self.frame != self.old_frame:\n            frame_x = (self.frame % self.columns) * self.frame_width\n            #添加了row以后每次计算对row取余即可计算出当前列数\n            frame_y = (self.frame // self.columns) % self.row * self.frame_height\n            #如果把frame_y置为0,则表示始终都是在位图的第一行\n            # 多行的话,可以通过frame_y来解决,但是要注意,y=0则返回\n            rect = (frame_x, frame_y, self.frame_width, self.frame_height)\n            self.image = self.master_image.subsurface(rect)\n            self.old_frame = self.frame\n\npygame.init()\nscreen = pygame.display.set_mode((800,600),0,32)\npygame.display.set_caption(&quot;精灵测试&quot;)\nfont = pygame.font.Font(None,18)\nframerate = pygame.time.Clock()\n\ncat = MySprite(screen)\ncat.load(&quot;mdm.png&quot;,100,100,4,1)\ngroup = pygame.sprite.Group()\ngroup.add(cat)\n\nwhile True:\n    framerate.tick(100)\n    ticks = pygame.time.get_ticks()\n\n    for event in pygame.event.get():\n        if event.type == pygame.QUIT:\n            pygame.quit()\n            exit()\n    key = pygame.key.get_pressed()\n    if key[pygame.K_ESCAPE]:\n        exit()\n\n    screen.fill((0,0,100))\n\n    group.update(ticks)\n    group.draw(screen)\n    pygame.display.update()</code></pre>","text":"自定义Sprite类: 让嗷大喵动起来!  [Figure]  以上图片叫做帧图,背景为空,和二维数组一样的用法. 这个帧图的行为4,列为1. 对网上别人自定义的MySprite类做了修改,使其变成列行同时循环. 学习项目地址: pygame-learn-sprite class","link":"","raw":null,"photos":[],"categories":[{"name":"pygame","slug":"pygame","count":3,"path":"api/categories/pygame.json"},{"name":"Python","slug":"pygame/Python","count":3,"path":"api/categories/pygame/Python.json"},{"name":"游戏制作","slug":"pygame/Python/游戏制作","count":3,"path":"api/categories/pygame/Python/游戏制作.json"}],"tags":[{"name":"Python","slug":"Python","count":65,"path":"api/tags/Python.json"},{"name":"游戏制作","slug":"游戏制作","count":4,"path":"api/tags/游戏制作.json"},{"name":"pygame","slug":"pygame","count":3,"path":"api/tags/pygame.json"}]},{"title":"ASP.NET MVC 搭建博客 Song Of The Sea","slug":"asp-net-mvc-song-of-the-sea","date":"2017-12-26T01:01:15.000Z","updated":"2019-07-03T13:51:36.860Z","comments":true,"path":"api/articles/asp-net-mvc-song-of-the-sea.json","excerpt":"","keywords":null,"cover":"http://be-sunshine.cn/wp-content/uploads/2017/12/QQ%E6%88%AA%E5%9B%BE20171225232801.jpg","content":"<h1><span id=\"第五个博客上线了\">第五个博客上线了!</span></h1><p>这次使用的是ASP.NET MVC + Bootstrap3 + SignalR + 百度地图api + ajax无刷新更新页面等等…. 目标: Demo : <a href=\"http://hsdog.be-sunshine.cn\" target=\"_blank\" rel=\"noopener\">http://hsdog.be-sunshine.cn</a> ASP搭建的一个博客(部分重构之前python写的博客,大部分新添加的内容):一只划水狗 但本网站仅供交流和娱乐学习用,因为没有对标签进行处理,所以很容易就会被攻陷的.回头有空了在添加标签过滤功能. :) 代码等回头有空的时候放上来~ 预览: <a href=\"http://be-sunshine.cn/wp-content/uploads/2017/12/QQ截图20171225232801.jpg\" target=\"_blank\" rel=\"noopener\"><img src=\"http://be-sunshine.cn/wp-content/uploads/2017/12/QQ%E6%88%AA%E5%9B%BE20171225232801.jpg\" alt></a> <a href=\"http://be-sunshine.cn/wp-content/uploads/2017/12/QQ截图20171225232601.jpg\" target=\"_blank\" rel=\"noopener\"><img src=\"http://be-sunshine.cn/wp-content/uploads/2017/12/QQ%E6%88%AA%E5%9B%BE20171225232601.jpg\" alt></a> <a href=\"http://be-sunshine.cn/wp-content/uploads/2017/12/QQ截图20171225232333.jpg\" target=\"_blank\" rel=\"noopener\"><img src=\"http://be-sunshine.cn/wp-content/uploads/2017/12/QQ%E6%88%AA%E5%9B%BE20171225232333.jpg\" alt></a> <a href=\"http://hsdog.be-sunshine.cn\" target=\"_blank\" rel=\"noopener\"><img src=\"http://be-sunshine.cn/wp-content/uploads/2017/12/QQ%E6%88%AA%E5%9B%BE20171225232359.jpg\" alt></a> <a href=\"http://be-sunshine.cn/wp-content/uploads/2017/12/QQ截图20171225232410.jpg\" target=\"_blank\" rel=\"noopener\"><img src=\"http://be-sunshine.cn/wp-content/uploads/2017/12/QQ%E6%88%AA%E5%9B%BE20171225232410.jpg\" alt></a></p>\n","text":"第五个博客上线了!这次使用的是ASP.NET MVC + Bootstrap3 + SignalR + 百度地图api + ajax无刷新更新页面等等…. 目标: Demo : http://hsdog.be-sunshine.cn ASP搭建的一个博客(部分重构之前python","link":"","raw":null,"photos":[],"categories":[{"name":"ajax","slug":"ajax","count":4,"path":"api/categories/ajax.json"},{"name":"ASP.Net","slug":"ajax/ASP-Net","count":3,"path":"api/categories/ajax/ASP-Net.json"},{"name":"Bootstrap","slug":"ajax/ASP-Net/Bootstrap","count":1,"path":"api/categories/ajax/ASP-Net/Bootstrap.json"},{"name":"C#","slug":"ajax/ASP-Net/Bootstrap/C","count":1,"path":"api/categories/ajax/ASP-Net/Bootstrap/C.json"},{"name":"JS","slug":"ajax/ASP-Net/Bootstrap/C/JS","count":1,"path":"api/categories/ajax/ASP-Net/Bootstrap/C/JS.json"},{"name":"MVC","slug":"ajax/ASP-Net/Bootstrap/C/JS/MVC","count":1,"path":"api/categories/ajax/ASP-Net/Bootstrap/C/JS/MVC.json"}],"tags":[{"name":"ajax","slug":"ajax","count":4,"path":"api/tags/ajax.json"},{"name":"ASP.NET","slug":"ASP-NET","count":6,"path":"api/tags/ASP-NET.json"},{"name":"C#","slug":"C","count":6,"path":"api/tags/C.json"},{"name":"Web","slug":"Web","count":7,"path":"api/tags/Web.json"}]}]}