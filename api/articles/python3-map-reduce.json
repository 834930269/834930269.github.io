{"title":"python3学习 map&reduce+浮点字符串转换浮点数+英文姓名规范+一点点lambda","slug":"python3-map-reduce","date":"2017-07-13T08:03:55.000Z","updated":"2019-07-03T13:51:36.849Z","comments":true,"path":"api/articles/python3-map-reduce.json","photos":[],"link":"","excerpt":null,"covers":null,"content":"<p><strong>【Source Code】</strong> <strong>github: <a href=\"https://github.com/834930269/python_study/blob/master/map%26reduce/map_reduce.py\" target=\"_blank\" rel=\"noopener\">map_reduce.py</a></strong></p>\n<hr>\n<p> **# coding: utf-8</p>\n<p># In[2]:</p>\n<p>#我们先看map。map()函数接收两个参数，一个是函数，</p>\n<p>#一个是Iterable，map将传入的函数依次作用到序列的</p>\n<p>#每个元素，并把结果作为新的Iterator返回。</p>\n<p>#现在,我们用python代码实现1-9映射到x^2<br>def f(x):<br>    return x*x<br>r=map(f,[x for x in range(10)])<br>print(list(r))</p>\n<p>#map()传入的第一个参数是f，即函数对象本身。由于结</p>\n<p>#果r是一个Iterator，Iterator是惰性序列，因此通过</p>\n<p>#list()函数让它把整个序列都计算出来并返回一个list。</p>\n<p># In[3]:</p>\n<p>#将数字转换成字符<br>print(list(map(str,[x for x in range(1,10)])))</p>\n<p># In[4]:</p>\n<p>#reduce<br>‘’’<br>再看reduce的用法。reduce把一个函数作用在一个序列<br>[x1, x2, x3, …]上，这个函数必须接收两个参数，reduce<br>把结果继续和序列的下一个元素做累积计算，其效果就是：</p>\n<p>reduce(f, [x1, x2, x3, x4]) = f(f(f(x1, x2), x3), x4)<br>当然,可以直接用sum()<br>‘’’<br>from functools import reduce<br>def add(x,y):<br>    return x+y<br>print(reduce(add,[x for x in range(1,10)]))</p>\n<p># In[5]:</p>\n<p>#如果将[1，3，5，7，9]变成13579<br>def fn(x,y):<br>    return x*10+y<br>print(reduce(fn,[x for x in range(1,10,2)]))</p>\n<p># In[6]:</p>\n<p>‘’’<br>这个例子本身没多大用处，但是，如果考虑到字符串<br>str也是一个序列，对上面的例子稍加改动，配合map()，<br>我们就可以写出把str转换为int的函数：<br>‘’’<br>def char2num(s):<br>    return {‘0’: 0, ‘1’: 1, ‘2’: 2, ‘3’: 3, ‘4’: 4, ‘5’: 5, ‘6’: 6, ‘7’: 7, ‘8’: 8, ‘9’: 9}[s]<br>print(reduce(fn, map(char2num, ‘13579’)))</p>\n<p># In[7]:</p>\n<p>#也可以直接返回转换结果<br>def str2int(s):<br>    return reduce(fn, map(char2num, s))<br>print(str2int(‘98661’))</p>\n<p># In[9]:</p>\n<p>#还可以用lambda函数进一步转化，事实证明Python的整数运算是大数= =</p>\n<p>#当然,可以直接用int()<br>def str2int(s):<br>    return reduce(lambda x,y:x*10+y,map(char2num,s))<br>print(str2int(‘46131346431311616131’))</p>\n<p># In[10]:</p>\n<p>#利用map()函数，把用户输入的不规范的英文名字，变为首字母大写，</p>\n<p>#其他小写的规范名字。输入：[‘adam’, ‘LISA’, ‘barT’]，输出：</p>\n<p>#[‘Adam’, ‘Lisa’, ‘Bart’]：<br>def normalize(name):<br>    return name[0].upper()+name[1:].lower()<br># 测试:<br>L1 = [‘adam’, ‘LISA’, ‘barT’]<br>L2 = list(map(normalize, L1))<br>print(L2)</p>\n<p># In[11]:</p>\n<p>#Python提供的sum()函数可以接受一个list并求和，请编写一个prod()</p>\n<p>#函数，可以接受一个list并利用reduce()求积：<br>def prod(L):<br>    return reduce(lambda x,y:x*y,L)<br>print(‘3 * 5 * 7 * 9 =’, prod([3, 5, 7, 9]))</p>\n<p># In[20]:</p>\n<p>#利用map和reduce编写一个str2float函数，把字符串’123.456’转换成浮点数123.456：<br>def str2float(s):<br>    n,l=s.find(‘.’),len(s)<br>    if n!=-1:<br>        return reduce(lambda x,y:x<em>10+y,map(lambda x:int(x),s[:n]))+reduce(lambda x,y:x/10+y,map(lambda x:int(x)/10,s[l-1:n:-1]))<br>    else:<br>        return reduce(lambda x,y:x</em>10+y,map(lambda x:int(x),s))<br>print(‘str2float(\\‘166516516.1133165\\‘) =’, str2float(‘166516516.1133165’))</p>\n<p># In[ ]:**</p>\n","categories":[{"name":"Python","slug":"Python","count":41,"path":"api/categories/Python.json"}],"tags":[{"name":"Python","slug":"Python","count":65,"path":"api/tags/Python.json"}]}