{"title":"Python Flask 10 用户上传头像","slug":"python-flask-up-fil-to-app-2","date":"2017-10-18T03:54:20.000Z","updated":"2019-07-03T13:51:36.858Z","comments":true,"path":"api/articles/python-flask-up-fil-to-app-2.json","photos":[],"link":"","excerpt":null,"covers":["http://be-sunshine.cn/wp-content/uploads/2017/10/%E6%8D%95%E8%8E%B718.png"],"content":"<p>借助上节的基础==&gt; <a href=\"http://be-sunshine.cn/index.php/2017/10/17/python-flask-upfile/\" title=\"&lt;code&gt;点我啊!  Python Flask 上传文件&lt;/code&gt;\" target=\"_blank\" rel=\"noopener\"><code>点我啊! Python Flask 上传文件</code></a> 这节我们实现一下<code>修改用户头像</code>以及<code>默认头像</code>的功能. 截止目前的项目进度: <a href=\"https://github.com/834930269/Flask_Study/tree/master/flask-%E5%A4%A7%E5%9E%8B%E7%BD%91%E7%AB%99%E6%9E%B6%E6%9E%845-%E4%B8%8A%E4%BC%A0%E5%A4%B4%E5%83%8F\" title=\"&lt;code&gt;点我啊! Github:flask-大型网站架构5-新增上传头像&lt;/code&gt;\" target=\"_blank\" rel=\"noopener\"><code>点我啊! Github:flask-大型网站架构5-新增上传头像</code></a> 最终效果如图: <code>1.</code> <a href=\"http://be-sunshine.cn/wp-content/uploads/2017/10/捕获18.png\" target=\"_blank\" rel=\"noopener\"><img src=\"http://be-sunshine.cn/wp-content/uploads/2017/10/%E6%8D%95%E8%8E%B718.png\" alt></a> <code>2.</code> <a href=\"http://be-sunshine.cn/wp-content/uploads/2017/10/捕获19.png\" target=\"_blank\" rel=\"noopener\"><img src=\"http://be-sunshine.cn/wp-content/uploads/2017/10/%E6%8D%95%E8%8E%B719.png\" alt></a> <code>3.</code> <a href=\"http://be-sunshine.cn/wp-content/uploads/2017/10/捕获21.png\" target=\"_blank\" rel=\"noopener\"><img src=\"http://be-sunshine.cn/wp-content/uploads/2017/10/%E6%8D%95%E8%8E%B721.png\" alt></a> <code>4.</code> <a href=\"http://be-sunshine.cn/wp-content/uploads/2017/10/捕获22.png\" target=\"_blank\" rel=\"noopener\"><img src=\"http://be-sunshine.cn/wp-content/uploads/2017/10/%E6%8D%95%E8%8E%B722.png\" alt></a></p>\n<h1><span id=\"开始\">开始!</span></h1><h3><span id=\"1\">1:</span></h3><p>因为我们需要对每个用户<code>存下他的头像信息</code>. 这里我们选择<code>直接存储图片url</code>的形式进行存储. 所以我们需要对<code>model层</code>的<code>User</code>添加一个<code>gravatar</code>列,存储头像url. 主要代码如下:</p>\n<pre><code>class User(UserMixin,db.Model):\n    __tablename__ = &apos;users&apos;\n    gravatar = db.Column(db.String(200),default=&apos;/_uploads/photos/default.jpg&apos;)</code></pre><p>其中<code>gravatar</code>的默认值是<code>默认头像相对url</code>.</p>\n<h3><span id=\"2\">2:</span></h3><p>首先我们依然需要<code>先码出</code>上传头像界面的<code>表单(form)</code>. 先配置<code>所要上传的目标地址</code>变量<code>/config.py</code>:</p>\n<pre><code>import os\nUPLOADED_PHOTOS_DEST = os.path.abspath(os.path.join(os.getcwd(),&quot;app/static/Gravatar&quot;))</code></pre><p>我们需要对<code>上传文件</code>进行约束为图片格式,这里我们用一个<code>UploadSet</code>模块,编辑代码<code>/app/__init__.py</code>:</p>\n<pre><code>from flask_uploads import UploadSet, configure_uploads, IMAGES, patch_request_class\n\nphotos = UploadSet(&apos;photos&apos;,IMAGES)</code></pre><p>然后将创建好的<code>photo</code>对象加入已经创建好的<code>app</code>中:</p>\n<pre><code>configure_uploads(app,photos)\npatch_request_class(app)  </code></pre><p>然后编写<code>form表单</code>:</p>\n<pre><code>from flask_wtf.file import FileField, FileRequired, FileAllowed\nfrom flask_uploads import UploadSet, configure_uploads, IMAGES, patch_request_class\nfrom .. import photos\nfrom flask_wtf import FlaskForm\n\nclass UploadForm(FlaskForm):\n    photo = FileField(validators=[\n        FileAllowed(photos, u&apos;只能上传图片！&apos;), \n        FileRequired(u&apos;请选择一个头像吧！&apos;)])\n    submit = SubmitField(u&apos;确认上传&apos;,render_kw={&quot;class&quot;:&quot;btn btn-primary&quot;})</code></pre><p>其中<code>render_kw</code>是一个<code>dict</code>类型,作用是<code>渲染对应表单的css</code>. <code>FileAllowed</code>用来检测上传文件类型,不对的的话返回<code>第二个参数</code>. <code>FileRequired</code>和<code>Required</code>作用近似,即<code>非空判断</code>.</p>\n<h3><span id=\"3\">3:</span></h3><p>接下来我们就要开始编写<code>view层</code>了. 这里我们将编辑头像页面的<code>url</code>设为<code>/edit-gravatar</code> 所以我们需要码一个有<code>GET</code>和<code>POST</code>的视图函数.</p>\n<pre><code>from flask_login import  current_user\nfrom flask_login import login_user,login_required,logout_user\nfrom .forms import UploadForm\nfrom flask import render_template, session, redirect, url_for, current_app,abort,flash\nfrom .. import db,photos\n\n@main.route(&apos;/edit-gravatar&apos;,methods=[&apos;GET&apos;,&apos;POST&apos;])\n@login_required\ndef edit_gravatar():\n    form = UploadForm()\n    if form.validate_on_submit():\n        filename = photos.save(form.photo.data)\n        file_url = photos.url(filename)\n        current_user.gravatar = file_url\n        db.session.add(current_user)\n        flash(&apos;修改成功!&apos;)\n        return redirect(url_for(&apos;.user&apos;,username=current_user.username,file_url=file_url))\n\n    return render_template(&apos;edit_gravatar.html&apos;,form=form,file_url=current_user.gravatar)</code></pre><p>注意我们所上传的头像文件<code>即使名字相同也不会覆盖掉之前的头像文件的</code>..(所以还是以二进制存到数据库中更好一点么).</p>\n<h3><span id=\"4\">4:</span></h3><p>接下来我们需要编写<code>前台界面</code>了: 首先,由于如果我们直接用<code>quick_form</code>创建表单的话,表单的<code>css</code>就不好改了.所以我们把每个表单分开放入<code>form type=file</code>中,并且通过<code>传参</code>或者<code>重叠覆盖</code>修改表单控件的<code>样式</code>. 其中,修改<code>input type=file</code>样式的通用方法是<code>将opacity设为0</code>,然后用一个<code>a</code>标签将<code>input和a组合</code>到一起,这样修改<code>a</code>的样式便相当于修改<code>input</code>的样式. 对应的几部分代码如下:</p>\n<pre><code>/*CSS*/\n.upload{\n    padding: 5px 10px;\n    height: 40px;\n    line-height: 30px;\n    position: relative;\n    border: 1px solid #999;\n    text-decoration: none;\n    text-align:center;\n    color: #fff;\n}\n.change{\n    position: absolute;\n    overflow: hidden;\n    right: 0;\n    top: 0;\n    opacity: 0;\n}\n\n\n&lt;a class=&quot;btn btn-success upload&quot; placeholder=&quot;上传头像&quot; &gt;\n    &lt;p id=&quot;show_gt&quot;&gt;选择您要上传的头像~&lt;/p&gt;\n    { { form.photo(class=&quot;change&quot;,placeholder=&quot;上传头像&quot;,onchange=&quot;c()&quot;) }}\n&lt;/a&gt;</code></pre><p>然后在<code>css</code>中修改<code>upload</code>样式即可. 其中<code>btn btn-xxx</code>是<code>bootstrap</code>样式. 但是到这里还需要考虑一个问题,就是当<code>选中图片以后,并不会显示到页面上,必选点击提交以后</code>才会修改,下次访问这个页面才会变成新图片. 所以我们需要一种方法使<code>选中图片的同时将图片显示在页面上</code>,并和之前的头像对比. 这里我们使用直接<code>通过JavaScript在本地显示</code>: 对应JS代码如下:</p>\n<pre><code>&lt;script type=&quot;text/javascript&quot;&gt;\n    function c () {\n        var gt=document.getElementById(&apos;show_gt&apos;);\n        gt.innerText = &apos;已选中图片~&apos;\n        var r= new FileReader();\n        f=document.getElementById(&apos;photo&apos;).files[0];\n        r.readAsDataURL(f);\n        r.onload=function  (e) {\n            document.getElementById(&apos;show&apos;).src=this.result;\n        };\n    }\n&lt;/script&gt;</code></pre><p>因为<code>FlaskForm</code>生成的表单的<code>id</code>和类中对应<code>表单实例的名字</code>是一样的,所以这里的<code>id</code>是photo. 获取<code>图片对象(object) f</code>. 把这个File对象传给FileReader对象的读取方法，就能读取文件了。 连接: <a href=\"http://blog.csdn.net/oscar999/article/details/37499743/\" title=\"&lt;code&gt;[JS进阶] HTML5 之文件操作(file)&lt;/code&gt;\" target=\"_blank\" rel=\"noopener\"><code>点我啦! [JS进阶] HTML5 之文件操作(file)</code></a> 最后的<code>r.result</code>即为对应图片的<code>二进制数据</code>. 然后就是修改一下排版即可:</p>\n<pre><code>&lt;!-- edit_gravatar.html --&gt;\n{% extends \"base.html\" %}\n{% import \"bootstrap/wtf.html\" as wtf %}\n{% block title %}编辑个人头像{% endblock %}\n    {% block page_content %}\n    <form method=\"POST\" enctype=\"multipart/form-data\">\n         { { form.hidden_tag() }}\n         <div class=\"page-header\"><h2><span id=\"展览板~\">展览板~</span></h2></div>\n         <a class=\"btn btn-success upload\" placeholder=\"上传头像\"><p id=\"show_gt\">选择您要上传的头像~</p>\n            { { form.photo(class=\"change\",placeholder=\"上传头像\",onchange=\"c()\") }}\n         </a><br>\n         {% for error in form.photo.errors %}\n             <span style=\"color: red;\">{ { error }}</span>\n         {% endfor %}\n         {% if file_url %}\n         <br><img src=\"{ { file_url }}\" width=\"256\" height=\"256\">\n         {% endif %}\n         <a class=\"btn btn-success\"><-之前 之后-></-之前></a>\n         <img src=\"{ { file_url }}\" id=\"show\" width=\"256\" height=\"256\"><br><br>\n         { { form.submit }}\n    </form>\n    <script type=\"text/javascript\">\n        function c () {\n            var gt=document.getElementById('show_gt');\n            gt.innerText = '已选中图片~'\n            var r= new FileReader();\n            f=document.getElementById('photo').files[0];\n            r.readAsDataURL(f);\n            r.onload=function  (e) {\n                document.getElementById('show').src=this.result;\n            };\n        }\n    </script>\n    {% endblock %}</code></pre><h3><span id=\"done\">Done</span></h3>","categories":[{"name":"Flask","slug":"Flask","count":18,"path":"api/categories/Flask.json"},{"name":"JS","slug":"Flask/JS","count":1,"path":"api/categories/Flask/JS.json"},{"name":"Python","slug":"Flask/JS/Python","count":1,"path":"api/categories/Flask/JS/Python.json"}],"tags":[{"name":"Flask","slug":"Flask","count":20,"path":"api/tags/Flask.json"},{"name":"Python","slug":"Python","count":65,"path":"api/tags/Python.json"},{"name":"JS","slug":"JS","count":5,"path":"api/tags/JS.json"}]}