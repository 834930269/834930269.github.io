{"title":"Python Flask5.1 Context(上下文=>跟随变量)","slug":"python-flask5-1-context","date":"2017-10-11T07:29:31.000Z","updated":"2019-07-03T13:51:36.858Z","comments":true,"path":"api/articles/python-flask5-1-context.json","photos":[],"link":"","excerpt":null,"covers":null,"content":"<p>这是一个概念性的东西. 这里贴几个地址(有些我没看懂): <code>1.</code>轮子哥:</p>\n<pre><code>vczh\n    vczh: 《C++Primer 5th》强势审校\n\n每一段程序都有很多外部变量。只有像Add这种简单的函数才是\n没有外部变量的。一旦你的一段程序有了外部变量，这段程序就\n不完整，不能独立运行。你为了使他们运行，就要给所有的外部\n变量一个一个写一些值进去。这些值的集合就叫上下文。\n\n譬如说在C++的lambda表达是里面，[写在这里的就是上下文](int a, int b){ ... }。</code></pre><p>似懂非懂. <code>2.</code>: 最近在学Python + Flask，搜到了这个问题，也来回答一下吧。既然题主也在学Flask，就用Flask来举例：Flask从客户端收到请求的时候，视图函数如果要处理请求的话，可能就要访问一些对象。那么这些对象可以通过参数的形式传递进来，或者是在函数中访问外部变量。所以这个外部变量要有特定的值才会有意义，也即所谓的上下文。譬如Flask中的request变量，这是一个请求上下文，也就是当请求被推送之后，request才会有意义，接下来才可以使用request，否则就会报错，因为缺少上下文。引用一段《Flask Web开发》中的代码：</p>\n<pre><code>from flask import request\n\n@app.route(&apos;/&apos;)\ndef index():\n    user_agent = request.headers.get(&apos;User-Agent&apos;)\n    return &apos;&lt;p&gt;Your browser is %s&lt;/p&gt;&apos; % user_agent  </code></pre><p>就像前面说的，函数index()访问了request这个外部变量，但request必须在请求推送之后才可以使用，这就是一个请求上下文全局变量。 <strong>作者：Blackbelly 链接：<a href=\"https://www.zhihu.com/question/26387327/answer/128743651\" target=\"_blank\" rel=\"noopener\">https://www.zhihu.com/question/26387327/answer/128743651</a> 来源：知乎 著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</strong> <code>3.</code>转自简书: <a href=\"http://www.jianshu.com/p/7a7efbb7205f\" title=\"Click Here: Flask的Context(上下文)学习笔记\" target=\"_blank\" rel=\"noopener\">Click Here: Flask的Context(上下文)学习笔记</a></p>\n","categories":[{"name":"Flask","slug":"Flask","count":18,"path":"api/categories/Flask.json"},{"name":"Python","slug":"Flask/Python","count":16,"path":"api/categories/Flask/Python.json"}],"tags":[{"name":"Flask","slug":"Flask","count":20,"path":"api/tags/Flask.json"},{"name":"Python","slug":"Python","count":65,"path":"api/tags/Python.json"}]}