{"title":"pat备-字符串-sscanf","slug":"patp-sscanf","date":"2019-03-24T12:53:58.000Z","updated":"2019-07-03T16:07:45.303Z","comments":true,"path":"api/articles/patp-sscanf.json","photos":[],"link":"","excerpt":null,"covers":null,"content":"<blockquote>\n<p>sscanf(str,”…”,args) sscanf是用来干什么的呢? 例如我们每行输入的数据不同:</p>\n<blockquote>\n<p>数据有两种方式:</p>\n<blockquote>\n<ol>\n<li>名字:数字</li>\n<li>数字</li>\n</ol>\n</blockquote>\n</blockquote>\n</blockquote>\n<p><code>那么我们该如何用一条语句处理呢?</code> <code>首先,scanf肯定不行</code></p>\n<blockquote>\n<p>所以我们考虑一种方式</p>\n<blockquote>\n<p><code>将数据存到缓冲区中,然后再使用格式化读取.</code></p>\n</blockquote>\n</blockquote>\n<p><code>这里的格式化读取就是sscanf</code></p>\n<blockquote>\n<p>Talk is cheap,show me your code.</p>\n</blockquote>\n<p>样例: 4 ZWT ： 10 250 CXY : 100 66 输出: ZWT:10分 分数线:250分 CXY:100分 分数线:66分 <code>Code</code></p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> MAXN=<span class=\"number\">100</span>;</span><br><span class=\"line\"><span class=\"keyword\">char</span> Q[MAXN],name[MAXN];</span><br><span class=\"line\"><span class=\"keyword\">int</span> score;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> N;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>,&amp;N);</span><br><span class=\"line\">    getchar();</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;N;++i)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%[^\\n]\"</span>,Q);</span><br><span class=\"line\">        getchar();</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"built_in\">sscanf</span>(Q,<span class=\"string\">\"%s : %d\"</span>,name,&amp;score)==<span class=\"number\">2</span>)&#123;</span><br><span class=\"line\">            <span class=\"built_in\">printf</span>(<span class=\"string\">\"%s:%d分\\n\"</span>,name,score);</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            <span class=\"built_in\">printf</span>(<span class=\"string\">\"分数线:%s分\\n\"</span>,Q);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","categories":[{"name":"随笔","slug":"随笔","count":28,"path":"api/categories/随笔.json"}],"tags":[]}