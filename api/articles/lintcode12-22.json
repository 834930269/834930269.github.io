{"title":"LintCode(12-22)","slug":"lintcode12-22","date":"2019-02-10T06:42:21.000Z","updated":"2019-07-03T16:05:51.666Z","comments":true,"path":"api/articles/lintcode12-22.json","photos":[],"link":"","excerpt":"(12) - Min Stack一个栈维护最小值,另一个栈存数据为什么最小值同步插入可行,因为栈的pop只能从栈顶开始，所以:1.栈顶元素最小,minValue栈顶也是该元素 2.栈顶元素不是最小,minValue中没有该元素1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br>30<br>31<br>32<br>33<br>34<br>35<br>36<br>37<br>38<br>39<br>public class MinStack &#123;<br><br>    private Stack&lt;Integer&gt; data;<br>    private Stack&lt;Integer&gt; minValue;<br><br>    public MinStack() &#123;<br>        // do intialization if necessary<br>        data=new Stack&lt;&gt;();<br>        minValue=new Stack&lt;&gt;();<br>        minValue.push(0x3f3f3f3f);<br>    &#125;<br><br>    /*<br>     * @param number: An integer<br>     * @return: nothing<br>     */<br>    public void push(int number) &#123;<br>        // write your code here<br>        data.push(number);<br>        if(number&lt;=minValue.peek()) minValue.push(number);<br>    &#125;<br><br>    /*<br>     * @return: An integer<br>     */<br>    public int pop() &#123;<br>        // write your code here<br>        if(data.peek().equals(minValue.peek())) minValue.pop();<br>        return data.pop();<br>    &#125;<br><br>    /*<br>     * @return: An integer<br>     */<br>    public int min() &#123;<br>        // write your code here<br>        return minValue.peek();<br>    &#125;<br>&#125;<br>","covers":null,"content":"<h1><span id=\"12-min-stack\">(12) - Min Stack</span></h1><blockquote>\n<p>一个栈维护最小值,另一个栈存数据</p>\n<blockquote>\n<p>为什么最小值同步插入可行,因为栈的pop只能从栈顶开始，所以:</p>\n<blockquote>\n<p>1.栈顶元素最小,minValue栈顶也是该元素 2.栈顶元素不是最小,minValue中没有该元素</p>\n</blockquote>\n</blockquote>\n</blockquote>\n<figure class=\"highlight lasso\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> class MinStack &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"built_in\">Stack</span>&lt;<span class=\"built_in\">Integer</span>&gt; <span class=\"built_in\">data</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"built_in\">Stack</span>&lt;<span class=\"built_in\">Integer</span>&gt; minValue;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> MinStack() &#123;</span><br><span class=\"line\">        <span class=\"comment\">// do intialization if necessary</span></span><br><span class=\"line\">        <span class=\"built_in\">data</span>=<span class=\"literal\">new</span> <span class=\"built_in\">Stack</span>&lt;&gt;();</span><br><span class=\"line\">        minValue=<span class=\"literal\">new</span> <span class=\"built_in\">Stack</span>&lt;&gt;();</span><br><span class=\"line\">        minValue.push(<span class=\"number\">0x3f3f3f3f</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">     * @param number: An integer</span></span><br><span class=\"line\"><span class=\"comment\">     * @return: nothing</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"literal\">void</span> push(int number) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// write your code here</span></span><br><span class=\"line\">        <span class=\"built_in\">data</span>.push(number);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(number&lt;=minValue.peek()) minValue.push(number);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">     * @return: An integer</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> int pop() &#123;</span><br><span class=\"line\">        <span class=\"comment\">// write your code here</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"built_in\">data</span>.peek().<span class=\"keyword\">equals</span>(minValue.peek())) minValue.pop();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">data</span>.pop();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">     * @return: An integer</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> int <span class=\"keyword\">min</span>() &#123;</span><br><span class=\"line\">        <span class=\"comment\">// write your code here</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> minValue.peek();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<a id=\"more\"></a>\n\n<h1><span id=\"13-implement-strstr\">(13) - Implement strStr()</span></h1><blockquote>\n<p>KMP模板,但是实际面试的时候不需要使用KMP,暴力O(N^2)即可</p>\n</blockquote>\n<pre><code>public class Solution {\n\n    private final int maxn=10000+7;\n    private int Next[];\n\n    private void getNext(String S,String T){\n        int k=-1,len=T.length();\n        int j=0;\n        Next[0]=-1;\n        while(j&lt;len){\n            if(k==-1 || T.charAt(j)==T.charAt(k)) Next[++j]=++k;\n            else k=Next[k];\n        }\n    }\n\n    private int KMP_index(String S,String T){\n        int i=0,j=0,slen=S.length(),tlen=T.length();\n        getNext(S,T);\n        while(i&lt;slen &amp;&amp; j&lt;tlen){\n            if(j==-1 || S.charAt(i)==T.charAt(j)){\n                i++;\n                j++;\n            }else j=Next[j];\n        }\n        if(j==tlen) return i-tlen;\n        else return -1;\n    }\n\n    /**\n     * @param source: \n     * @param target: \n     * @return: return the index\n     */\n    public int strStr(String source, String target) {\n        // Write your code here\n        Next=new int[maxn];\n        return KMP_index(source,target);\n\n    }\n}</code></pre><h1><span id=\"14-first-position-of-target\">(14) - First Position of Target</span></h1><h2><span id=\"c偷懒用二分\">C++偷懒用二分</span></h2><pre><code>class Solution {\npublic:\n    /**\n     * @param nums: The integer array.\n     * @param target: Target to find.\n     * @return: The first position of target. Position starts from 0.\n     */\n    int binarySearch(vector&lt;int&gt; &amp;nums, int target) {\n        // write your code here\n        int index=lower_bound(nums.begin(),nums.end(),target)-nums.begin();\n        if(nums[index]!=target)\n            return -1;\n        return index;\n    }\n};</code></pre><h2><span id=\"java-实现二分\">Java 实现二分</span></h2><pre><code>public class Solution {\n    /**\n     * @param nums: The integer array.\n     * @param target: Target to find.\n     * @return: The first position of target. Position starts from 0.\n     */\n    public int binarySearch(int[] nums, int target) {\n        // write your code here\n\n        int mid=0,l=0,r=nums.length;\n        while(l&lt;=r){\n            mid=((l+r)&gt;&gt;1);\n            if(nums[mid]&lt;target)\n                l=mid+1;\n            else r=mid-1;\n        }\n        if(nums[l]==target) return l;\n        else return -1;\n    }\n}</code></pre><h1><span id=\"15-permutations\">(15) - Permutations</span></h1><blockquote>\n<p>dfs即可</p>\n</blockquote>\n<figure class=\"highlight zephir\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">List</span>&lt;<span class=\"keyword\">List</span>&lt;Integer&gt;&gt; permute(<span class=\"keyword\">int</span>[] nums) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">List</span>&lt;<span class=\"keyword\">List</span>&lt;Integer&gt;&gt; res = <span class=\"keyword\">new</span> LinkedList&lt;&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">boolean</span>[] used = <span class=\"keyword\">new</span> <span class=\"keyword\">boolean</span>[nums.length];</span><br><span class=\"line\">        helper(nums, used, <span class=\"keyword\">new</span> LinkedList&lt;&gt;(), res);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> void helper(<span class=\"keyword\">int</span>[] nums, <span class=\"keyword\">boolean</span>[] used, <span class=\"keyword\">List</span>&lt;Integer&gt; tmp, <span class=\"keyword\">List</span>&lt;<span class=\"keyword\">List</span>&lt;Integer&gt;&gt; res) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (tmp.size() == nums.length) &#123;</span><br><span class=\"line\">      res.add(<span class=\"keyword\">new</span> LinkedList&lt;&gt;(tmp));</span><br><span class=\"line\">      <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (used[i]) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      used[i] = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">      tmp.add(nums[i]);</span><br><span class=\"line\">      helper(nums, used, tmp, res);</span><br><span class=\"line\">      used[i] = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">      tmp.remove(tmp.size()<span class=\"number\">-1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h1><span id=\"16-permutations-ii\">(16) - Permutations II</span></h1><blockquote>\n<p>用set集直接映射即可</p>\n</blockquote>\n<pre><code>public class Solution {\n\n    private Set&lt;String&gt; reg;\n\n    private void helper(int[] nums, boolean[] used, List&lt;Integer&gt; tmp, List&lt;List&lt;Integer&gt;&gt; res,StringBuilder str){\n        if (tmp.size() == nums.length) {\n            String ts=str.toString();\n            if(reg.contains(ts)){\n                return;\n            }\n            reg.add(ts);\n            res.add(new LinkedList&lt;&gt;(tmp));\n            return;\n        }\n        for (int i = 0; i &lt; nums.length; i++) {\n            if (used[i]) {\n                continue;\n            }\n            used[i] = true;\n            tmp.add(nums[i]);\n            String nw=String.valueOf(nums[i]);\n            str.append(nw);\n            helper(nums, used, tmp, res,str);\n            used[i] = false;\n            tmp.remove(tmp.size()-1);\n            str.delete(str.length()-nw.length(),str.length());\n        }\n        return;\n    }\n    public List&lt;List&lt;Integer&gt;&gt; permuteUnique(int[] nums) {\n        List&lt;List&lt;Integer&gt;&gt; res = new LinkedList&lt;&gt;();\n        boolean[] used = new boolean[nums.length];\n        reg=new HashSet&lt;String&gt;();\n        helper(nums, used, new LinkedList&lt;&gt;(), res,new StringBuilder());\n        return res;\n    }\n};</code></pre><h1><span id=\"17-subsets\">(17) - Subsets</span></h1><blockquote>\n<p>方法:</p>\n<blockquote>\n<p>[[]]] [[1]] [[2],[1,2]] [[3],[1,3],[2,3],[1,2,3]] 合起来就好了</p>\n</blockquote>\n<p>一个小语法</p>\n<blockquote>\n<p>java中的List是引用传递,List套List给出来的是引用对象,所以必须new一个新的ArrayList才行.</p>\n</blockquote>\n</blockquote>\n<pre><code>public class Solution {\n    /**\n     * @param nums: A set of numbers\n     * @return: A list of lists\n     */\n    public List&lt;List&lt;Integer&gt;&gt; subsets(int[] nums) {\n        // write your code here\n        int len=nums.length;\n        Arrays.sort(nums);\n        List&lt;Integer&gt; init=new ArrayList();\n        List&lt;List&lt;Integer&gt;&gt; ans = new LinkedList&lt;&gt;();\n        ans.add(init);\n        for(int i=0;i&lt;len;++i){\n            int size=ans.size();\n            for(int j=0;j&lt;size;++j){\n                List&lt;Integer&gt; reg=new ArrayList&lt;Integer&gt;(ans.get(j));\n                reg.add(nums[i]);\n                ans.add(reg);\n            }\n        }\n        return ans;\n    }\n}</code></pre><h1><span id=\"18-subsets-ii\">(18) - Subsets II</span></h1><blockquote>\n<p>还是用set映射</p>\n</blockquote>\n<pre><code>import java.util.*;\n\npublic class Topic_18 {\n    private static Set&lt;String&gt; dict;\n\n    /**\n     * @param nums: A set of numbers.\n     * @return: A list of lists. All valid subsets.\n     */\n    public static List&lt;List&lt;Integer&gt;&gt; subsetsWithDup(int[] nums) {\n        // write your code here\n        dict=new HashSet&lt;String&gt;();\n        int len=nums.length;\n        Arrays.sort(nums);\n        List&lt;Integer&gt; init=new ArrayList();\n        List&lt;List&lt;Integer&gt;&gt; ans = new LinkedList&lt;&gt;();\n        ans.add(init);\n        for(int i=0;i&lt;len;++i){\n            int size=ans.size();\n            for(int j=0;j&lt;size;++j){\n                StringBuilder str=new StringBuilder();\n                List&lt;Integer&gt; reg=new ArrayList&lt;Integer&gt;(ans.get(j));\n                reg.add(nums[i]);\n                for(int k=0;k&lt;reg.size();++k){\n                    str.append(String.valueOf(reg.get(k)));\n                }\n                String n=str.toString();\n                if(!dict.contains(n)){\n                    ans.add(reg);\n                    dict.add(n);\n                }\n            }\n        }\n        return ans;\n    }\n    public static void main(String[] args){\n        int[] nums={1,2};\n        List&lt;List&lt;Integer&gt;&gt; ans=subsetsWithDup(nums);\n        System.out.println(ans.size());\n    }\n\n}</code></pre>","categories":[{"name":"LintCode","slug":"LintCode","count":2,"path":"api/categories/LintCode.json"}],"tags":[{"name":"LintCode","slug":"LintCode","count":2,"path":"api/tags/LintCode.json"}]}