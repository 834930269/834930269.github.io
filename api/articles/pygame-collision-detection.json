{"title":"pygame 碰撞检测","slug":"pygame-collision-detection","date":"2017-12-30T14:59:50.000Z","updated":"2019-07-03T13:51:36.859Z","comments":true,"path":"api/articles/pygame-collision-detection.json","photos":[],"link":"","excerpt":null,"covers":null,"content":"<p>碰撞检测 即两个Sprite是否碰撞-重叠之类的(你懂得) :horse_racing: github: <a href=\"https://github.com/834930269/Pygame-Learn/tree/master/EatApple\" title=\"https://github.com/834930269/Pygame-Learn/tree/master/EatApple\" target=\"_blank\" rel=\"noopener\">https://github.com/834930269/Pygame-Learn/tree/master/EatApple</a> 吃苹果游戏:</p>\n<pre><code># MyLibrary.py\nfrom pygame import *\nimport sys, time, random, math, pygame\n\ndef print_text(font,x,y,text,color=(255,255,255)):\n    imgText = font.render(text,True,color)\n    #req&apos;d when function moved into MyLibrary\n    screen = pygame.display.get_surface()\n    #移动\n    screen.blit(imgText,(x,y))\n\nclass MySprite(pygame.sprite.Sprite):\n    def __init__(self):\n        pygame.sprite.Sprite.__init__(self)\n        self.master_image = None\n        self.frame = 0\n        self.old_frame = -1\n        self.frame_width = 1\n        self.frame_height = 1\n        self.first_frame = 0\n        self.last_frame = 0\n        self.columns = 1\n        self.last_time = 0\n        self.row = 1\n        self.direction = 0\n        self.velocity = Point(0.0,0.0)\n\n    #x property\n    def _getx(self): return self.rect.x\n    def _setx(self,value): self.rect.x = value\n    X = property(_getx,_setx)\n\n    #y property\n    def _gety(self): return self.rect.y\n    def _sety(self,value): self.rect.y = value\n    Y = property(_gety,_sety)\n\n    # position property\n    def _getpos(self): return self.rect.topleft\n    def _setpos(self,pos):self.rect.topleft = pos\n    position = property(_getpos,_setpos)\n\n    # filename 帧图宽度,帧图高度,帧图行,帧图列\n    def load(self,filename,width,height,columns,row):\n        self.master_image = pygame.image.load(filename).convert_alpha()\n        self.frame_width = width\n        self.frame_height = height\n        self.rect = Rect(0,0,width,height)\n        self.columns = columns\n        self.row = row\n        rect = self.master_image.get_rect()\n        self.last_frame = (rect.width // width)*(rect.height // height) - 1\n\n    def update(self,current_time,rate=30):\n        if current_time &gt; self.last_time +rate:\n            self.frame += 1\n            if self.frame &gt; self.last_frame:\n                self.frame = self.first_frame\n            self.last_frame = current_time\n\n        if self.frame != self.old_frame:\n            frame_x = (self.frame % self.columns) * self.frame_width\n            #添加了row以后每次计算对row取余即可计算出当前列数\n            frame_y = (self.frame // self.columns) % self.row * self.frame_height\n            #如果把frame_y置为0,则表示始终都是在位图的第一行\n            # 多行的话,可以通过frame_y来解决,但是要注意,y=0则返回\n            rect = Rect(frame_x, frame_y, self.frame_width, self.frame_height)\n            self.image = self.master_image.subsurface(rect)\n            self.old_frame = self.frame\n\n    def __str__(self):\n        return str(self.frame) + &quot;,&quot; + str(self.first_frame) + \\\n            &quot;,&quot; + str(self.last_frame) + &quot;,&quot; + str(self.frame_width) + \\\n            &quot;,&quot; + str(self.frame_height) + &quot;,&quot; + str(self.columns) + \\\n            &quot;,&quot; + str(self.rect)\n\n#Point class\nclass Point(object):\n    def __init__(self,x,y):\n        self.__x = x\n        self.__y = y\n    #X property\n    def getx(self): return self.__x\n    def setx(self, x): self.__x = x\n    x = property(getx, setx)\n\n    #Y property\n    def gety(self): return self.__y\n    def sety(self, y): self.__y = y\n    y = property(gety, sety)\n\n    def __str__(self):\n        return &quot;{X:&quot; + &quot;{:.0f}&quot;.format(self.__x) + \\\n            &quot;,Y:&quot; + &quot;{:.0f}&quot;.format(self.__y) + &quot;}&quot;\n\n\n#app.py\nimport itertools, sys, time, random, math, pygame\nfrom pygame import *\nfrom MyLibrary import *\n\ndef calc_velocity(direction,vel=1.0):\n    velocity = Point(0,0)\n    if direction == 0 :#上\n        velocity.y = -vel\n    elif direction == 2:#右\n        velocity.x=vel\n    elif direction == 4:#下\n        velocity.y=vel\n    elif direction == 6:#左\n        velocity.x=-vel\n    return velocity\n\npygame.init()\nscreen = pygame.display.set_mode((800,600))\npygame.display.set_caption(&quot;吃苹果&quot;)\nfont = pygame.font.Font(None,36)\ntimer = pygame.time.Clock()\n\n#创建精灵组\nplayer_group = pygame.sprite.Group()\nfood_group = pygame.sprite.Group()\n\n#初始化玩家精灵组\nplayer = MySprite()\nplayer.load(&quot;farmer walk.png&quot;,96,96,8,8)\n#初始位置\nplayer.position = 80,80\n#初始方向\nplayer.direction = 4\n#添加进组\nplayer_group.add(player)\n\n#初始化食物精灵组\nfor n in range(1,50):\n    food = MySprite()\n    food.load(&quot;food_low.png&quot;,35,35,1,1)\n    #随机分布\n    food.position = random.randint(0,780),random.randint(0,580)\n    food_group.add(food)\n\ngame_over=False\nplayer_moving = False\nplayer_health = 0\n\nwhile True:\n    timer.tick(30)\n    ticks = pygame.time.get_ticks()\n\n    for event in pygame.event.get():\n        if event.type == QUIT:\n            pygame.quit()\n            sys.exit()\n    #获取当前按键\n    keys = pygame.key.get_pressed()\n    if keys[K_ESCAPE]:\n        sys.exit()\n    elif keys[K_UP] or keys[K_w]:#上\n        player.direction = 0\n        player_moving = True\n    elif keys[K_RIGHT] or keys[K_d]:#右\n        player.direction = 2\n        player_moving = True\n    elif keys[K_DOWN] or keys[K_s]:#下\n        player.direction = 4\n        player_moving = True\n    elif keys[K_LEFT] or keys[K_a]:#左\n        player.direction = 6\n        player_moving = True\n    else:\n        player_moving = False\n\n    if not game_over:\n        #根据角色方向不同,使用不同的动画帧\n        player.first_frame = player.direction * player.columns\n        player.last_frame = player.first_frame + player.columns-1\n        if player.frame &lt; player.first_frame:\n            player.frame = player.first_frame\n\n        if not player_moving:\n            # 当停止按键（即人物停止移动的时候），停止更新动画帧\n            player.frame = player.first_frame = player.last_frame\n        else:\n            player.velocity = calc_velocity(player.direction,1.5)\n            player.velocity.x *= 1.5\n            player.velocity.y *= 1.5\n\n        #更新玩家精灵组\n        player_group.update(ticks, 50)\n        # 移动玩家\n        if player_moving:\n            player.X += player.velocity.x\n            player.Y += player.velocity.y\n            if player.X &lt; 0:\n                player.X = 0\n            elif player.X &gt; 700:\n                player.X = 700\n            if player.Y &lt; 0:\n                player.Y = 0\n            elif player.Y &gt; 500:\n                player.Y = 500\n\n        attacker = None\n        #判断是否有碰撞产生\n        attacker = pygame.sprite.spritecollideany(player,food_group)\n        if attacker!=None:\n            #有,增加精度\n            if pygame.sprite.collide_circle_ratio(0.65)(player,attacker):\n                player_health += 2\n                food_group.remove(attacker)\n        if player_health &gt; 100:\n            player_health = 100\n        #更新食物精灵组\n        food_group.update(ticks,50)\n        if len(food_group)==0:\n            game_over = True\n\n    #清屏\n    screen.fill((50,50,100))\n    # 绘制精灵\n    food_group.draw(screen)\n    player_group.draw(screen)\n\n    # 绘制玩家血量条\n    pygame.draw.rect(screen, (50, 150, 50, 180), Rect(300, 570, player_health * 2, 25))\n    pygame.draw.rect(screen, (100, 200, 100, 180), Rect(300, 570, 200, 25), 2)\n\n    if game_over:\n        print_text(font, 300, 100, &quot;GAME OVER&quot;)\n\n    pygame.display.update()</code></pre><p>接下来才是难中之难…如果想要实现人物随场景移动. 估计要自己撸框架了. 大体思路如下: 1:近景(左侧)1/2前景不随人物移动 2:1/2以后景随人物移动 3:远景(右侧)1/2前景不随人物移动 4:景采用大地图形式,造可封装类(障碍物,场景地图,宽度,高度等信息) 5:考虑如何移动场景,数学公式想好,-移动方向,移动速度,景中心… 6:加油!</p>\n","categories":[{"name":"pygame","slug":"pygame","count":3,"path":"api/categories/pygame.json"},{"name":"Python","slug":"pygame/Python","count":3,"path":"api/categories/pygame/Python.json"},{"name":"游戏制作","slug":"pygame/Python/游戏制作","count":3,"path":"api/categories/pygame/Python/游戏制作.json"}],"tags":[{"name":"Python","slug":"Python","count":65,"path":"api/tags/Python.json"},{"name":"游戏制作","slug":"游戏制作","count":4,"path":"api/tags/游戏制作.json"},{"name":"pygame","slug":"pygame","count":3,"path":"api/tags/pygame.json"}]}