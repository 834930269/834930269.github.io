{"title":"UVa 514","slug":"uva-514","date":"2017-01-24T13:11:51.000Z","updated":"2019-07-03T13:51:36.846Z","comments":true,"path":"api/articles/uva-514.json","photos":[],"link":"","excerpt":null,"covers":null,"content":"<p>【类型】 数据结构,栈,STL 【Tip】 印象中好像可以不模拟栈的操作,根据定义来判断？(雾 水题. 【Code】</p>\n<blockquote>\n<p><em>#include<iostream></iostream></em> <em>#include<algorithm></algorithm></em> <em>#include<cstdio></cstdio></em> <em>#include<cstring></cstring></em> <em>#include<stack></stack></em> <em>#define maxn 2000</em> <em>using namespace std;</em> <em>int N,target[maxn],B;</em> <em>bool locked;</em> <em>int main(){</em> _    while(scanf(“%d”,&amp;N),N){_ _        while(scanf(“%d”,&amp;target[0]),target[0]){_ _            stack<int> s;_ _            locked=false;_ _            B=target[0]+1;//B用来记录入栈后最大的那个元素,之后入栈以它为下限._ _            for(int i=1;i&lt;target[0];++i)_ _                s.push(i);_ _            for(int i=1;i&lt;N;++i){_ _                scanf(“%d”,&amp;target[i]);_ _                if(!s.empty() &amp;&amp; !locked){_ _                    if(s.top()==target[i]) s.pop();_ _                    else if(target[i]&lt;s.top()) locked=true;_ _                    else if(target[i]&gt;s.top() &amp;&amp; B){_ _                        for(int j=B;j&lt;target[i];++j)_ _                            s.push(j);_ _                        B=target[i]+1;_ _                    }_ _                }else if(!locked){_ _                    for(int j=B;j&lt;target[i];++j)_ _                            s.push(j);_ _                    B=target[i]+1;_ _                }_ _            }_ _            printf(“%s\\n”,locked?”No”:”Yes”);_ _        }_ _        printf(“\\n”);_ _    }_ _    return 0;_ <em>}</em></int></p>\n</blockquote>\n","categories":[{"name":"UVa","slug":"UVa","count":35,"path":"api/categories/UVa.json"},{"name":"数据结构","slug":"UVa/数据结构","count":3,"path":"api/categories/UVa/数据结构.json"}],"tags":[{"name":"数据结构","slug":"数据结构","count":5,"path":"api/tags/数据结构.json"},{"name":"UVa","slug":"UVa","count":39,"path":"api/tags/UVa.json"}]}