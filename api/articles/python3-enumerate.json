{"title":"python3学习 enumerate","slug":"python3-enumerate","date":"2017-07-16T09:01:37.000Z","updated":"2019-07-03T13:51:36.850Z","comments":true,"path":"api/articles/python3-enumerate.json","photos":[],"link":"","excerpt":null,"covers":null,"content":"<p><strong>【Source Code】</strong> <strong>github: <a href=\"https://github.com/834930269/python_study/blob/master/oop/enumerate.py\" target=\"_blank\" rel=\"noopener\">enumerate.py</a></strong></p>\n<hr>\n<p> **# coding: utf-8</p>\n<p># In[15]:</p>\n<p>from enum import Enum<br>Month=Enum(‘Months’,(‘Jan’, ‘Feb’, ‘Mar’, ‘Apr’, ‘May’, ‘Jun’, ‘Jul’, ‘Aug’, ‘Sep’, ‘Oct’, ‘Nov’, ‘Dec’))<br>for name,member in Month.__members__.items():<br>    print(name,’=&gt;’,member,’,’,member.value)</p>\n<p># In[17]:</p>\n<p>#如果需要更精确地控制枚举类型，可以从Enum派生出自定义类：<br>from enum import unique<br>@unique<br>class WeekDay(Enum):<br>    Sun = 0 # Sun的value被设定为0<br>    Mon = 1<br>    Tue = 2<br>    Wed = 3<br>    Thu = 4<br>    Fri = 5<br>    Sat = 6</p>\n<p>#@unique装饰器可以帮助我们检查保证没有重复值。<br>day1=WeekDay.Mon<br>print(day1)<br>print(WeekDay[‘Tue’])<br>print(WeekDay.Tue.value)<br>print(day1 == WeekDay.Mon)<br>print(day1 == WeekDay.Tue)<br>print(WeekDay(1))</p>\n<p>for name,member in WeekDay.__members__.items():<br>    print(name,’=&gt;’,member,member.value)</p>\n<p># In[ ]:**</p>\n","categories":[{"name":"Python","slug":"Python","count":41,"path":"api/categories/Python.json"}],"tags":[{"name":"Python","slug":"Python","count":65,"path":"api/tags/Python.json"}]}