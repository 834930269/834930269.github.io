{"title":"UVa 10891","slug":"uva-10891","date":"2017-07-13T16:42:55.000Z","updated":"2019-07-03T13:51:36.849Z","comments":true,"path":"api/articles/uva-10891.json","photos":[],"link":"","excerpt":null,"covers":null,"content":"<p><strong>【Topic Link】</strong> <strong><a href=\"https://vjudge.net/problem/UVA-10891\" target=\"_blank\" rel=\"noopener\">Game of Sum</a></strong> <strong>【题意】</strong> <strong>给你一个序列的数,两个玩家A,B.每次A,B都需要从这个序列的两端取连续的数,保证他们每次都用最优的策略.A先手,求游戏结束后sum(A)-sum(B).</strong> <strong>【题解】</strong> <strong>因为任意时刻游戏的状态都是连续子序列.</strong> <strong>用d(i,j)表示原序列的第i~j个元素组成的子序列.在双方都采取最优策略的情况下,先手得分的最大值.</strong> <strong>状态转移时,我们考虑从左取和从右取多少个.等价于枚举给对方剩下怎样的子序列.是(k,end)(begin&lt;k&lt;=end),还是(begin,k)(begin&lt;=k&lt;end).</strong> <strong>状态转移方程:d(begin,end)=sum(begin,end)-min{d(begin+1,end),d(begin+2,end),…,d(end,end), d(begin,end-1),d(begin,end-2),…,d(begin,begin),0}</strong> <strong>0代表全取完,所以不需要边界处理.</strong> <strong>【Source Code】</strong> <strong>github: <a href=\"https://github.com/834930269/Algorithm_Lrj/blob/master/ch1/UVa%2010891.cpp\" target=\"_blank\" rel=\"noopener\">UVa 10891.cpp</a></strong></p>\n<hr>\n<p>**#include&lt;bits/stdc++.h&gt;<br>using namespace std;<br>const int maxn=100+20;<br>int A[maxn],vis[maxn][maxn],S[maxn],d[maxn][maxn];</p>\n<p>int dp(int b,int e){<br>    if(vis[b][e]) return d[b][e];///记忆化搜索<br>    vis[b][e]=1;<br>    int m=0;<br>    ///从b-&gt;e选最小的结果,然后d[b][e]选sum(b,e)-m<br>    for(int k=b+1;k&lt;=e;++k) m=min(m,dp(k,e)); ///从e-&gt;b选最小的结果,然后d[b][e]选sum(b,e)-m<br>    for(int k=b;k&lt;e;++k) m=min(m,dp(b,k));<br>    d[b][e]=S[e]-S[b-1]-m;<br>    return d[b][e];<br>}</p>\n<p>int main(){<br>    int n;S[0]=0;<br>    while(~scanf(“%d”,&amp;n) &amp;&amp; n){<br>        for(int i=1;i&lt;=n;++i){**<br> <strong>scanf(“%d”,&amp;A[i]);</strong><br> <strong>S[i]=S[i-1]+A[i];</strong><br> <strong>}</strong><br> <strong>memset(vis,0,sizeof(vis));</strong><br> <strong>printf(“%d\\n”,2*dp(1,n)-S[n]);///=&gt;dp(1,n)-(S[n]-dp(1,n))<br>    }<br>    return 0;<br>}</strong></p>\n","categories":[{"name":"UVa","slug":"UVa","count":35,"path":"api/categories/UVa.json"},{"name":"动态规划","slug":"UVa/动态规划","count":4,"path":"api/categories/UVa/动态规划.json"}],"tags":[{"name":"动态规划","slug":"动态规划","count":24,"path":"api/tags/动态规划.json"},{"name":"UVa","slug":"UVa","count":39,"path":"api/tags/UVa.json"}]}