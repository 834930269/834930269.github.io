{"title":"计划","slug":"my-plan","date":"2018-06-14T08:45:55.000Z","updated":"2019-07-03T13:51:36.863Z","comments":true,"path":"api/articles/my-plan.json","photos":[],"link":"","excerpt":null,"covers":["http://be-sunshine.cn/wp-content/uploads/2018/06/fabc862147ac8e0ad3ed25d6bfa9c7e5.png"],"content":"<p>[toc]</p>\n<h1><span id=\"课外知识\"><strong>课外知识:</strong></span></h1><blockquote>\n<p>需求定完了，代码写完了，测试测完了，然后呢？要发布了吧？你需要用maven或者eclipse等工具把你的代码打成一个war包，然后把这个war包发布到你的生产环境下的web容器里，对吧？</p>\n</blockquote>\n<blockquote>\n<p>发布完了之后，你要启动你的web容器，开始提供服务，这时候你通过配置域名，dns等等相关，你的网站就可以访问了（假设你是个网站）。那我们来看，你的前后端代码是不是全都在那个war包里？包括你的js，css，图片，各种第三方的库，对吧？ 好，下面在浏览器中输入你的网站域名（<a href=\"http://www.xxx.com），之后发生了什么？（这个问题也是很多公司的面试题）我捡干的说了啊，基础不好的童鞋请自己去搜。\" target=\"_blank\" rel=\"noopener\">www.xxx.com），之后发生了什么？（这个问题也是很多公司的面试题）我捡干的说了啊，基础不好的童鞋请自己去搜。</a> 浏览器在通过域名通过dns服务器找到你的服务器外网ip,将http请求发送到你的服务器，在tcp3次握手之后（http下面是tcp/ip），通过tcp协议开始传输数据，你的服务器得到请求后，开始提供服务，接收参数，之后返回你的应答给浏览器，浏览器再通过content-type来解析你返回的内容，呈现给用户。 那么我们来看，我们先假设你的首页中有100张图片，此时，用户的看似一次http请求，其实并不是一次，用户在第一次访问的时候，浏览器中不会有缓存，你的100张图片，浏览器要连着请求100次http请求（有人会跟我说http长连短连的问题，不在这里讨论），你的服务器接收这些请求，都需要耗费内存去创建socket来玩tcp传输（消耗你服务器上的计算资源）。 重点来了，这样的话，你的服务器的压力会非常大，因为页面中的所有请求都是只请求到你这台服务器上，如果1个人还好，如果10000个人并发访问呢（先不聊服务器集群，这里就说是单实例服务器），那你的服务器能扛住多少个tcp连接？你的带宽有多大？你的服务器的内存有多大？你的硬盘是高性能的吗？你能抗住多少IO？你给web服务器分的内存有多大？会不会宕机？ 这就是为什么，越是大中型的web应用，他们越是要解耦。理论上你可以把你的数据库+应用服务+消息队列+缓存+用户上传的文件+日志+等等都扔在一台服务器上，你也不用玩什么服务治理，也不用做什么性能监控，什么报警机制等等，就乱成一锅粥好了。但是这样就好像是你把鸡蛋都放在一个篮子里，隐患非常大。如果因为一个子应用的内存不稳定导致整个服务器内存溢出而hung住，那你的整个网站就挂掉了。 如果出意外挂掉，而恰好这时你们的业务又处于井喷式发展高峰期，那么恭喜你，业务成功被技术卡住，很可能会流失大量用户，后果不堪设想。（注意：技术一定是要走在业务前面的，否则你将错过最佳的发展期哟，亲~） 此外，你的应用全部都耦合在一起，相当于一个巨石，当服务端负载能力不足时，一般会使用负载均衡的方式，将服务器做成集群，这样其实你是在水平扩展一块块巨石，性能加速度会越来越低，要知道，本身负载就低的功能or模块是没有必要水平扩展的，在本文中的例子就是你的性能瓶颈不在前端，那干嘛要水平扩展前端呢？？？还有发版部署上线的时候，我明明只改了后端的代码，为什么要前端也跟着发布呢？？？ 正常的互联网架构，是都要拆开的，你的web服务器集群，你的应用服务器集群+文件服务器集群+数据库服务器集群+消息队列集群+缓存集群等等。</p>\n</blockquote>\n<h1><span id=\"jsonpdone\">JSONP(Done)</span></h1><blockquote>\n<p>当我们尝试彻底分离开前后端时,会出现跨域的问题.人类很有趣,想出了将它作为函数来解决的方法. 一般而言我们可以在后台为每一个Response提供一个</p>\n<blockquote>\n<p>access-Control-Allow-Origin: *</p>\n</blockquote>\n<p>这个字段来欲盖弥彰,但这种手段会出现API滥用或者XSS攻击等情况.</p>\n</blockquote>\n<h2><span id=\"实现jsonp\">实现JSONP</span></h2><h3><span id=\"python-突击后台\">Python 突击后台</span></h3><pre><code># coding:utf-8\nfrom flask import Flask\nfrom flask import request\nfrom flask import json\napp=Flask(__name__)\n\n@app.route(&quot;/us&quot;)\ndef ruin():\n    return request.args.get(&apos;callback&apos;)+&quot;({a:1,b:2})&quot;\n\nif __name__ == &apos;__main__&apos;:\n    app.run(port=8888,debug=True)</code></pre><h3><span id=\"jquery接到命令\">Jquery接到命令</span></h3><pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;title&gt;a&lt;/title&gt;\n        &lt;script src=&quot;http://cdn.static.runoob.com/libs/jquery/1.8.3/jquery.js&quot;&gt;&lt;/script&gt;   \n&lt;/head&gt;\n\n  &lt;body&gt;\n    &lt;script&gt;\n    function AB(obj){\n        console.log(obj);\n    }\n    $.getScript(&quot;http://127.0.0.1:8888/us?callback=AB&quot;,function(data){\n        console.log(data);\n    });\n    &lt;/script&gt;\n  &lt;/body&gt;\n&lt;/html&gt;</code></pre><h3><span id=\"控制台告诉我答案\">控制台告诉我答案</span></h3><p><img src=\"http://be-sunshine.cn/wp-content/uploads/2018/06/fabc862147ac8e0ad3ed25d6bfa9c7e5.png\" alt></p>\n<h1><span id=\"mavendone\">Maven(Done)</span></h1><blockquote>\n<p>学习记录贴</p>\n</blockquote>\n<p><a href=\"http://be-sunshine.cn/index.php/2018/06/20/maven/\" target=\"_blank\" rel=\"noopener\">http://be-sunshine.cn/index.php/2018/06/20/maven/</a></p>\n<h1><span id=\"oauth-微服务-socket-nio-redis-消息队列\">OAuth 、 微服务 、 Socket、NIO、Redis、消息队列</span></h1>","categories":[{"name":"技术","slug":"技术","count":10,"path":"api/categories/技术.json"}],"tags":[{"name":"技术","slug":"技术","count":14,"path":"api/tags/技术.json"}]}