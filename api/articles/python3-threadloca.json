{"title":"python3学习 ThreadLocal线程局部变量","slug":"python3-threadloca","date":"2017-07-19T07:43:31.000Z","updated":"2019-07-03T13:51:36.850Z","comments":true,"path":"api/articles/python3-threadloca.json","photos":[],"link":"","excerpt":null,"covers":null,"content":"<p><strong>【Source Code】</strong> <strong>局部变量传递,避免使用线程锁</strong> <strong>github:</strong></p>\n<ul>\n<li><strong><a href=\"https://github.com/834930269/python_study/blob/master/multiprocessing/ThreadLocal.py\" target=\"_blank\" rel=\"noopener\">ThreadLocal.py</a></strong></li>\n</ul>\n<p>**#Thread-较量级线程</p>\n<p>#建议在多线程环境下用局部变量,但传递变量传递很麻烦</p>\n<p>‘’’<br>def process_student(name):<br>    std=Student(name)<br>    #std是局部变量,但是每个函数都要用它,因此必须传过去<br>    #一层一层的传<br>    do_task_1(std)<br>    do_task_2(std)</p>\n<p>def do_task_1(std):<br>    do_subtask_1(std)<br>    do_subtask_1(std)</p>\n<p>def do_task_2(std):<br>    do_subtask_2(std)<br>    do_subtask_2(std)<br>‘’’</p>\n<p>#考虑,以每层的thread对象作为key,值为操作对象</p>\n<p>class Student:<br>    def __init__(self,name):<br>        self.name=name</p>\n<p>global_dict = {}<br>def std_thread(name):<br>    std=Student(name)<br>    #吧std放到全局变量中dict中<br>    global_dict[threading.current_thread()]=std<br>    do_task_1()<br>    do_task_2()</p>\n<p>def do_task_1():<br>    #不传入std,而是根据当前线程查找<br>    std=global_dict[threading,current_thread()]<br>    #…</p>\n<p>def do_task_2():<br>    #任何函数都可以根据当前线程查找<br>    std=global_dict[threading,current_thread()]<br>    #…</p>\n<p>#ThreadLocal应运而生，不用查找dict，ThreadLocal帮你自动做这件事<br>import threading</p>\n<p>#创建全局ThreadLocal对象:<br>local_school=threading.local()<br>def process_student():<br>    #获取当前县城关联的student<br>    std=local_school.student<br>    print(‘Hello,%s (in %s)\\n’ % (std,threading.current_thread().name))</p>\n<p>def process_thread(name):<br>    #绑定ThreadLocal的student:<br>    local_school.student=name<br>    process_student()</p>\n<p>t1=threading.Thread(target=process_thread,args=(‘Alice’,),name=’Thread_A’)<br>t2=threading.Thread(target=process_thread,args=(‘Bob’,),name=’Thread_B’)<br>t1.start()<br>t2.start()<br>t1.join()<br>t2.join()</p>\n<p>#ThreadLocal解决了线程锁的问题,把所有的变量都处理成局部变量,互不影响**</p>\n","categories":[{"name":"Python","slug":"Python","count":41,"path":"api/categories/Python.json"}],"tags":[{"name":"Python","slug":"Python","count":65,"path":"api/tags/Python.json"}]}