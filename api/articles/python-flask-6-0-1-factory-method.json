{"title":"Python Flask 6.0.1 工厂函数","slug":"python-flask-6-0-1-factory-method","date":"2017-10-12T13:53:30.000Z","updated":"2019-07-03T13:51:36.858Z","comments":true,"path":"api/articles/python-flask-6-0-1-factory-method.json","photos":[],"link":"","excerpt":null,"covers":null,"content":"<p>开始大型网站架构的时候,有很多概念晦涩难懂,其中就有这个工厂函数. 以下是来自别人的博客: <a href=\"http://blog.csdn.net/qbw2010/article/details/45314541http://blog.csdn.net/qbw2010/article/details/45314541\" title=\"...Clicke Here...\" target=\"_blank\" rel=\"noopener\"><code>...Clicke Here...</code></a></p>\n<pre><code>def maker(N):  \n    def action(X):  \n        return X ** N  \n    return action  </code></pre><p>这个函数就是一个典型的<code>工厂函数</code>. 其中会牵扯到一个概念,<code>延迟执行</code>. 我们可以看到,这个函数是有<code>参数</code>的. 实例化对象:</p>\n<pre><code>f = maker(2)  </code></pre><p>然后我们在对象实例化后传入参数:</p>\n<pre><code>f(3)</code></pre><p>结果会输出9. 每次maker()的时候都会生成一个新的实例化对象. 而用实例化对象传入参数返回的就是返回的<code>调用函数返回的值</code>.</p>\n<pre><code> 1、Python中的def语句是一个可执行语句——函数并不存在，直到Python运行了def后才存在。当Python运行到def语句时，将创建一个函数对象，并将其赋值给某一变量名，这个变量名就是函数名。\n\n2、当函数被调用时，其调用者停止运行直到这个函数完成了工作，之后函数将控制权返回调用者。函数通过return语句将计算得到的值传递给调用者，返回值成为函数调用的结果，即return将一个函数结果发送给调用者。\n\n3、参数通过赋值传递给了函数。改变参数名并不会改变调用者中的变量名，但是改变传递的可变参数可以改变调用者共享的那个对象，即函数是通过赋值（对象引用）传递的。\n\n 4、函数maker里面嵌套了一个函数action，首先传给maker函数一个参数N，这个参数传给了action函数，action函数获得具体的参数形成具体的函数，此时，action(X)函数已经具体化了，也就是def action(X):return X**2，然后将action(X)返回给顶层，并赋值给f，即f是action(X)，然后再传递参数到f中，也就是传给了action(X)。</code></pre><p>在书中的:</p>\n<pre><code>def create_app(config_name):\n    app=Flask(__name__)\n    app.config.from_object(config[config_name])\n    config[config_name].init_app(app)   \n\n    bootstrap.init_app(app)\n    mail.init_app(app)\n    moment.init_app(app)\n    db.init_app(app)\n    from .main import main as main_blueprint\n    app.register_blueprint(main_blueprint)\n\n    return app</code></pre><p>即为工厂函数,接受的参数是Config_name. 其返回的是实例化后的app对象,即可以对每种单元测试进行覆盖,而并非是对每种测试都重新运行一遍. 想对哪种单元测试进行测试时,只需调用其(工厂函数)返回的app实例化对象即可. 以下是我自己写的<code>工厂函数单元测试</code>样例:</p>\n<pre><code>class mq(object):\n    def __init__(self,string_c):\n        self.config_str=string_c\n    def print_str(self):\n        print(self.config_str)\n\ndef crete_factory_method(config_str):\n    tp=mq(config_str)\n    return tp\n\nfactory_test = crete_factory_method(&apos;这是第一个单元测试&apos;)\n\nfactory_test2 = crete_factory_method(&apos;这是第二个单元测试&apos;)\n\nfactory_test.print_str()\n#Out[]:这是第一个单元测试\n\nfactory_test2.print_str()\n#Out[]:这是第二个单元测试</code></pre><p>这样就明白了吧:)</p>\n","categories":[{"name":"Flask","slug":"Flask","count":18,"path":"api/categories/Flask.json"},{"name":"Python","slug":"Flask/Python","count":16,"path":"api/categories/Flask/Python.json"}],"tags":[{"name":"Flask","slug":"Flask","count":20,"path":"api/tags/Flask.json"},{"name":"Python","slug":"Python","count":65,"path":"api/tags/Python.json"}]}