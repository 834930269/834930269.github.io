{"title":"Spring 注解 @ModelAttribute","slug":"spring-annotation-modelattribute","date":"2019-02-05T09:25:30.000Z","updated":"2019-07-03T13:51:36.864Z","comments":true,"path":"api/articles/spring-annotation-modelattribute.json","photos":[],"link":"","excerpt":null,"covers":null,"content":"<h1 id=\"Spring-MVC-表单标签库\"><a href=\"#Spring-MVC-表单标签库\" class=\"headerlink\" title=\"Spring MVC 表单标签库\"></a>Spring MVC 表单标签库</h1><p><a href=\"http://www.funtl.com/zh/spring-mvc/Spring-MVC-%E8%A1%A8%E5%8D%95%E6%A0%87%E7%AD%BE%E5%BA%93.html#%E5%8D%95%E9%80%89%E6%8C%89%E9%92%AE%EF%BC%88%E5%A4%9A%E9%80%89%EF%BC%89\" target=\"_blank\" rel=\"noopener\">http://www.funtl.com/zh/spring-mvc/Spring-MVC-%E8%A1%A8%E5%8D%95%E6%A0%87%E7%AD%BE%E5%BA%93.html#%E5%8D%95%E9%80%89%E6%8C%89%E9%92%AE%EF%BC%88%E5%A4%9A%E9%80%89%EF%BC%89</a></p>\n<h1 id=\"JQuery-Validation-Bootstrap-前端验证\"><a href=\"#JQuery-Validation-Bootstrap-前端验证\" class=\"headerlink\" title=\"JQuery Validation+Bootstrap(前端验证)\"></a>JQuery Validation+Bootstrap(前端验证)</h1><p><a href=\"http://www.funtl.com/zh/supplement1/jQuery-Validation.html#%E9%A1%B5%E9%9D%A2%E5%BC%95%E7%94%A8\" target=\"_blank\" rel=\"noopener\">http://www.funtl.com/zh/supplement1/jQuery-Validation.html#%E9%A1%B5%E9%9D%A2%E5%BC%95%E7%94%A8</a></p>\n<h1 id=\"JQuery-iCheck-Bootstrap-前端复选框\"><a href=\"#JQuery-iCheck-Bootstrap-前端复选框\" class=\"headerlink\" title=\"JQuery iCheck+Bootstrap(前端复选框)\"></a>JQuery iCheck+Bootstrap(前端复选框)</h1><p><a href=\"http://www.funtl.com/zh/supplement1/jQuery-iCheck.html#%E6%BF%80%E6%B4%BB-icheck\" target=\"_blank\" rel=\"noopener\">http://www.funtl.com/zh/supplement1/jQuery-iCheck.html#%E6%BF%80%E6%B4%BB-icheck</a></p>\n<h1 id=\"什么是-ModelAttribute\"><a href=\"#什么是-ModelAttribute\" class=\"headerlink\" title=\"什么是 @ModelAttribute?\"></a>什么是 @ModelAttribute?</h1><ul>\n<li>绑定请求参数到命令对象：放在功能处理方法的入参上时，用于将多个请求参数绑定到一个命令对象，从而简化绑定流程，而且自动暴露为模型数据用于视图页面展示时使用</li>\n<li>暴露 @RequestMapping 方法返回值为模型数据：放在功能处理方法的返回值上时，是暴露功能处理方法的返回值为模型数据，用于视图页面展示时使用</li>\n<li>暴露表单引用对象为模型数据：放在处理器的一般方法（非功能处理方法）上时，是为表单准备要展示的表单引用对象，如注册时需要选择的所在城市等，而且在执行功能处理方法（@RequestMapping 注解的方法）之前，自动添加到模型对象中，用于视图页面展示时使用</li>\n</ul>\n<blockquote>\n<p>即简化AOP编程,不使用拦截器在同一Controller下直接进行拦截或者预处理,其属性会继承给每一个RequestMapping的视图层.</p>\n</blockquote>\n<h1 id=\"例子\"><a href=\"#例子\" class=\"headerlink\" title=\"例子\"></a>例子</h1><pre><code>package com.funtl.my.shop.web.admin.web.controller;\n\nimport com.funtl.my.shop.commons.dto.BaseResult;\nimport com.funtl.my.shop.domain.TbUser;\nimport com.funtl.my.shop.web.admin.service.TbUserService;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Controller;\nimport org.springframework.ui.Model;\nimport org.springframework.web.bind.annotation.ModelAttribute;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RequestMethod;\nimport org.springframework.web.servlet.mvc.support.RedirectAttributes;\n\nimport java.util.List;\n\n@Controller\n@RequestMapping(value=&quot;user&quot;)\npublic class UserController {\n    @Autowired\n    private TbUserService tbUserService;\n\n    @ModelAttribute\n    public TbUser getTbUser(Long id){\n        TbUser tbUser=null;\n        if(id!=null){\n            tbUser=tbUserService.getById(id);\n        }\n\n        else{\n            tbUser=new TbUser();\n        }\n        return tbUser;\n    }\n\n\n    /**\n     * 跳转到用户列表页\n     * @param model\n     * @return\n     */\n    @RequestMapping(value=&quot;list&quot;,method= RequestMethod.GET)\n    public String list(Model model){\n        List&lt;TbUser&gt; tbUsers=tbUserService.selectAll();\n        model.addAttribute(&quot;tbUsers&quot;,tbUsers);\n        return &quot;user_list&quot;;\n    }\n\n    @RequestMapping(value=&quot;form&quot;,method=RequestMethod.GET)\n    public String form(){\n        return &quot;user_form&quot;;\n    }\n\n    @RequestMapping(value=&quot;save&quot;,method=RequestMethod.POST)\n    public String save(TbUser tbUser, Model model,RedirectAttributes redirectAttributes){\n        BaseResult baseResult=tbUserService.save(tbUser);\n        //保存成功\n        if(baseResult.getStatus()==200){\n            redirectAttributes.addFlashAttribute(&quot;baseResult&quot;,baseResult);\n            return &quot;redirect:/user/list&quot;;\n        }\n        //保存失败\n        else{\n            model.addAttribute(&quot;baseResult&quot;,baseResult);\n            return &quot;user_form&quot;;\n        }\n    }\n}</code></pre><blockquote>\n<p>这样操作过后可以很轻松的将 预处理的TbUser绑定到Model上.</p>\n</blockquote>\n","categories":[{"name":"Spring","slug":"Spring","count":4,"path":"api/categories/Spring.json"}],"tags":[{"name":"Spring","slug":"Spring","count":6,"path":"api/tags/Spring.json"}]}