{"title":"Let's Gank Java - 6st","slug":"lets-gank-java-6st","date":"2017-11-17T13:14:56.000Z","updated":"2019-07-03T13:51:36.859Z","comments":true,"path":"api/articles/lets-gank-java-6st.json","photos":[],"link":"","excerpt":null,"covers":null,"content":"<p>We can use the typeof <em>string</em> to instance a <em>object</em>. Demo</p>\n<pre><code>import java.util.*;\npublic class GeneraicMethod {\n    public static void main(String[] args){\n        Date date=BeanUtil.getInstance(&quot;java.util.Date&quot;);\n        System.out.println(date);\n    }\n\n}\n\nclass BeanUtil{//泛型方法\n    //&lt;T&gt; T 反馈类型//参数用到的T都需要放在函数前面\n    public static &lt;T&gt; T getInstance( String clzName ){\n        try{\n            Class c = Class.forName(clzName);\n            return (T) c.newInstance();\n        }\n        catch(ClassNotFoundException ex){}\n        catch (InstantiationException ex){}\n        catch (IllegalAccessException ex){}\n        return null;\n    }\n}</code></pre><p>Demo2</p>\n<pre><code>import java.util.*;\npublic class GenericTreeClass {\n    public static void main(String[] args){\n        TNode&lt;String&gt; t = new TNode&lt;&gt;(&quot;Roo&quot;);\n        t.add(&quot;Left&quot;); t.add(&quot;Middle&quot;);\n        t.getChild(0).add(&quot;aaa&quot;);\n        t.getChild(0).add(&quot;bbb&quot;);\n        t.traverse();\n    }\n}\n\nclass TNode&lt;T&gt;{\n    private T value;\n    private ArrayList&lt;TNode&lt;T&gt;&gt; children = new ArrayList&lt;&gt;();\n\n    TNode(T v){ this.value= v; }//构造函数\n    public T getValue(){\n        return this.value;\n    }\n    public void add(T v){\n        TNode&lt;T&gt; child=new TNode&lt;&gt;(v);\n        this.children.add(child);\n    }\n    public TNode&lt;T&gt; getChild(int i){\n        if((i&lt;0) || (i&gt;this.children.size())) return null;\n        return (TNode&lt;T&gt;)this.children.get(i);\n    }\n    public void traverse() {\n        //查找所有\n        System.out.println(this.value);\n        for (TNode child : this.children)\n            child.traverse();\n    }\n}</code></pre><p>Generaic Method Limitation.</p>\n<pre><code>reverse&lt;List&lt;?&gt; list&gt;//限定为Object(无限定)\naddAll(Collection&lt;? extends E&gt; col)//extends\nfill(List&lt;? super T&gt; list,T obj)//super</code></pre>","categories":[{"name":"Java","slug":"Java","count":21,"path":"api/categories/Java.json"}],"tags":[{"name":"Java","slug":"Java","count":21,"path":"api/tags/Java.json"}]}