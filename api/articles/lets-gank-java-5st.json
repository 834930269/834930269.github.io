{"title":"Let's Gank Java - 5st","slug":"lets-gank-java-5st","date":"2017-11-15T09:27:26.000Z","updated":"2019-07-03T13:51:36.859Z","comments":true,"path":"api/articles/lets-gank-java-5st.json","photos":[],"link":"","excerpt":null,"covers":["http://be-sunshine.cn/wp-content/uploads/2017/11/QQ%E6%88%AA%E5%9B%BE20171115171542.jpg","http://be-sunshine.cn/wp-content/uploads/2017/11/518.jpg","http://be-sunshine.cn/wp-content/uploads/2017/11/522.jpg"],"content":"<p>1.String Methods</p>\n<pre><code>class TestStringMethod\n{\n    public static void main(String[] args) \n    {\n        String s = new String( &quot;Hello World&quot; );\n\n        System.out.println( s.length() );\n        System.out.println( s.indexOf(&apos;o&apos;) );\n        System.out.println( s.indexOf(&quot;He&quot;) );\n        System.out.println( s.startsWith(&quot;He&quot;) );\n        System.out.println( s.equals(&quot;Hello world&quot;) );\n        System.out.println( s.equalsIgnoreCase(&quot;Hello world&quot;) );\n        System.out.println( s.compareTo(&quot;Hello Java&quot;) );\n        System.out.println( s.charAt(1) );\n        System.out.println( s.substring(0,2) );\n        System.out.println( s.substring(2) );\n        System.out.println( s.concat(&quot;!!!&quot;) );\n        System.out.println( s.trim() );\n        System.out.println( s.toUpperCase() );\n        System.out.println( s.toLowerCase() );\n        System.out.println( s.replace(&apos;o&apos;, &apos;x&apos; ) );\n\n        System.out.println( s );  //注意，s本身没有改变\n    }\n}</code></pre><p><a href=\"http://be-sunshine.cn/wp-content/uploads/2017/11/QQ截图20171115171542.jpg\" target=\"_blank\" rel=\"noopener\"><img src=\"http://be-sunshine.cn/wp-content/uploads/2017/11/QQ%E6%88%AA%E5%9B%BE20171115171542.jpg\" alt></a> 比较字符串相加和直接将字符串添加至尾部的时间: 第一个是字符串相加,在Java中,每次字符串相加都会生成一个StringBuilder,再append,最后tostring(). 而第二种方法直接append(),tostring().</p>\n<pre><code>import java.util.*;\nclass StringAndStringBuffer \n{\n    public static void main(String[] args) \n    {\n        String a = &quot;a&quot;;\n        String s = &quot;&quot;;\n        StringBuffer sb = new StringBuffer();\n\n        final int N = 10000;\n\n        long t0 = System.currentTimeMillis();\n        for( int i=0; i&lt;N; i++) s+=a;//每次相加都会新生成一个StringBuffer类\n        long t1 = System.currentTimeMillis();\n        for( int i=0; i&lt;N; i++) sb.append(a);//不生成SB类\n        long t2 = System.currentTimeMillis();\n\n        System.out.println(t1-t0);\n        System.out.println(t2-t1);\n    }\n}</code></pre><p><a href=\"http://be-sunshine.cn/wp-content/uploads/2017/11/518.jpg\" target=\"_blank\" rel=\"noopener\"><img src=\"http://be-sunshine.cn/wp-content/uploads/2017/11/518.jpg\" alt></a> StringTokenizer(字符串截取) <code>st.hasMoreTokens()</code>:存在下一个子串 <code>st.nextToken()</code>:下一个子串 <code>Double.parseDouble(string);</code>:将string转换为double 基本用法<code>StringTokenizer st = new StringTokenizer(string, 格式化字符(比如&quot; &quot;));</code></p>\n<pre><code>import java.util.*;\nclass TestStringTokenizer \n{\n    public static void main(String[] args) \n    {\n        StringTokenizer st = new StringTokenizer(&quot;this is a test&quot;, &quot; &quot;);\n        while (st.hasMoreTokens()) {\n            System.out.println(st.nextToken());\n        }\n        st = new StringTokenizer(&quot;253,197,546&quot;, &quot;,&quot;);\n        double sum = 0;\n        while (st.hasMoreTokens()) {\n            sum += Double.parseDouble(st.nextToken());\n        }\n        System.out.println( sum );\n    }\n}</code></pre><p><img src=\"http://be-sunshine.cn/wp-content/uploads/2017/11/522.jpg\" alt=\"http://be-sunshine.cn/wp-content/uploads/2017/11/522.jpg\"></p>\n","categories":[{"name":"Java","slug":"Java","count":21,"path":"api/categories/Java.json"}],"tags":[{"name":"Java","slug":"Java","count":21,"path":"api/tags/Java.json"}]}