{"title":"python3学习 oop-多重继承+MixIn","slug":"python3-oop-mixin","date":"2017-07-16T05:56:37.000Z","updated":"2019-07-03T13:51:36.849Z","comments":true,"path":"api/articles/python3-oop-mixin.json","photos":[],"link":"","excerpt":null,"covers":null,"content":"<p><strong>【Source Code】</strong> <strong>github: <a href=\"https://github.com/834930269/python_study/blob/master/oop/Multi%20inheritance.py\" target=\"_blank\" rel=\"noopener\">Multi inheritance.py</a></strong></p>\n<hr>\n<p> **# coding: utf-8</p>\n<p># In[1]:</p>\n<p>#采用多重继承。首先，主要的类层次仍按照哺乳类和鸟类设计：<br>class Animal(object):<br>    pass</p>\n<p># 大类:<br>class Mammal(Animal):<br>    pass</p>\n<p>class Bird(Animal):<br>    pass</p>\n<p># 各种动物:<br>class Dog(Mammal):<br>    pass</p>\n<p>class Bat(Mammal):<br>    pass</p>\n<p>class Parrot(Bird):<br>    pass</p>\n<p>class Ostrich(Bird):<br>    pass</p>\n<p>#现在，我们要给动物再加上Runnable和Flyable的功能，</p>\n<p>#只需要先定义好Runnable和Flyable的类：<br>class Runnable(object):<br>    def run(self):<br>        print(‘Running…’)</p>\n<p>class Flyable(object):<br>    def fly(self):<br>        print(‘Flying…’)</p>\n<p>#对于需要Runnable功能的动物，就多继承一个Runnable，例如Dog：<br>class Dog(Mammal, Runnable):<br>    pass</p>\n<p>#对于需要Flyable功能的动物，就多继承一个Flyable，例如Bat：<br>class Bat(Mammal, Flyable):<br>    pass</p>\n<p>#通过多重继承，一个子类就可以同时获得多个父类的所有功能。</p>\n<p># In[4]:</p>\n<p>‘’’<br>在设计类的继承关系时，通常，主线都是单一继承下来的，例如，<br>Ostrich继承自Bird。但是，如果需要“混入”额外的功能，通过多<br>重继承就可以实现，比如，让Ostrich除了继承自Bird外，再同时继<br>承Runnable。这种设计通常称之为MixIn。</p>\n<p>为了更好地看出继承关系，我们把Runnable和Flyable改为RunnableMixIn<br>和FlyableMixIn。类似的，你还可以定义出肉食动物CarnivorousMixIn和<br>植食动物HerbivoresMixIn，让某个动物同时拥有好几个MixIn：</p>\n<p>class Dog(Mammal, RunnableMixIn, CarnivorousMixIn):<br>    pass<br>‘’’</p>\n<p>‘’’<br>MixIn的目的就是给一个类增加多个功能，这样，在设计类的时候，我们优先考虑通过多重继承来组合多个MixIn的功能，而不是设计多层次的复杂的继承关系。</p>\n<p>Python自带的很多库也使用了MixIn。举个例子，Python自带了TCPServer和UDPServer这两类网络服务，而要同时服务多个用户就必须使用多进程或多线程模型，这两种模型由ForkingMixIn和ThreadingMixIn提供。通过组合，我们就可以创造出合适的服务来。</p>\n<p>比如，编写一个多进程模式的TCP服务，定义如下：</p>\n<p>class MyTCPServer(TCPServer, ForkingMixIn):<br>    pass</p>\n<p>编写一个多线程模式的UDP服务，定义如下：</p>\n<p>class MyUDPServer(UDPServer, ThreadingMixIn):<br>    pass</p>\n<p>如果你打算搞一个更先进的协程模型，可以编写一个CoroutineMixIn：</p>\n<p>class MyTCPServer(TCPServer, CoroutineMixIn):<br>    pass</p>\n<p>这样一来，我们不需要复杂而庞大的继承链，只要选择组合不同的类的功能，就可以快速构造出所需的子类。</p>\n<p>‘’’</p>\n<p># In[ ]:**</p>\n","categories":[{"name":"Python","slug":"Python","count":41,"path":"api/categories/Python.json"}],"tags":[{"name":"Python","slug":"Python","count":65,"path":"api/tags/Python.json"}]}