{"title":"山东省第七届省赛","slug":"acm-icpc-7","date":"2018-03-04T02:42:24.000Z","updated":"2019-07-03T13:51:36.862Z","comments":true,"path":"api/articles/acm-icpc-7.json","photos":[],"link":"","excerpt":null,"covers":null,"content":"<h1 id=\"A-水\"><a href=\"#A-水\" class=\"headerlink\" title=\"A:水\"></a>A:水</h1><pre><code>#include&lt;bits/stdc++.h&gt;\nusing namespace std;\nint main(){\n    int T,A,B;\n    while(~scanf(&quot;%d&quot;,&amp;T)){\n        for(int i=0;i&lt;T;++i){\n            cin&gt;&gt;A&gt;&gt;B;\n            if(A%B){\n                cout&lt;&lt;(A/B)+1&lt;&lt;endl;\n            }else{\n                cout&lt;&lt;(A/B)&lt;&lt;endl;\n            }\n        }\n    }\n    return 0;\n}</code></pre><h1 id=\"B-二分-或者可以暴力-只有45个FB-结论题-用到斐波那契博弈里的一个结论-任何数都可以被拆成不同斐波那契的和-进而猜测直接从最大的小于N的FB往下找即可\"><a href=\"#B-二分-或者可以暴力-只有45个FB-结论题-用到斐波那契博弈里的一个结论-任何数都可以被拆成不同斐波那契的和-进而猜测直接从最大的小于N的FB往下找即可\" class=\"headerlink\" title=\"B:二分(或者可以暴力,只有45个FB)结论题,用到斐波那契博弈里的一个结论:任何数都可以被拆成不同斐波那契的和,进而猜测直接从最大的小于N的FB往下找即可\"></a>B:二分(或者可以暴力,只有45个FB)结论题,用到斐波那契博弈里的一个结论:任何数都可以被拆成不同斐波那契的和,进而猜测直接从最大的小于N的FB往下找即可</h1><h2 id=\"我吐槽下SDUT的OJ…尼玛10-9能写成109-劳资找了大大大大大大半天错硬是不知道错哪里了艹\"><a href=\"#我吐槽下SDUT的OJ…尼玛10-9能写成109-劳资找了大大大大大大半天错硬是不知道错哪里了艹\" class=\"headerlink\" title=\"我吐槽下SDUT的OJ…尼玛10^9能写成109,劳资找了大大大大大大半天错硬是不知道错哪里了艹\"></a>我吐槽下SDUT的OJ…尼玛10^9能写成109,劳资找了大大大大大大半天错硬是不知道错哪里了艹</h2><h2 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h2><pre><code>#include&lt;bits/stdc++.h&gt;\nusing namespace std;\nconst int maxn=45;\nint Fb[maxn],M;\nint vis[maxn],has_ans;\n\nvoid init(){\n    Fb[0]=1;\n    Fb[1]=2;\n    for(int i=2;i&lt;maxn;++i){\n        Fb[i]=Fb[i-1]+Fb[i-2];\n        //printf(&quot;%d\\n&quot;,Fb[i]);\n    }\n\n}\n\nvoid solve(int N){\n    stack&lt;int&gt; ans;\n    int mx=maxn;\n    while(N!=0){\n        int ind=lower_bound(Fb,Fb+mx,N)-Fb;\n        if(Fb[ind]&gt;N)ind-=1;\n        N=N-Fb[ind];\n        ans.push(Fb[ind]);\n    }\n    printf(&quot;%d=&quot;,M);\n    int t=0;\n    while(!ans.empty()){\n        if(!t){\n            printf(&quot;%d&quot;,ans.top());t++;\n        }else printf(&quot;+%d&quot;,ans.top());\n        ans.pop();\n    }\n    printf(&quot;\\n&quot;);\n}\n\nint main(){\n    init();\n    int T;\n    scanf(&quot;%d&quot;,&amp;T);\n    while(T--){\n        memset(vis,0,sizeof(vis));\n        has_ans=0;\n        scanf(&quot;%d&quot;,&amp;M);\n        solve(M);\n    }\n    return 0;\n}\n\n/***************************************************\nUser name: 奥术大师大所大\nResult: Accepted\nTake time: 40ms\nTake Memory: 196KB\nSubmit time: 2018-03-04 13:39:50\n****************************************************/</code></pre><h1 id=\"E-简单枚举\"><a href=\"#E-简单枚举\" class=\"headerlink\" title=\"E:简单枚举\"></a>E:简单枚举</h1><pre><code>#include&lt;bits/stdc++.h&gt;\nusing namespace std;\nconst int maxn=110;\n\nint T,N,M;\nchar mp[maxn][maxn];\nint dist[4][2]={ {1,0},{-1,0},{0,-1},{0,1}};\n\nbool check(int x,int y){\n    if(x&lt;1 || x&gt;M || y&lt;1 || y&gt;N) return false;\n    return true;\n}\n\nint main(){\n    scanf(&quot;%d&quot;,&amp;T);\n    while(T--){\n        int ans=0;\n        scanf(&quot;%d%d&quot;,&amp;M,&amp;N);\n        for(int i=1;i&lt;=M;++i){\n            scanf(&quot;%s&quot;,mp[i]+1);\n        }\n        for(int i=1;i&lt;=M;++i){\n            for(int j=1;j&lt;=N;++j){\n                if(mp[i][j]==&apos;#&apos;){\n                    for(int k=0;k&lt;4;++k){\n                        int x=i+dist[k][0],y=j+dist[k][1];\n                        if(check(x,y)){\n                            if(mp[x][y]==&apos;#&apos;)continue;\n                            int room=0;\n                            for(int kk=0;kk&lt;4;++kk){\n                                int xx=x+dist[kk][0],yy=y+dist[kk][1];\n                                if(check(xx,yy)){\n                                    if(mp[xx][yy]==&apos;#&apos;)++room;\n                                }\n                            }\n                            if(room==1)ans++;\n                        }else ++ans;\n                    }\n                }\n            }\n        }\n        printf(&quot;%d\\n&quot;,ans);\n    }\n    return 0;\n}\n\n\n/***************************************************\nUser name: 奥术大师大所大\nResult: Accepted\nTake time: 228ms\nTake Memory: 212KB\nSubmit time: 2018-03-04 14:46:06\n****************************************************/</code></pre><h1 id=\"G-找规律-不像博弈-抱歉-会打表-但是规律想不出来-对不起\"><a href=\"#G-找规律-不像博弈-抱歉-会打表-但是规律想不出来-对不起\" class=\"headerlink\" title=\"G:找规律,不像博弈,抱歉,会打表,但是规律想不出来,对不起\"></a>G:找规律,不像博弈,抱歉,会打表,但是规律想不出来,对不起</h1><h2 id=\"打表\"><a href=\"#打表\" class=\"headerlink\" title=\"打表\"></a>打表</h2><pre><code>#include&lt;bits/stdc++.h&gt;\nusing namespace std;\n\nint solve(int N){\n    int ans=0;\n    for(int i=1;i&lt;N;++i){\n        for(int j=i;j&lt;N-i;++j){\n            int k=N-i-j;\n            if((i^j^k)==0) ans++;\n        }\n    }\n    return ans;\n}\n\nint main(){\n    for(int i=1;i&lt;=200;++i){\n        printf(&quot;%d: %d\\n&quot;,i,solve(i)/3);\n    }\n    return 0;\n}</code></pre><h2 id=\"找的规律-知道规律了-直接粘的别人代码\"><a href=\"#找的规律-知道规律了-直接粘的别人代码\" class=\"headerlink\" title=\"找的规律,知道规律了,直接粘的别人代码\"></a>找的规律,知道规律了,直接粘的别人代码</h2><pre><code>#include&lt;bits/stdc++.h&gt;\nusing namespace std;\nint main()\n{\n    int ans,pp;\n    int i;\n    long long int f[100];\n    f[2]=1;\n    f[1]=0;\n    f[0]=0;\n    for(i=3;i&lt;30;i++)\n        f[i]=f[i-1]*3+1;\n    long long int a;\n    int T;\n    cin&gt;&gt;T;\n    while(T--)\n    {\n        cin&gt;&gt;a;\n        ans=0;\n        if(a%2)\n        {\n            cout&lt;&lt;0&lt;&lt;endl;\n            continue;\n        }\n        while(a!=0)\n        {\n            pp=a%2;\n            if(pp)\n                ans++;\n            a/=2;\n        }\n        cout&lt;&lt;f[ans]&lt;&lt;endl;\n    }\n}</code></pre><h1 id=\"J-题目翻译-http-www-bubuko-com-infodetail-1612259-html-说实话-完全理解题意了基本就是水题-但对我不是\"><a href=\"#J-题目翻译-http-www-bubuko-com-infodetail-1612259-html-说实话-完全理解题意了基本就是水题-但对我不是\" class=\"headerlink\" title=\"J:题目翻译: http://www.bubuko.com/infodetail-1612259.html 说实话,完全理解题意了基本就是水题.但对我不是.\"></a>J:题目翻译: <a href=\"http://www.bubuko.com/infodetail-1612259.html\" target=\"_blank\" rel=\"noopener\">http://www.bubuko.com/infodetail-1612259.html</a> 说实话,完全理解题意了基本就是水题.但对我不是.</h1><pre><code>#include&lt;bits/stdc++.h&gt;\nusing namespace std;\nint T;\nchar str[1000];\nint main(){\n    cin&gt;&gt;T;\n    while(T--){\n        int N,M;\n        cin&gt;&gt;N&gt;&gt;M;\n        int c=0,m=0,o=0,b=0;\n        getchar();\n        for(int i=0;i&lt;N;++i){\n            gets(str);\n            if(str[0]==&apos;C&apos;){\n                c++;\n            }else if(str[0]==&apos;M&apos;){\n                m++;\n            }else if(str[0]==&apos;O&apos;){\n                o++;\n            }else if(str[0]==&apos;B&apos;){\n                b++;\n            }\n        }\n        int ans=o*(2+(N-1)+m*2)+b*(2+m*2);\n        if(ans&gt;=M){\n            puts(&quot;Mrghllghghllghg!&quot;);\n        }else puts(&quot;Tell you a joke, the execution of Paladin.&quot;);\n    }\n    return 0;\n}</code></pre><h1 id=\"K-水\"><a href=\"#K-水\" class=\"headerlink\" title=\"K:水\"></a>K:水</h1><pre><code>#include&lt;bits/stdc++.h&gt;\nusing namespace std;\nconst int maxn=10010,maxm=5010;\nint N;\nstack&lt;char&gt; st;\nint main(){\n    while(~scanf(&quot;%d\\n&quot;,&amp;N)){\n        char qb;\n        while(N--){\n            int f=0;\n            do{\n                do{\n                    qb=getchar();\n                    if(isalpha(qb)) st.push(qb);\n                }while(qb!=&apos; &apos; &amp;&amp; qb!=&apos;\\n&apos;);\n                if(f==0)f++;\n                else printf(&quot; &quot;);\n                while(!st.empty()){\n                    printf(&quot;%c&quot;,st.top());\n                    st.pop();\n                }\n            }while(qb!=&apos;\\n&apos;);\n            printf(&quot;\\n&quot;);\n        }\n    }\n    return 0;\n}</code></pre>","categories":[{"name":"Sdut","slug":"Sdut","count":11,"path":"api/categories/Sdut.json"},{"name":"二分搜索","slug":"Sdut/二分搜索","count":1,"path":"api/categories/Sdut/二分搜索.json"},{"name":"博弈论","slug":"Sdut/二分搜索/博弈论","count":1,"path":"api/categories/Sdut/二分搜索/博弈论.json"},{"name":"第七届ACM山东省赛","slug":"Sdut/二分搜索/博弈论/第七届ACM山东省赛","count":1,"path":"api/categories/Sdut/二分搜索/博弈论/第七届ACM山东省赛.json"}],"tags":[{"name":"博弈论","slug":"博弈论","count":9,"path":"api/tags/博弈论.json"},{"name":"sdut","slug":"sdut","count":11,"path":"api/tags/sdut.json"},{"name":"二分搜索","slug":"二分搜索","count":3,"path":"api/tags/二分搜索.json"},{"name":"第七届ACM山东省赛","slug":"第七届ACM山东省赛","count":4,"path":"api/tags/第七届ACM山东省赛.json"}]}