{"title":"Eratosthenes 筛法","slug":"eratosthenes-p312","date":"2016-12-23T03:30:31.000Z","updated":"2019-07-03T13:51:36.844Z","comments":true,"path":"api/articles/eratosthenes-p312.json","photos":[],"link":"","excerpt":null,"covers":null,"content":"<p>俗称,埃氏筛法.这里是借用其思路. Problem: 给出正整数N和M,区间[N,M]内的”无平方因子”的数有多少个? 整数P无平方因子,当且仅当不存在k&gt;1,使得p是k^2的倍数,N,M∈[1,1e12],M-N&lt;=1e7. [分析]: 因为数据规模的限制,枚举肯定会超时. [思路]: 对于不超过sqrt(M)的所有素数p,筛掉[N,M]内p^2的倍数. [Code]:</p>\n<p>#include<iostream></iostream></p>\n<p>#include<algorithm></algorithm></p>\n<p>#include<cstring></cstring></p>\n<p>#include<cmath></cmath></p>\n<p>#define maxn 10000000+10<br>using namespace std;</p>\n<p>bool squre[maxn];//m-n个是否是无平方因子<br>bool is_prime[maxn];//素数表<br>int prime[maxn];</p>\n<p>int sieve(int n){<br>    int p=0;<br>    for(int i=0;i&lt;=n;i++) is_prime[i]=true;<br>    is_prime[0]=is_prime[1]=false;</p>\n<pre><code>for(int i=2;i&lt;=n;++i){\n    if(is_prime\\[i\\])\n        prime\\[p++\\]=i;\n    for(int j=2*i;j&lt;=n;j+=i)\n        is_prime\\[j\\]=false;\n}\nreturn p;</code></pre><p>}</p>\n<p>int NonSquare(int n,int m){<br>    memset(squre, true, sizeof(squre));<br>    int p=0;<br>    for(int i=0;prime[i]<em>prime[i]&lt;=m;++i){<br>        int d=prime[i]</em>prime[i];<br>        for(int j=1;j<em>d&lt;=m;++j)<br>            if(j</em>d&gt;=n)<br>                squre[j*d-n]=false;<br>    }<br>    for(int i=0;i&lt;=(m-n);++i)<br>        if(squre[i])p++;<br>    return p;<br>}</p>\n<p>int main(){<br>    int m,n,siv;<br>    sieve(1e7);<br>    while(cin&gt;&gt;n&gt;&gt;m){<br>        cout&lt;&lt;”[“&lt;&lt;n&lt;&lt;”,”&lt;&lt;m&lt;&lt;”]内无平方因子数为: “&lt;&lt;NonSquare(n,m)&lt;&lt;endl;<br>    }<br>    return 0;<br>}</p>\n<p>Save Save</p>\n","categories":[{"name":"算法学习","slug":"算法学习","count":4,"path":"api/categories/算法学习.json"}],"tags":[]}