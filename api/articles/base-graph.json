{"title":"算法学习-图论相关一些基础","slug":"base-graph","date":"2017-03-21T23:58:25.000Z","updated":"2019-07-03T13:51:36.846Z","comments":true,"path":"api/articles/base-graph.json","photos":[],"link":"","excerpt":null,"covers":["http://be-sunshine.cn/wp-content/uploads/2017/03/bfs-dfs.png"],"content":"<p><strong>【先贴上大神的代码截图】</strong> <a href=\"http://be-sunshine.cn/wp-content/uploads/2017/03/bfs-dfs.png\" target=\"_blank\" rel=\"noopener\"><img src=\"http://be-sunshine.cn/wp-content/uploads/2017/03/bfs-dfs.png\" alt></a>   <a href=\"http://be-sunshine.cn/wp-content/uploads/2017/03/SFA.png\" target=\"_blank\" rel=\"noopener\"><img src=\"http://be-sunshine.cn/wp-content/uploads/2017/03/SFA.png\" alt=\"floyd&amp;spfa\"></a>   <strong>【Code】</strong></p>\n<blockquote>\n<p><strong>#include<iostream></iostream></strong> <strong>#include<algorithm></algorithm></strong> <strong>#include<cstring></cstring></strong> <strong>using namespace std;</strong> <strong>struct node{</strong> **    node <em>next;*</em> **    int where;** **    int cost;** <strong>}a[10001],*first[1001];</strong> <strong>bool b[1001];</strong> <strong>inline void dfs(int now){</strong> **    b[now]=true;** **    for(node <em>x=first[now];x;x=x-&gt;next)*</em> **        if(!b[x-&gt;where])** **            dfs(x-&gt;where);** <strong>}</strong> <strong>inline void bfs(int S){</strong> **    int c[1001];** **    c[1]=S;** **    for(int k=1,l=1,l&lt;=k;++l){** **        int m=c[1];** **        for(node <em>x=first[m];x;x=x-&gt;next)*</em> **            if(!b[x-&gt;where])** **                b[x-&gt;where]=true,** **                c[++k]=x-&gt;where;    ** **    }** <strong>}</strong> <strong>//floyd只是一个模板</strong> <strong>inline void floyd(){</strong> **    for(int k=1;k&lt;=n;++k)** **        for(int i=1;i&lt;=n;++i)** **            for(int j=1;j&lt;=n;++j)** **                f[i][j]=min(f[i][j],f[i][k]+f[k][j]);** <strong>}</strong> <strong>//可以处理负边</strong> <strong>inline void spfa(int S,int T){</strong> **    int c[1001],dist[1001];** **    c[1]=S;** **    memset(dist,127,sizeof(dist));** **    dist[S]=0;** **    for(int k=1,l=1;l&lt;=k;++l){** **        int m=c[1];** **        b[m]=false;** **        for(node <em>x=first[m];x;x=x-&gt;next)*</em> **            if(dist[m]+x-&gt;cost&lt;dist[x-&gt;where])** **            {** **                dist[x-&gt;where]=dist[m]+x-&gt;cost;** **                if(!b[x-&gt;where])** **                    b[x-&gt;where]=true,** **                    c[++k]=x-&gt;where;** **            }** **    }**   <strong>}</strong> <strong>int main(){</strong> **    return 0;** <strong>}</strong></p>\n</blockquote>\n","categories":[{"name":"算法学习","slug":"算法学习","count":4,"path":"api/categories/算法学习.json"}],"tags":[{"name":"算法学习","slug":"算法学习","count":6,"path":"api/tags/算法学习.json"}]}