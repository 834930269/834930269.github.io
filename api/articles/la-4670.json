{"title":"LA 4670","slug":"la-4670","date":"2018-03-11T06:59:12.000Z","updated":"2019-07-03T13:51:36.862Z","comments":true,"path":"api/articles/la-4670.json","photos":[],"link":"","excerpt":null,"covers":null,"content":"<h1><span id=\"typeac自动机\">Type:AC自动机</span></h1><h1><span id=\"题意\">题意</span></h1><blockquote>\n<p>给你一堆子串和一个主串</p>\n<blockquote>\n<p>问你在主串中出现次数最多的子串有哪些,最后结果按字典序排列</p>\n</blockquote>\n</blockquote>\n<h1><span id=\"code\">Code</span></h1><pre><code>#include&lt;bits/stdc++.h&gt;\nusing namespace std;\n\nconst int maxn=11000;\nconst int maxm=152;\nconst int maxt=1e6+6;\n\nint T,N,tot_len;\nchar str[maxm][80],tot[maxt];\n\nstruct AC_AutoMaton{\n    static const int sigma_size=26;\n\n    int ch[maxn][sigma_size];\n\n    int f[maxn];\n\n    int cnt[maxn],val[maxn];\n    bool vis[maxn][sigma_size];\n\n    int siz,root,max_time;\n\n    vector&lt;string&gt; ans;\n\n    int newNode(){\n        for(int i=0;i&lt;sigma_size;++i){\n            ch[siz][i]=0;\n        }\n        for(int i=0;i&lt;sigma_size;++i){\n            vis[siz][i]=false;\n        }\n        f[siz]=val[siz]=0;\n        return siz++;\n    }\n\n    void init(){\n        ans.clear();\n        for(int i=0;i&lt;maxn;++i) val[i]=cnt[i]=0;\n        siz=0;root=0;max_time=0;\n        newNode();\n    }\n\n    int ord(char c){\n        if(isupper(c))\n            c=tolower(c);\n        return (int)(c-&apos;a&apos;);\n    }\n\n    void insert(char *s,int v){\n        int u=root,n=strlen(s);\n        for(int i=0;i&lt;n;++i){\n            int c=ord(s[i]);\n            if(!ch[u][c]) ch[u][c]=newNode();\n            u=ch[u][c];\n       }\n       val[u]=v;\n    }\n\n    void getFail(){\n        queue&lt;int&gt; Q;\n        Q.push(root);\n        while(!Q.empty()){\n            int k=Q.front();\n            Q.pop();\n            for(int c=0;c&lt;sigma_size;++c){\n                if(ch[k][c]){\n                    f[ch[k][c]]=k?ch[f[k]][c]:0;\n                    Q.push(ch[k][c]);\n                }\n                else ch[k][c]=ch[f[k]][c];\n            }\n        }\n    }\n\n    void Find(char *s){\n        int u=0,n=tot_len;\n        for(int i=0;i&lt;n;++i){\n            int c=ord(s[i]);\n            ///下面这句加不加都一样\n            //while(u &amp;&amp; !ch[u][c]) u=f[u];\n            u=ch[u][c];\n\n            int p=u;\n            //cout&lt;&lt;i&lt;&lt;&quot;  &quot;&lt;&lt;u&lt;&lt;&quot;: &quot;&lt;&lt;c&lt;&lt;endl;\n            ///while是用来判断子串的.这道题不需要加\n            while(p &amp;&amp; val[p]){\n                if(!vis[p][c]){\n                    cnt[val[p]]++;\n                    max_time=max(cnt[val[p]],max_time);\n                    p=f[p];\n                    vis[p][c]=true;\n                }\n            }\n        }\n    }\n\n    void print(){\n        printf(&quot;%d\\n&quot;,max_time);\n        for(int i=1;i&lt;=N;++i){\n            if(cnt[i]==max_time){\n                ans.push_back(str[i]);\n            }\n        }\n        sort(ans.begin(),ans.end());\n        for(int i=0;i&lt;ans.size();++i){\n            cout&lt;&lt;ans[i]&lt;&lt;endl;\n        }\n    }\n}aho;\n\nint main(){\n    while(~scanf(&quot;%d&quot;,&amp;N) &amp;&amp; N){\n        aho.init();\n        for(int i=1;i&lt;=N;++i){\n            scanf(&quot;%s&quot;,str[i]);\n            aho.insert(str[i],i);\n        }\n        getchar();\n        aho.getFail();\n        tot_len=0;\n        //scanf(&quot;%[^\\n]&quot;,str);\n        gets(tot);\n        tot_len=strlen(tot);\n        //cout&lt;&lt;tot_len&lt;&lt;endl;\n        aho.Find(tot);\n        aho.print();\n    }\n    return 0;\n}</code></pre>","categories":[{"name":"AC自动机","slug":"AC自动机","count":4,"path":"api/categories/AC自动机.json"},{"name":"LA","slug":"AC自动机/LA","count":1,"path":"api/categories/AC自动机/LA.json"},{"name":"字符串处理","slug":"AC自动机/LA/字符串处理","count":1,"path":"api/categories/AC自动机/LA/字符串处理.json"}],"tags":[{"name":"字符串处理","slug":"字符串处理","count":7,"path":"api/tags/字符串处理.json"},{"name":"AC自动机","slug":"AC自动机","count":4,"path":"api/tags/AC自动机.json"},{"name":"LA","slug":"LA","count":8,"path":"api/tags/LA.json"}]}