{"title":"python3学习 Class私有成员访问限制","slug":"python3-class-vt","date":"2017-07-15T16:20:55.000Z","updated":"2019-07-03T13:51:36.849Z","comments":true,"path":"api/articles/python3-class-vt.json","photos":[],"link":"","excerpt":null,"covers":null,"content":"<p><strong>【Source Code】</strong> <strong>github: <a href=\"https://github.com/834930269/python_study/blob/master/class/Visit_limit.py\" target=\"_blank\" rel=\"noopener\">Visit_limit.py</a></strong></p>\n<hr>\n<p> **# coding: utf-8</p>\n<p># In[3]:</p>\n<p>‘’’<br>如果要让内部属性不被外部访问，可以把属性的名称前加上<br>两个下划线<strong>，在Python中，实例的变量名如果以</strong>开头，<br>就变成了一个私有变量（private），只有内部可以访问，外<br>部不能访问，<br>‘’’<br>class student(object):<br>    def __init__(self,name,score):<br>        self.<strong>name=name<br>        self.</strong>score=score<br>    def print_score(self):<br>        print(‘%s: %s’ %(self.__name,self.__score))<br>‘’’<br>改完后，对于外部代码来说，没什么变动，但是已经无法从外部<br>访问实例变量.__name和实例变量.__score了:只能通过类内的方法<br>才可以调用这些私有变量<br>‘’’<br>bart = student(‘Bart Simpson’, 98)<br>bart.print_score()<br>print(bart.__name)</p>\n<p># In[4]:</p>\n<p>‘’’<br>如果外部想要获取name和score怎么办,<br>给student类添加get_name和get_score<br>外部想要修改怎么办,set_score</p>\n<p>需要注意的是，在Python中，变量名类似__xxx__的，<br>也就是以双下划线开头，并且以双下划线结尾的，是特殊变量，<br>特殊变量是可以直接访问的，不是private变量，所以，不能用<br>__name__、__score__这样的变量名。</p>\n<p>有些时候，你会看到以一个下划线开头的实例变量名，比如_name<br>，这样的实例变量外部是可以访问的，但是，按照约定俗成的规定，<br>当你看到这样的变量时，意思就是，“虽然我可以被访问，但是，<br>请把我视为私有变量，不要随意访问”。</p>\n<p>双下划线开头的实例变量是不是一定不能从外部访问呢？其实也不是。<br>不能直接访问__name是因为Python解释器对外把__name变量改成了_Student__name，<br>所以，仍然可以通过_Student__name来访问__name变量：<br>‘’’<br>print(bart._student__name)#好神奇</p>\n<p>#但是强烈建议你不要这么干，因为不同版本的Python解释器可能会把__name改成不同的变量名。</p>\n<p># In[5]:</p>\n<p>#所以如果外界对实例化对象设置私有变量的值,因为上面说了</p>\n<p>#私有变量会被改名为 _student__name这样,所以如果使用</p>\n<p>#bart.__name=’New Name’,则表示在该对象内新建一个变量</p>\n<p>#不影响本来的<strong>name<br>bart.</strong>name=’New name’<br>bart.print_score()</p>\n<p>#out[]: Bart Simpson: 98</p>\n<p># In[ ]:**</p>\n","categories":[{"name":"Python","slug":"Python","count":41,"path":"api/categories/Python.json"}],"tags":[{"name":"Python","slug":"Python","count":65,"path":"api/tags/Python.json"}]}