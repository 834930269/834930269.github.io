{"title":"2018年全国多校算法寒假训练营练习比赛（第五场） A 逆序数","slug":"2018-5-a","date":"2018-02-25T10:40:31.000Z","updated":"2019-07-03T13:51:36.862Z","comments":true,"path":"api/articles/2018-5-a.json","photos":[],"link":"","excerpt":null,"covers":null,"content":"<p>链接：<a href=\"https://www.nowcoder.com/acm/contest/77/A\" target=\"_blank\" rel=\"noopener\">https://www.nowcoder.com/acm/contest/77/A</a> 来源：牛客网</p>\n<h1 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h1><p>在一个排列中，如果一对数的前后位置与大小顺序相反，即前面的数大于后面的数，那么它们就称为一个逆序。一个排列中逆序的总数就称为这个排列的逆序数。比如一个序列为4 5 1 3 2， 那么这个序列的逆序数为7，逆序对分别为(4, 1), (4, 3), (4, 2), (5, 1), (5, 3), (5, 2),(3, 2)。</p>\n<h1 id=\"输入描述\"><a href=\"#输入描述\" class=\"headerlink\" title=\"输入描述:\"></a>输入描述:</h1><p>第一行有一个整数n(1 &lt;= n &lt;= 100000), 然后第二行跟着n个整数，对于第i个数a[i]，(0 &lt;= a[i] &lt;= 100000)。</p>\n<h1 id=\"输出描述\"><a href=\"#输出描述\" class=\"headerlink\" title=\"输出描述:\"></a>输出描述:</h1><p>输出这个序列中的逆序数</p>\n<h1 id=\"示例1\"><a href=\"#示例1\" class=\"headerlink\" title=\"示例1\"></a>示例1</h1><h2 id=\"输入\"><a href=\"#输入\" class=\"headerlink\" title=\"输入\"></a>输入</h2><p>5 4 5 1 3 2</p>\n<h2 id=\"输出\"><a href=\"#输出\" class=\"headerlink\" title=\"输出\"></a>输出</h2><p>7</p>\n<h1 id=\"两种方法求逆序数\"><a href=\"#两种方法求逆序数\" class=\"headerlink\" title=\"两种方法求逆序数\"></a>两种方法求逆序数</h1><h2 id=\"归并排序\"><a href=\"#归并排序\" class=\"headerlink\" title=\"归并排序\"></a>归并排序</h2><pre><code>#include&lt;bits/stdc++.h&gt;\nusing namespace std;\ntypedef long long LL;\nconst int maxn=100010;\n\nint seq[maxn],N;\nint temp[maxn];\nLL cnt;\n//归并排序求逆序数\nvoid merge_sort(int arr[],int l,int r){\n    if(l==r)return;\n    int mid=((l+r)&gt;&gt;1);\n    merge_sort(arr,l,mid);\n    merge_sort(arr,mid+1,r);\n    int i=l,j=mid+1;\n    for(int k=l;k&lt;=r;++k){\n        if(j&gt;r || (i&lt;=mid &amp;&amp; arr[i]&lt;arr[j]))temp[k]=arr[i++];\n        else temp[k]=arr[j++],cnt+=mid-i+1;\n        //如果a[i]&gt;a[j]则逆序数加上mid+1-i,即剩下的前面个数\n    }\n    for(i=l;i&lt;=r;++i)arr[i]=temp[i];\n}\n\nint main(){\n    cin&gt;&gt;N;\n    for(int i=0;i&lt;N;++i){\n        cin&gt;&gt;seq[i];\n    }\n    cnt=0;\n    merge_sort(seq,0,N-1);\n    cout&lt;&lt;cnt&lt;&lt;endl;\n    return 0;\n}</code></pre><h2 id=\"树状数组\"><a href=\"#树状数组\" class=\"headerlink\" title=\"树状数组\"></a>树状数组</h2>","categories":[{"name":"树状数组","slug":"树状数组","count":2,"path":"api/categories/树状数组.json"},{"name":"牛客练习赛","slug":"树状数组/牛客练习赛","count":2,"path":"api/categories/树状数组/牛客练习赛.json"},{"name":"逆序数","slug":"树状数组/牛客练习赛/逆序数","count":1,"path":"api/categories/树状数组/牛客练习赛/逆序数.json"}],"tags":[{"name":"树状数组","slug":"树状数组","count":3,"path":"api/tags/树状数组.json"},{"name":"牛客练习赛","slug":"牛客练习赛","count":10,"path":"api/tags/牛客练习赛.json"},{"name":"逆序数","slug":"逆序数","count":2,"path":"api/tags/逆序数.json"}]}