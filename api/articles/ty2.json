{"title":"聊天室架构从0开始 – 2 TCP+UDP 实现搜索IP与端口","slug":"ty2","date":"2019-01-14T14:17:07.000Z","updated":"2019-07-03T13:51:36.863Z","comments":true,"path":"api/articles/ty2.json","photos":[],"link":"","excerpt":null,"covers":null,"content":"<h1><span id=\"root\">Root</span></h1><h1><span id=\"目录结构\">目录结构</span></h1><ul>\n<li>java<ul>\n<li>client<ul>\n<li>bean<ul>\n<li>ServerInfo.java(记录服务端所需信息model)</li>\n</ul>\n</li>\n<li>Client.java(客户端执行)</li>\n<li>ClientSearcher.java(客户端广播向服务端,并且接受服务端返回的地址)</li>\n<li>TCPClient.java(TCP连接客户端)</li>\n</ul>\n</li>\n<li>clink(工具包)<ul>\n<li>utils<ul>\n<li>ByteUtils.java</li>\n</ul>\n</li>\n<li>Clink.java</li>\n</ul>\n</li>\n<li>constants(常量)<ul>\n<li>TCPConstants.java</li>\n<li>UDPConstants.java</li>\n</ul>\n</li>\n<li>server<ul>\n<li>Server.java</li>\n<li>ServerProvider.java(服务提供者)</li>\n<li>TCPServer.java(TCP连接服务端)</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2><span id=\"udp向服务端广播搜索tcp地址\">UDP向服务端广播搜索TCP地址</span></h2><blockquote>\n<p>老一套,先开启监听,再发送数据.</p>\n</blockquote>\n<h3><span id=\"方式和流程和传输数据结构\">方式和流程和传输数据结构</span></h3><blockquote>\n<p>方式,利用UDP独有的广播向服务端request地址和端口.并通过监听的端口等待服务端的回复. 报文格式:</p>\n<blockquote>\n<p>包裹层(HEADER,用于验证) IP - String 数据 - Byte[]</p>\n</blockquote>\n<p>数据格式:</p>\n<blockquote>\n<p>HEADER(验证字段,正式的数据要跳过这一段) cmd - 命令(1为客户端发送,2为服务端回送) LISTEN_PORT - 请求服务端后回复信息时的端口号,或客户端代连接服务端的端口号 - INT</p>\n</blockquote>\n</blockquote>\n<h3><span id=\"代码idea放在github上\">代码(IDEA,放在Github上)</span></h3><p><a href=\"https://github.com/834930269/TCP_AND_UDP/tree/master/SocketDemo-L5\" target=\"_blank\" rel=\"noopener\">https://github.com/834930269/TCP_AND_UDP/tree/master/SocketDemo-L5</a></p>\n<h2><span id=\"在上一步基础上建立tcp连接\">在上一步基础上建立TCP连接</span></h2><h3><span id=\"方式\">方式</span></h3><blockquote>\n<p>通过UDP获取到的服务端的IP和端口.</p>\n<blockquote>\n<p>用Socket连接之.</p>\n</blockquote>\n</blockquote>\n<h3><span id=\"通过键盘流输入\">通过键盘流输入</span></h3><pre><code>InputStream in=System.in;\nBufferedReader input=new BufferedReader(new InputStreamReader(in));\n//键盘读取一行\nString str=input.readLine();</code></pre><h3><span id=\"代码\">代码</span></h3><p><a href=\"https://github.com/834930269/TCP_AND_UDP/tree/master/SocketDemo-L5-2/SocketDemo-L5\" target=\"_blank\" rel=\"noopener\">https://github.com/834930269/TCP_AND_UDP/tree/master/SocketDemo-L5-2/SocketDemo-L5</a></p>\n<h2><span id=\"完成当前目标服务端与客户端发送与接收并行\">完成当前目标,服务端与客户端发送与接收并行</span></h2><h3><span id=\"方式\">方式</span></h3><blockquote>\n<p>将读写分开,读继承Thread,写重写Runnable. 广播： 用一个list记录,每当有客户端连接来时,就记录下那个客户端的Socket.</p>\n<blockquote>\n<p>遍历广播即可</p>\n</blockquote>\n</blockquote>\n<h3><span id=\"代码\">代码</span></h3><p><a href=\"https://github.com/834930269/TCP_AND_UDP/tree/master/SocketDemo-L5-3/SocketDemo-L5\" target=\"_blank\" rel=\"noopener\">https://github.com/834930269/TCP_AND_UDP/tree/master/SocketDemo-L5-3/SocketDemo-L5</a></p>\n","categories":[{"name":"tcp","slug":"tcp","count":2,"path":"api/categories/tcp.json"},{"name":"网络编程","slug":"tcp/网络编程","count":2,"path":"api/categories/tcp/网络编程.json"},{"name":"随笔","slug":"tcp/网络编程/随笔","count":1,"path":"api/categories/tcp/网络编程/随笔.json"}],"tags":[{"name":"网络编程","slug":"网络编程","count":4,"path":"api/tags/网络编程.json"},{"name":"tcp","slug":"tcp","count":3,"path":"api/tags/tcp.json"}]}