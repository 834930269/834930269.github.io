{"title":"UVa 1339","slug":"uva-1339-2","date":"2017-03-25T10:42:04.000Z","updated":"2019-07-03T13:51:36.846Z","comments":true,"path":"api/articles/uva-1339-2.json","photos":[],"link":"","excerpt":null,"covers":null,"content":"<p><strong>【生词记录】</strong> <strong>empire 帝国</strong> <strong>various 各种各样的,多样的</strong> <strong>departments 部(门)</strong> <strong>provinces 地方,职权</strong> <strong>encrypted 把…编码；把…加密</strong> <strong>prevent eavesdropping. 防止窃听</strong> <strong>ciphers 密码,编码</strong> <strong>substitution 代替/代替物</strong> <strong>permutation 排列/置换</strong> <strong>occurrences 发生,出现,事件</strong> <strong>coincide 一致</strong> <strong>apply 申请,适用</strong> <strong>alphabet 字母表</strong> <strong>separately 分别得,分离的,个别的</strong> <strong>rather 宁可宁愿,相当</strong> <strong>combined 使适合,组合,结合</strong> <strong>those times 大部分条件下？</strong> <strong>Thus 因此</strong> <strong>Archeologists 考古学家</strong> <strong>recently 最近</strong> <strong>engraved 被牢记的,雕刻</strong> <strong>plate 碟,金属板,装甲</strong> <strong>glance 一瞥,扫视</strong> <strong>meaningless 无意义的</strong> <strong>conjecture 推测,猜想</strong> <strong>check 制止,校验,核对</strong> <strong>contains 包含</strong> <strong>several 几个</strong> <strong>consists 由…构成</strong> <strong>punctuation 标点符号</strong> <strong>capital 首都</strong> <strong>do not exceed XXX 不超过</strong> <strong>【题意】</strong> <strong>古老的碑文上雕刻着密文,有两种加密方法,subsitution ciphers和permutation chipers.</strong> <strong>问:判断输入密文str1和破解明文str2是否可以通过以上两种encrypted方式转换.</strong> <strong>subsitution ciphers:一一映射.</strong> <strong>permutation ciphers:位置置换.</strong> <strong>【错解】</strong> <strong>思路:因为后者是由前者重新排序然后重新映射来的,所以第一想法是直接统计Ascii码,然后再判断两者差的绝对值取余字符串长度是否为0.</strong> <strong>错例:AAA,BBB</strong></p>\n<blockquote>\n<p><strong>#include<iostream></iostream></strong> <strong>#include<algorithm></algorithm></strong> <strong>#include<cstdio></cstdio></strong> <strong>#include<cstring></cstring></strong> <strong>#include<cstdlib></cstdlib></strong> <strong>#include<cmath></cmath></strong> <strong>using namespace std;</strong> <strong>char str1[120],str2[120];</strong> <strong>int len1,len2,sum1,sum2;</strong> <strong>int main(){</strong> **    while(cin&gt;&gt;str1){** **        cin&gt;&gt;str2;** **        len1=strlen(str1),len2=strlen(str2);** **        sum1=sum2=0;** **        if(len1!=len2){** **            puts(“NO”);** **            continue;** **        }** **        for(int i=0;i&lt;len1;++i)** **            sum1+=str1[i];** **        for(int i=0;i&lt;len2;++i)** **            sum2+=str2[i];** **        if(abs(sum1-sum2)%len1==0)** **            puts(“YES”);** **        else** **            puts(“NO”);** **    }** **    return 0;** <strong>}</strong></p>\n</blockquote>\n<p><strong>【正解】</strong> <strong>思路:既然字母可以重排,则每个字母的位置并不重要,重要的是每个字母出现的次数,</strong> <strong>这样可以先统计出两个字符串中各个字母出现的次数.得到两个数组cnt1[26]，cnt2[26]</strong> <strong>然后将数目从大到小排列,如果数组相同,则YES,其他NO.</strong> <strong>一点:没看样例直接搞,按照思路来的,看完题面以后觉得字母映射是全部平移的一一映射,但书上说的是(无规律)一一映射(需要每个字母都要映射,并且映射都不相同,比如不可能:B-&gt;Q,Q-&gt;Q;但可以:B-&gt;Q,Q-&gt;D,C-&gt;C).</strong></p>\n<blockquote>\n<p><strong>#include<iostream></iostream></strong> <strong>#include<algorithm></algorithm></strong> <strong>#include<cstdio></cstdio></strong> <strong>#include<cstring></cstring></strong> <strong>#include<cstdlib></cstdlib></strong> <strong>#include<cmath></cmath></strong> <strong>using namespace std;</strong> <strong>char str1[120],str2[120];</strong> <strong>int len1,len2,cnt1[30],cnt2[30],sum,flag;</strong> <strong>bool cmp(int a,int b){</strong> **    return a&gt;b;** <strong>}</strong> <strong>int main(){</strong> **    while(cin&gt;&gt;str1){** **        cin&gt;&gt;str2;** **        len1=strlen(str1),len2=strlen(str2);** **        memset(cnt1,0,sizeof(cnt1));** **        memset(cnt2,0,sizeof(cnt2));** **        sum=flag=0;** **        if(len1!=len2){** **            puts(“NO”);** **            continue;** **        }** **        for(int i=0;i&lt;len1;++i){** **            if(cnt1[str1[i]-‘A’]==0)** **                sum++;** **            cnt1[str1[i]-‘A’]++;** **        }** **        for(int i=0;i&lt;len2;++i)** **            cnt2[str2[i]-‘A’]++;** **        sort(cnt1,cnt1+26,cmp);** **        sort(cnt2,cnt2+26,cmp);** **        for(int i=0;i&lt;sum;++i){** **            if(cnt1[i]!=cnt2[i]){** **                flag=1;** **                break;** **            }** **        }** **        puts(flag?”NO”:”YES”);** **    }** **    return 0;** <strong>}</strong></p>\n</blockquote>\n","categories":[{"name":"UVa","slug":"UVa","count":35,"path":"api/categories/UVa.json"}],"tags":[{"name":"UVa","slug":"UVa","count":39,"path":"api/tags/UVa.json"}]}