{"title":"python3学习 class","slug":"python3-class","date":"2017-07-15T03:52:34.000Z","updated":"2019-07-03T13:51:36.849Z","comments":true,"path":"api/articles/python3-class.json","photos":[],"link":"","excerpt":null,"covers":null,"content":"<p><strong>【Source Code】</strong> <strong>github: <a href=\"https://github.com/834930269/python_study/blob/master/class/class_.py\" target=\"_blank\" rel=\"noopener\">class_.py</a></strong></p>\n<hr>\n<p> **# coding: utf-8</p>\n<p># In[13]:</p>\n<p>class student(object):<br>    #绑定实例属性<br>    #__init__方法的第一个参数永远是self,即实例本身<br>    def __init__(self,name,score):<br>        self.name = name<br>        self.score = score<br>    def print_score(self):<br>        print(“%s: %s” % (self.name,self.score))<br>    def get_grade(self):<br>        if self.score &gt;= 90:<br>            return ‘A’<br>        elif self.score &gt;= 60:<br>            return ‘B’<br>        else:<br>            return ‘C’</p>\n<p>bart=student(‘Bart Simpson’,59)<br>print(bart.name,bart.score,bart)<br>bart.print_score()<br>print(bart.get_grade())</p>\n<p># In[14]:</p>\n<p>#另一种访问方式<br>def pt_score(std):<br>    print(‘%s: %s’ % (std.name,std.score))<br>pt_score(bart)</p>\n<p># In[19]:</p>\n<p>‘’’<br>要定义一个方法，除了第一个参数是self外，其他<br>和普通函数一样。要调用一个方法，只需要在实例<br>变量上直接调用，除了self不用传递，其他参数正常传入：<br>‘’’</p>\n<p>‘’’<br>和静态语言不同，Python允许对实例变量绑定任何数据，也就<br>是说，对于两个实例变量，虽然它们都是同一个类的不同实例，<br>但拥有的变量名称都可能不同：<br>‘’’<br>bart = student(‘Bart Simpson’, 59)<br>lisa = student(‘Lisa Simpson’, 87)<br>bart.age = 8<br>print(bart.age)<br>print(lisa.age)#抛异常</p>\n<p># In[ ]:**</p>\n","categories":[{"name":"Python","slug":"Python","count":41,"path":"api/categories/Python.json"}],"tags":[{"name":"Python","slug":"Python","count":65,"path":"api/tags/Python.json"}]}