{"title":"Egret 滤镜","slug":"egret-filter","date":"2017-10-06T09:15:46.000Z","updated":"2019-07-03T13:51:36.858Z","comments":true,"path":"api/articles/egret-filter.json","photos":[],"link":"","excerpt":null,"covers":["http://be-sunshine.cn/wp-content/uploads/2017/10/QQ%E6%88%AA%E5%9B%BE20171006171157.png"],"content":"<p>效果图如下: <a href=\"http://be-sunshine.cn/wp-content/uploads/2017/10/QQ%E6%88%AA%E5%9B%BE20171006171157.png\" target=\"_blank\" rel=\"noopener\"><img src=\"http://be-sunshine.cn/wp-content/uploads/2017/10/QQ%E6%88%AA%E5%9B%BE20171006171157.png\" alt></a> 在之前需要在资源文件.json下添加该文件进组,以便加载时可以一起加载. Egret不能在使用时动态加载位图,只能在使用前加载. Main.ts代码如下:</p>\n<pre><code>//Main.ts\n\nclass Main extends egret.DisplayObjectContainer {\n\n    /**\n     * 加载进度界面\n     * Process interface loading\n     */\n    private loadingView: LoadingUI;\n\n    public constructor() {\n        super();\n        this.addEventListener(egret.Event.ADDED_TO_STAGE, this.onAddToStage, this);\n    }\n\n    private onAddToStage(event: egret.Event) {\n\n        egret.lifecycle.addLifecycleListener((context) =&gt; {\n            // custom lifecycle plugin\n\n            context.onUpdate = () =&gt; {\n                console.log(&apos;hello,world&apos;)\n            }\n        })\n\n        egret.lifecycle.onPause = () =&gt; {\n            egret.ticker.pause();\n        }\n\n        egret.lifecycle.onResume = () =&gt; {\n            egret.ticker.resume();\n        }\n\n\n        //设置加载进度界面\n        //Config to load process interface\n        this.loadingView = new LoadingUI();\n        this.stage.addChild(this.loadingView);\n\n        //初始化Resource资源加载库\n        //initiate Resource loading library\n        RES.addEventListener(RES.ResourceEvent.CONFIG_COMPLETE, this.onConfigComplete, this);\n        RES.loadConfig(&quot;resource/default.res.json&quot;, &quot;resource/&quot;);\n    }\n\n    /**\n     * 配置文件加载完成,开始预加载preload资源组。\n     * configuration file loading is completed, start to pre-load the preload resource group\n     */\n    private onConfigComplete(event: RES.ResourceEvent): void {\n        RES.removeEventListener(RES.ResourceEvent.CONFIG_COMPLETE, this.onConfigComplete, this);\n        RES.addEventListener(RES.ResourceEvent.GROUP_COMPLETE, this.onResourceLoadComplete, this);\n        RES.addEventListener(RES.ResourceEvent.GROUP_LOAD_ERROR, this.onResourceLoadError, this);\n        RES.addEventListener(RES.ResourceEvent.GROUP_PROGRESS, this.onResourceProgress, this);\n        RES.addEventListener(RES.ResourceEvent.ITEM_LOAD_ERROR, this.onItemLoadError, this);\n        RES.loadGroup(&quot;preload&quot;);\n    }\n\n    /**\n     * preload资源组加载完成\n     * Preload resource group is loaded\n     */\n    private onResourceLoadComplete(event: RES.ResourceEvent) {\n        if (event.groupName == &quot;preload&quot;) {\n            this.stage.removeChild(this.loadingView);\n            RES.removeEventListener(RES.ResourceEvent.GROUP_COMPLETE, this.onResourceLoadComplete, this);\n            RES.removeEventListener(RES.ResourceEvent.GROUP_LOAD_ERROR, this.onResourceLoadError, this);\n            RES.removeEventListener(RES.ResourceEvent.GROUP_PROGRESS, this.onResourceProgress, this);\n            RES.removeEventListener(RES.ResourceEvent.ITEM_LOAD_ERROR, this.onItemLoadError, this);\n            this.createGameScene();\n        }\n    }\n\n    /**\n     * 资源组加载出错\n     *  The resource group loading failed\n     */\n    private onItemLoadError(event: RES.ResourceEvent) {\n        console.warn(&quot;Url:&quot; + event.resItem.url + &quot; has failed to load&quot;);\n    }\n\n    /**\n     * 资源组加载出错\n     *  The resource group loading failed\n     */\n    private onResourceLoadError(event: RES.ResourceEvent) {\n        //TODO\n        console.warn(&quot;Group:&quot; + event.groupName + &quot; has failed to load&quot;);\n        //忽略加载失败的项目\n        //Ignore the loading failed projects\n        this.onResourceLoadComplete(event);\n    }\n\n    /**\n     * preload资源组加载进度\n     * Loading process of preload resource group\n     */\n    private onResourceProgress(event: RES.ResourceEvent) {\n        if (event.groupName == &quot;preload&quot;) {\n            this.loadingView.setProgress(event.itemsLoaded, event.itemsTotal);\n        }\n    }\n\n    private textfield: egret.TextField;\n\n    /**\n     * 创建游戏场景\n     * Create a game scene\n     */\n    private createGameScene() {\n/*        let sky = this.createBitmapByName(&quot;bg_jpg&quot;);\n        this.addChild(sky);\n        let stageW = this.stage.stageWidth;\n        let stageH = this.stage.stageHeight;\n        sky.width = stageW;\n        sky.height = stageH;\n\n        let topMask = new egret.Shape();\n        topMask.graphics.beginFill(0x000000, 0.5);\n        topMask.graphics.drawRect(0, 0, stageW, 172);\n        topMask.graphics.endFill();\n        topMask.y = 33;\n        this.addChild(topMask);\n\n        let icon = this.createBitmapByName(&quot;egret_icon_png&quot;);\n        this.addChild(icon);\n        icon.x = 26;\n        icon.y = 33;\n\n        let line = new egret.Shape();\n        line.graphics.lineStyle(2, 0xffffff);\n        line.graphics.moveTo(0, 0);\n        line.graphics.lineTo(0, 117);\n        line.graphics.endFill();\n        line.x = 172;\n        line.y = 61;\n        this.addChild(line);\n\n\n        let colorLabel = new egret.TextField();\n        colorLabel.textColor = 0xffffff;\n        colorLabel.width = stageW - 172;\n        colorLabel.textAlign = &quot;center&quot;;\n        colorLabel.text = &quot;Hello Egret&quot;;\n        colorLabel.size = 24;\n        colorLabel.x = 172;\n        colorLabel.y = 80;\n        this.addChild(colorLabel);\n\n        let textfield = new egret.TextField();\n        this.addChild(textfield);\n        textfield.alpha = 0;\n        textfield.width = stageW - 172;\n        textfield.textAlign = egret.HorizontalAlign.CENTER;\n        textfield.size = 24;\n        textfield.textColor = 0xffffff;\n        textfield.x = 172;\n        textfield.y = 135;\n        this.textfield = textfield;*/\n\n        //根据name关键字，异步获取一个json配置文件，name属性请参考resources/resource.json配置文件的内容。\n        // Get asynchronously a json configuration file according to name keyword. As for the property of name please refer to the configuration file of resources/resource.json.\n        let qb=this.createBitmapByName(&apos;cartoon-egret_00_png&apos;);\n        this.addChild(qb);\n        qb.y=100;\n\n        let qb1=this.createBitmapByName(&apos;cartoon-egret_00_png&apos;);\n        this.addChild(qb1);\n        qb1.y=100;\n        qb1.x=300;\n\n        this.applyGlowFilter(qb1);\n        //RES.getResAsync(&quot;description_json&quot;, this.startAnimation, this)\n    }\n    private applyGlowFilter(disp:egret.DisplayObject):void{\n        var color:number=0x33CCFF;\n        //光晕的颜色\n        var alpha:number=0.8;\n        //透明度\n        var blurX:number=35;//水平模糊量\n        var blurY:number=35;//垂直模糊量\n        var strength:number=2;//压印的强度,值越大,压印的颜色越深\n        var quality:number=egret.BitmapFilterQuality.HIGH;//应用滤镜的次数\n        var inner:boolean=false;//制定发光是否为内侧发光\n        var knockout:boolean=false;//指定对象是否具有挖空效果\n        var glowFilter:egret.GlowFilter=new egret.GlowFilter(color,alpha,blurX,blurY,strength,quality,inner,knockout);\n        disp.filters=[glowFilter]; \n    }\n    /**\n     * 根据name关键字创建一个Bitmap对象。name属性请参考resources/resource.json配置文件的内容。\n     * Create a Bitmap object according to name keyword.As for the property of name please refer to the configuration file of resources/resource.json.\n     */\n    private createBitmapByName(name: string) {\n        let result = new egret.Bitmap();\n        let texture: egret.Texture = RES.getRes(name);\n        result.texture = texture;\n        return result;\n    }\n\n    /**\n     * 描述文件加载成功，开始播放动画\n     * Description file loading is successful, start to play the animation\n     */\n    private startAnimation(result: string[]) {\n        let parser = new egret.HtmlTextParser();\n\n        let textflowArr = result.map(text =&gt; parser.parse(text));\n        let textfield = this.textfield;\n        let count = -1;\n        let change = () =&gt; {\n            count++;\n            if (count &gt;= textflowArr.length) {\n                count = 0;\n            }\n            let textFlow = textflowArr[count];\n\n            // 切换描述内容\n            // Switch to described content\n            textfield.textFlow = textFlow;\n            let tw = egret.Tween.get(textfield);\n            tw.to({ &quot;alpha&quot;: 1 }, 200);\n            tw.wait(2000);\n            tw.to({ &quot;alpha&quot;: 0 }, 200);\n            tw.call(change, this);\n        };\n\n        change();\n    }\n}</code></pre>","categories":[{"name":"Egret","slug":"Egret","count":3,"path":"api/categories/Egret.json"}],"tags":[{"name":"Egret","slug":"Egret","count":3,"path":"api/tags/Egret.json"}]}