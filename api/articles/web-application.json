{"title":"Web Application","slug":"web-application","date":"2017-11-04T08:32:16.000Z","updated":"2019-07-03T13:51:36.859Z","comments":true,"path":"api/articles/web-application.json","photos":[],"link":"","excerpt":null,"covers":null,"content":"<p>Link <a href=\"http://cizixs.com/2015/09/21/what-is-a-web-framework\" target=\"_blank\" rel=\"noopener\">什么是Web框架</a> 一个简单的可以处理get和post的Web Application, 其中如果80端口不能访问就换成其他端口即可.</p>\n<pre><code>import socket\n\nHOST = &apos;&apos; #localhost\nPORT = 80 #监听80端口,如果不行就换成其他端口\nlisten_socket = socket.socket(socket.AF_INET,socket.SOCK_STREAM)#协议部分\nlisten_socket.bind((HOST,PORT))#只允许迭代类型么？\nlisten_socket.listen(1)\nconnection,address = listen_socket.accept()\nrequest = connection.recv(1024)\nconnection.sendall(b&quot;&quot;&quot;HTTP/1.1 200 OK\nContent-type: text/html\n\n\n&lt;html&gt;\n    &lt;body&gt;\n        &lt;h1&gt;Hello, World!&lt;/h1&gt;\n    &lt;/body&gt;\n&lt;/html&gt;&quot;&quot;&quot;)#返回的响应以及data,但必须转一下bytes类型\nconnection.close()</code></pre><p>（如果上面的程序报端口错误，可以把 PORT 的值修改成其他值，比如 8080。） 上面的代码只会接收一个连接和一个请求，不管请求的 URL 是什么，都会返回同样的 HTTP 内容，response code 是 200。（很明显，这不算真正的 web server）。在这个例子，我们告诉客户端，返回的数据格式为 HTML，而不是其他的格式，比如 JSON。</p>\n","categories":[{"name":"Python","slug":"Python","count":41,"path":"api/categories/Python.json"},{"name":"Web_Application","slug":"Python/Web-Application","count":1,"path":"api/categories/Python/Web-Application.json"}],"tags":[{"name":"Python","slug":"Python","count":65,"path":"api/tags/Python.json"},{"name":"Web_Application","slug":"Web-Application","count":1,"path":"api/tags/Web-Application.json"}]}