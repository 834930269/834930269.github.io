{"title":"Spring Validation-Spring后台验证框架","slug":"spring-validation-spring","date":"2019-02-09T15:34:46.000Z","updated":"2019-07-03T16:01:03.116Z","comments":true,"path":"api/articles/spring-validation-spring.json","photos":[],"link":"","excerpt":"JSR-303简介JSR-303 是 JavaEE 6 中的一项子规范，叫做 Bean Validation，官方参考实现是 Hibernate Validator。 此实现与 Hibernate ORM 没有任何关系。JSR-303 用于对 Java Bean 中的字段的值进行验证。 Spring MVC 3.x 之中也大力支持 JSR-303，可以在控制器中使用注解的方式对表单提交的数据方便地验证。 Spring 4.0 开始支持 Bean Validation 功能。","covers":null,"content":"<h1 id=\"JSR-303简介\"><a href=\"#JSR-303简介\" class=\"headerlink\" title=\"JSR-303简介\"></a>JSR-303简介</h1><p>JSR-303 是 JavaEE 6 中的一项子规范，叫做 Bean Validation，官方参考实现是 Hibernate Validator。 此实现与 Hibernate ORM 没有任何关系。JSR-303 用于对 Java Bean 中的字段的值进行验证。 Spring MVC 3.x 之中也大力支持 JSR-303，可以在控制器中使用注解的方式对表单提交的数据方便地验证。 Spring 4.0 开始支持 Bean Validation 功能。</p>\n<a id=\"more\"></a>\n\n\n<h1 id=\"JSR-303-基本的校验规则\"><a href=\"#JSR-303-基本的校验规则\" class=\"headerlink\" title=\"JSR-303 基本的校验规则\"></a>JSR-303 基本的校验规则</h1><p>注解</p>\n<p>作用</p>\n<p>@Null</p>\n<p>验证对象是否为 null</p>\n<p>@NotNull</p>\n<p>验证对象是否不为 null, 无法查检长度为 0 的字符串</p>\n<p>@NotBlank</p>\n<p>检查约束字符串是不是 Null 还有被 Trim 的长度是否大于 0,只对字符串,且会去掉前后空格</p>\n<p>@NotEmpty</p>\n<p>检查约束元素是否为 NULL 或者是 EMPTY</p>\n<p>@AssertTrue</p>\n<p>验证 Boolean 对象是否为 true</p>\n<p>@AssertFalse</p>\n<p>验证 Boolean 对象是否为 false</p>\n<p>@Size(min=, max=)</p>\n<p>验证对象（Array, Collection , Map, String）长度是否在给定的范围之内</p>\n<p>@Length(min=, max=)</p>\n<p>验证字符串长度介于 min 和 max 之间</p>\n<p>@Past</p>\n<p>验证 Date 和 Calendar 对象是否在当前时间之前，验证成立的话被注释的元素一定是一个过去的日期</p>\n<p>@Future</p>\n<p>验证 Date 和 Calendar 对象是否在当前时间之后 ，验证成立的话被注释的元素一定是一个将来的日期</p>\n<p>@Pattern</p>\n<p>验证 String 对象是否符合正则表达式的规则，被注释的元素符合制定的正则表达式</p>\n<p>@Min</p>\n<p>验证 Number 和 String 对象是否大等于指定的值</p>\n<p>@Max</p>\n<p>验证 Number 和 String 对象是否小等于指定的值</p>\n<p>@DecimalMax</p>\n<p>被标注的值必须不大于约束中指定的最大值. 这个约束的参数是一个通过 BigDecimal 定义的最大值的字符串表示 .小数 存在精度</p>\n<p>@DecimalMin</p>\n<p>被标注的值必须不小于约束中指定的最小值. 这个约束的参数是一个通过 BigDecimal 定义的最小值的字符串表示 .小数 存在精度</p>\n<p>@Digits</p>\n<p>验证 Number 和 String 的构成是否合法</p>\n<p>@Digits(integer=,fraction=)</p>\n<p>验证字符串是否是符合指定格式的数字，integer 指定整数精度，fraction 指定小数精度</p>\n<p>@Range(min=, max=)</p>\n<p>被指定的元素必须在合适的范围内@Range(min=10000,max=50000,message=”range.bean.wage”)</p>\n<p>@Valid</p>\n<p>递归的对关联对象进行校验, 如果关联对象是个集合或者数组，那么对其中的元素进行递归校验，如果是一个 map，则对其中的值部分进行校验.(是否进行递归验证)</p>\n<p>@CreditCardNumber</p>\n<p>信用卡验证</p>\n<p>@Email</p>\n<p>验证是否是邮件地址，如果为 null，不进行验证，算通过验证</p>\n<h1 id=\"粘贴到Spring上\"><a href=\"#粘贴到Spring上\" class=\"headerlink\" title=\"粘贴到Spring上\"></a>粘贴到Spring上</h1><h2 id=\"添加依赖\"><a href=\"#添加依赖\" class=\"headerlink\" title=\"添加依赖\"></a>添加依赖</h2><pre><code>&lt;dependency&gt;\n    &lt;groupId&gt;org.hibernate&lt;/groupId&gt;\n    &lt;artifactId&gt;hibernate-validator&lt;/artifactId&gt;\n    &lt;version&gt;5.3.4.Final&lt;/version&gt;\n&lt;/dependency&gt;</code></pre><h2 id=\"定义验证工具类\"><a href=\"#定义验证工具类\" class=\"headerlink\" title=\"定义验证工具类\"></a>定义验证工具类</h2><blockquote>\n<p>把所有类型的异常都转换为List&lt;&gt;型异常,然后在出口函数除捕捉异常并打印出来.调用validation的方法即直接调用.</p>\n</blockquote>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.beans.<span class=\"keyword\">factory</span>.annotation.Autowired;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.validation.ConstraintViolation;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.validation.ConstraintViolationException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.validation.Validator;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.ArrayList;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.HashMap;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.<span class=\"built_in\">List</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.<span class=\"built_in\">Map</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.<span class=\"built_in\">Set</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"><span class=\"markdown\">/**</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"markdown\"><span class=\"bullet\"> * </span>JSR303 Validator(Hibernate Validator)工具类.</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"markdown\"><span class=\"bullet\"> * </span><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span></span></span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"markdown\"><span class=\"bullet\"> * </span>ConstraintViolation 中包含 propertyPath, message 和 invalidValue 等信息.</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"markdown\"><span class=\"bullet\"> * </span>提供了各种 convert 方法，适合不同的 i18n 需求:</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"markdown\"><span class=\"bullet\"> * </span>1. List<span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">String</span>&gt;</span></span>, String 内容为 message</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"markdown\"><span class=\"bullet\"> * </span>2. List<span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">String</span>&gt;</span></span>, String 内容为 propertyPath + separator + message</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"markdown\"><span class=\"bullet\"> * </span>3. Map<span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">propertyPath,</span> <span class=\"attr\">message</span>&gt;</span></span></span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"markdown\"><span class=\"bullet\"> * </span><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span></span></span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"markdown\"><span class=\"bullet\"> * </span>详情见wiki: https://github.com/springside/springside4/wiki/HibernateValidator</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"markdown\"> *</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"markdown\"><span class=\"bullet\"> * </span><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span></span>Title: BeanValidator<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span></span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"markdown\"><span class=\"bullet\"> * </span><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span></span>Description: <span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span></span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"markdown\"> *</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"markdown\"><span class=\"bullet\"> * </span>@author Lusifer</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"markdown\"><span class=\"bullet\"> * </span>@version 1.0.0</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"markdown\"><span class=\"bullet\"> * </span>@date 2018/6/26 17:21</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"markdown\"> */</span></span></span><br><span class=\"line\">public <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BeanValidator</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    private <span class=\"keyword\">static</span> Validator validator;</span><br><span class=\"line\"></span><br><span class=\"line\">    public <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> setValidator(Validator validator) &#123;</span><br><span class=\"line\">        BeanValidator.validator = validator;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"markdown\">/**</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"markdown\"><span class=\"bullet\">     * </span>调用 JSR303 的 validate 方法, 验证失败时抛出 ConstraintViolationException.</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"markdown\"><span class=\"code\">     */</span></span></span></span><br><span class=\"line\">    private <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> validateWithException(Validator validator, <span class=\"built_in\">Object</span> object, Class&lt;?&gt;... groups) throws ConstraintViolationException &#123;</span><br><span class=\"line\">        <span class=\"built_in\">Set</span> constraintViolations = validator.validate(object, groups);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!constraintViolations.isEmpty()) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> ConstraintViolationException(constraintViolations);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"markdown\">/**</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"markdown\"><span class=\"bullet\">     * </span>辅助方法, 转换 ConstraintViolationException 中的 Set<span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">ConstraintViolations</span>&gt;</span></span> 中为 List<span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">message</span>&gt;</span></span>.</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"markdown\"><span class=\"code\">     */</span></span></span></span><br><span class=\"line\">    private <span class=\"keyword\">static</span> <span class=\"built_in\">List</span>&lt;<span class=\"built_in\">String</span>&gt; extractMessage(ConstraintViolationException e) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> extractMessage(e.getConstraintViolations());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"markdown\">/**</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"markdown\"><span class=\"bullet\">     * </span>辅助方法, 转换 Set<span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">ConstraintViolation</span>&gt;</span></span> 为 List<span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">message</span>&gt;</span></span></span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"markdown\"><span class=\"code\">     */</span></span></span></span><br><span class=\"line\">    private <span class=\"keyword\">static</span> <span class=\"built_in\">List</span>&lt;<span class=\"built_in\">String</span>&gt; extractMessage(<span class=\"built_in\">Set</span>&lt;? <span class=\"keyword\">extends</span> ConstraintViolation&gt; constraintViolations) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">List</span>&lt;<span class=\"built_in\">String</span>&gt; errorMessages = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (ConstraintViolation violation : constraintViolations) &#123;</span><br><span class=\"line\">            errorMessages.add(violation.getMessage());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> errorMessages;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"markdown\">/**</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"markdown\"><span class=\"bullet\">     * </span>辅助方法, 转换 ConstraintViolationException 中的 Set<span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">ConstraintViolations</span>&gt;</span></span> 为 Map<span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">property,</span> <span class=\"attr\">message</span>&gt;</span></span>.</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"markdown\"><span class=\"code\">     */</span></span></span></span><br><span class=\"line\">    private <span class=\"keyword\">static</span> <span class=\"built_in\">Map</span>&lt;<span class=\"built_in\">String</span>, <span class=\"built_in\">String</span>&gt; extractPropertyAndMessage(ConstraintViolationException e) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> extractPropertyAndMessage(e.getConstraintViolations());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"markdown\">/**</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"markdown\"><span class=\"bullet\">     * </span>辅助方法, 转换 Set<span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">ConstraintViolation</span>&gt;</span></span> 为 Map<span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">property,</span> <span class=\"attr\">message</span>&gt;</span></span>.</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"markdown\"><span class=\"code\">     */</span></span></span></span><br><span class=\"line\">    private <span class=\"keyword\">static</span> <span class=\"built_in\">Map</span>&lt;<span class=\"built_in\">String</span>, <span class=\"built_in\">String</span>&gt; extractPropertyAndMessage(<span class=\"built_in\">Set</span>&lt;? <span class=\"keyword\">extends</span> ConstraintViolation&gt; constraintViolations) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">Map</span>&lt;<span class=\"built_in\">String</span>, <span class=\"built_in\">String</span>&gt; errorMessages = <span class=\"keyword\">new</span> HashMap&lt;&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (ConstraintViolation violation : constraintViolations) &#123;</span><br><span class=\"line\">            errorMessages.put(violation.getPropertyPath().toString(), violation.getMessage());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> errorMessages;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"markdown\">/**</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"markdown\"><span class=\"bullet\">     * </span>辅助方法, 转换 ConstraintViolationException 中的 Set<span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">ConstraintViolations</span>&gt;</span></span> 为 List<span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">propertyPath</span> <span class=\"attr\">message</span>&gt;</span></span>.</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"markdown\"><span class=\"code\">     */</span></span></span></span><br><span class=\"line\">    private <span class=\"keyword\">static</span> <span class=\"built_in\">List</span>&lt;<span class=\"built_in\">String</span>&gt; extractPropertyAndMessageAsList(ConstraintViolationException e) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> extractPropertyAndMessageAsList(e.getConstraintViolations(), <span class=\"string\">\" \"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"markdown\">/**</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"markdown\"><span class=\"bullet\">     * </span>辅助方法, 转换 Set<span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">ConstraintViolations</span>&gt;</span></span> 为 List<span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">propertyPath</span> <span class=\"attr\">message</span>&gt;</span></span>.</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"markdown\"><span class=\"code\">     */</span></span></span></span><br><span class=\"line\">    private <span class=\"keyword\">static</span> <span class=\"built_in\">List</span>&lt;<span class=\"built_in\">String</span>&gt; extractPropertyAndMessageAsList(<span class=\"built_in\">Set</span>&lt;? <span class=\"keyword\">extends</span> ConstraintViolation&gt; constraintViolations) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> extractPropertyAndMessageAsList(constraintViolations, <span class=\"string\">\" \"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"markdown\">/**</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"markdown\"><span class=\"bullet\">     * </span>辅助方法, 转换 ConstraintViolationException 中的 Set<span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">ConstraintViolations</span>&gt;</span></span> 为 List<span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">propertyPath</span> + <span class=\"attr\">separator</span> + <span class=\"attr\">message</span>&gt;</span></span>.</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"markdown\"><span class=\"code\">     */</span></span></span></span><br><span class=\"line\">    private <span class=\"keyword\">static</span> <span class=\"built_in\">List</span>&lt;<span class=\"built_in\">String</span>&gt; extractPropertyAndMessageAsList(ConstraintViolationException e, <span class=\"built_in\">String</span> separator) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> extractPropertyAndMessageAsList(e.getConstraintViolations(), separator);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"markdown\">/**</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"markdown\"><span class=\"bullet\">     * </span>辅助方法, 转换 Set<span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">ConstraintViolation</span>&gt;</span></span> 为 List<span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">propertyPath</span> + <span class=\"attr\">separator</span> + <span class=\"attr\">message</span>&gt;</span></span>.</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"markdown\"><span class=\"code\">     */</span></span></span></span><br><span class=\"line\">    private <span class=\"keyword\">static</span> <span class=\"built_in\">List</span>&lt;<span class=\"built_in\">String</span>&gt; extractPropertyAndMessageAsList(<span class=\"built_in\">Set</span>&lt;? <span class=\"keyword\">extends</span> ConstraintViolation&gt; constraintViolations, <span class=\"built_in\">String</span> separator) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">List</span>&lt;<span class=\"built_in\">String</span>&gt; errorMessages = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (ConstraintViolation violation : constraintViolations) &#123;</span><br><span class=\"line\">            errorMessages.add(violation.getPropertyPath() + separator + violation.getMessage());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> errorMessages;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"markdown\">/**</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"markdown\"><span class=\"bullet\">     * </span>服务端参数有效性验证</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"markdown\"><span class=\"code\">     *</span></span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"markdown\"><span class=\"bullet\">     * </span>@param object 验证的实体对象</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"markdown\"><span class=\"bullet\">     * </span>@param groups 验证组</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"markdown\"><span class=\"bullet\">     * </span>@return 验证成功：返回 null；验证失败：返回错误信息</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"markdown\"><span class=\"code\">     */</span></span></span></span><br><span class=\"line\">    public <span class=\"keyword\">static</span> <span class=\"built_in\">String</span> validator(<span class=\"built_in\">Object</span> object, Class&lt;?&gt;... groups) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            validateWithException(validator, object, groups);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (ConstraintViolationException ex) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">List</span>&lt;<span class=\"built_in\">String</span>&gt; list = extractMessage(ex);</span><br><span class=\"line\">            list.add(<span class=\"number\">0</span>, <span class=\"string\">\"数据验证失败：\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// 封装错误消息为字符串</span></span><br><span class=\"line\">            StringBuilder sb = <span class=\"keyword\">new</span> StringBuilder();</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"built_in\">int</span> i = <span class=\"number\">0</span>; i &lt; list.size(); i++) &#123;</span><br><span class=\"line\">                <span class=\"built_in\">String</span> exMsg = list.<span class=\"keyword\">get</span>(i);</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (i != <span class=\"number\">0</span> )&#123;</span><br><span class=\"line\">                    sb.append(<span class=\"built_in\">String</span>.format(<span class=\"string\">\"%s. %s\"</span>, i, exMsg)).append(list.size() &gt; <span class=\"number\">1</span> ? <span class=\"string\">\"&lt;br/&gt;\"</span> : <span class=\"string\">\"\"</span>);</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    sb.append(exMsg).append(list.size() &gt; <span class=\"number\">1</span> ? <span class=\"string\">\"&lt;br/&gt;\"</span> : <span class=\"string\">\"\"</span>);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">return</span> sb.toString();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"为实体类添加注解\"><a href=\"#为实体类添加注解\" class=\"headerlink\" title=\"为实体类添加注解\"></a>为实体类添加注解</h2><p>(domain,model,Entity)</p>\n<pre><code>@Length(min = 6, max = 20, message = &quot;用户名长度必须介于 6 和 20 之间&quot;)\nprivate String username;\n@Length(min = 6, max = 20, message = &quot;密码长度必须介于 6 和 20 之间&quot;)\nprivate String password;\n@Pattern(regexp = RegexpUtils.PHONE, message = &quot;手机号格式不正确&quot;)\nprivate String phone;\n@Pattern(regexp = RegexpUtils.EMAIL, message = &quot;邮箱格式不正确&quot;)\nprivate String email;</code></pre><h2 id=\"注入工具类\"><a href=\"#注入工具类\" class=\"headerlink\" title=\"注入工具类\"></a>注入工具类</h2><blockquote>\n<p>因为在工具类中,static修饰的对象,无法直接注入,所以需要手工注入</p>\n</blockquote>\n<h3 id=\"直接注入\"><a href=\"#直接注入\" class=\"headerlink\" title=\"直接注入\"></a>直接注入</h3><pre><code>&lt;bean id=&quot;validator&quot; class=&quot;org.springframework.validation.beanvalidation.LocalValidatorFactoryBean&quot;/&gt;</code></pre><h3 id=\"手工注入\"><a href=\"#手工注入\" class=\"headerlink\" title=\"手工注入\"></a>手工注入</h3><blockquote>\n<p>两个都必须有</p>\n</blockquote>\n<pre><code>&lt;!-- 配置 Bean Validator 定义 --&gt;\n&lt;bean id=&quot;validator&quot; class=&quot;org.springframework.validation.beanvalidation.LocalValidatorFactoryBean&quot;/&gt;\n&lt;bean id=&quot;beanValidator&quot; class=&quot;com.funtl.my.shop.commons.validator.BeanValidator&quot;&gt;\n    &lt;property name=&quot;validator&quot; ref=&quot;validator&quot; /&gt;\n&lt;/bean&gt;</code></pre>","categories":[{"name":"Java","slug":"Java","count":21,"path":"api/categories/Java.json"},{"name":"Spring","slug":"Java/Spring","count":1,"path":"api/categories/Java/Spring.json"}],"tags":[{"name":"Spring","slug":"Spring","count":6,"path":"api/tags/Spring.json"},{"name":"Java","slug":"Java","count":21,"path":"api/tags/Java.json"}]}