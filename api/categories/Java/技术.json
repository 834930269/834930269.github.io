{"name":"技术","slug":"Java/技术","count":1,"postlist":[{"title":"深入分析Java Web技术内幕-第二章","slug":"javaweb-two","date":"2018-06-21T07:28:30.000Z","updated":"2019-07-03T13:51:36.863Z","comments":true,"path":"api/articles/javaweb-two.json","excerpt":"","keywords":null,"cover":"http://be-sunshine.cn/wp-content/uploads/2018/06/1ad8ecc702cf83a89ac412c4e586aed3.png","content":"<h1><span id=\"深入分析java-io机制\">深入分析Java I/O机制</span></h1><h2><span id=\"java-io类库的基础架构\">Java I/O类库的基础架构</span></h2><p>类库大概分为四组:</p>\n<blockquote>\n<p>基于字节操作的I/O接口:InputStream 和 OutputStream 基于字符操作的I/O接口: Writer和Reader 基于磁盘操作的I/O接口: File 基于网络操作的I/O接口: Socket (这尼玛也能划到一起,不过这样好像也行)</p>\n</blockquote>\n<h2><span id=\"基于字节的io操作接口\">基于字节的I/O操作接口</span></h2><blockquote>\n<p>InputStream</p>\n</blockquote>\n<p><img src=\"http://be-sunshine.cn/wp-content/uploads/2018/06/1ad8ecc702cf83a89ac412c4e586aed3.png\" alt></p>\n<blockquote>\n<p>OutputStream</p>\n</blockquote>\n<p><img src=\"http://be-sunshine.cn/wp-content/uploads/2018/06/268a47ba3edf2add83c46b8f5a2a5342.png\" alt></p>\n<blockquote>\n<blockquote>\n<p>详见JDK API.</p>\n</blockquote>\n</blockquote>\n<p>Tip: 操作数据可以组合使用-&gt;某流转某流 OutputStream out=new PipeOutputStream(new ObjectOutputStream(new FileOutputStream(“fileName”))); 还有一点是一定要制定流最终要写到哪里</p>\n<h2><span id=\"基于字符的io操作接口\">基于字符的I/O操作接口</span></h2><blockquote>\n<p>I/O接口一般都是字节流,但是为了方便起见,也有字符流.</p>\n</blockquote>\n<p><strong>字符到字节必须经过编码转换,而编码很耗时</strong></p>\n<blockquote>\n<p>写字符接口以及涉及到的类</p>\n</blockquote>\n<p><img src=\"http://be-sunshine.cn/wp-content/uploads/2018/06/d1c5a427e25d73e1ea7d0e04af57c65f.png\" alt> Writer类提供了一个抽象接口:Write(char cbuf[],int off,int len)</p>\n<blockquote>\n<p>读字符</p>\n</blockquote>\n<p><img src=\"http://be-sunshine.cn/wp-content/uploads/2018/06/0b3cd200a1da4d54aaa17d095e16cf42.png\" alt> int Read(char cbuf[],int off,int len) 返回读到的n个字节数 他们只规定了读取和写入的方式,但没有规定读和写到哪里去.</p>\n<h2><span id=\"字节与字符的转化接口\">字节与字符的转化接口</span></h2><blockquote>\n<p>数据持久化或网络传输都是以字节进行的，所以必要有对应的接口</p>\n</blockquote>\n<p><img src=\"http://be-sunshine.cn/wp-content/uploads/2018/06/8aa6ff0a0ffe1b15ad470370844d78b5.png\" alt> InputStreamReader是<strong>字节到字符</strong>的桥梁,InputStream到Reader的过程<strong>要指定编码字符集</strong>,否则将采用操作系统默认字符集,很可能会出现乱码. StreamDecoder是<strong>字节到字符</strong>解码的实现类. StreamEncoder类似 <img src=\"http://be-sunshine.cn/wp-content/uploads/2018/06/f38fb77be5e4351910897b9df42403e3.png\" alt></p>\n<h2><span id=\"磁盘io工作机制\">磁盘I/O工作机制</span></h2><h3><span id=\"应用程序访问文件的几种方式\">应用程序访问文件的几种方式</span></h3><p>read()和write()这两个是系统调用. 系统调用可能会存在内核空间地址和用户空间地址切换的问题,这是操作系统为了保护系统本身的运行安全而将<strong>内核程序运行使用的内存空间和用户活动使用的内核空间隔离</strong>,但是这样虽然保证了内核程序运行的安全性,但是也必然存在<strong>时间耗费的问题</strong> 磁盘I/O非常缓慢,所以操作系统使用了缓存的机制.</p>\n<h4><span id=\"标准访问文件方式\">标准访问文件方式</span></h4><p><img src=\"http://be-sunshine.cn/wp-content/uploads/2018/06/6de33c5d864a218b1d3a0fe38565f411.png\" alt></p>\n<h4><span id=\"直接io方式\">直接I/O方式</span></h4><blockquote>\n<p>直接IO就是直接访问磁盘数据,来减少从内和缓冲区到用户活动区的复制.</p>\n<blockquote>\n<p>这种思想常用于 由应用实现的数据库管理系统. 提前将热点数据加入内存,可以加速数据的访问速度.</p>\n</blockquote>\n<p>但操作系统并不知道哪些是热点数据,所以直接I/O也有负面影响.而我们一般将异步IO和直接IO结合使用.</p>\n</blockquote>\n<p>直接IO方式如图(没有穿过高速页缓存): <img src=\"http://be-sunshine.cn/wp-content/uploads/2018/06/74d178a897ed7f8fd8ba0439ccaceba1.png\" alt></p>\n<h4><span id=\"同步访问文件方式\">同步访问文件方式</span></h4><blockquote>\n<p>即读取与写入都是同步操作的.</p>\n</blockquote>\n<p>但他的标志是:<strong>只有写入完成才是成功的标志</strong> 性能较差</p>\n<h4><span id=\"异步访问文件方式\">异步访问文件方式</span></h4><blockquote>\n<p>异步访问就是,当访问数据的线程发出请求后,线程会继续去处理其它事情,而不是阻塞等待,当请求的数据返回后再继续处理接下来的操作.</p>\n</blockquote>\n<p>这种方式可以明显的提高应用程序的效率,但并不会改变访问文件的效率. <img src=\"http://be-sunshine.cn/wp-content/uploads/2018/06/423d961b94b4779ba7212af4db51017c.png\" alt></p>\n<h4><span id=\"内存映射方式\">内存映射方式</span></h4><blockquote>\n<p>将操作系统某一块区域与磁盘中的文件关联起来,增加缓冲区的个数,减少缓冲区-&gt;用户活动区的复制操作</p>\n</blockquote>\n<p><img src=\"http://be-sunshine.cn/wp-content/uploads/2018/06/246dcd50203f24f93da00714daae2db3.png\" alt></p>\n<h3><span id=\"java访问磁盘文件\">Java访问磁盘文件</span></h3><p>接下来我们来讨论数据的流向</p>\n<h4><span id=\"数据持久化到磁盘\">数据持久化到磁盘</span></h4><p>数据在磁盘中唯一<strong>最小描述</strong>就是<strong>文件</strong>. 文件也是操作系统和磁盘驱动器交互的<strong>最小单元</strong> Java中的File<strong>并不代表一个真实存在的对象</strong>.而是一个路径和虚拟对象. 因为我们更多关心的是操作,而不是整个文件. <img src=\"http://be-sunshine.cn/wp-content/uploads/2018/06/76a6f5098ea16378295a325a05064602.png\" alt> 从磁盘中读取文件流程: <img src=\"http://be-sunshine.cn/wp-content/uploads/2018/06/f6b5aefd246cf978ed0563d0f999191e.png\" alt></p>\n<ul>\n<li>先创建一个FileDescriptor对象</li>\n<li>然后创建FileInputStream</li>\n<li>因为要读取的是字符格式,所以需要StreamDecoder类将byte解码为char格式…</li>\n</ul>\n","text":"深入分析Java I/O机制Java I/O类库的基础架构类库大概分为四组:基于字节操作的I/O接口:InputStream 和 OutputStream 基于字符操作的I/O接口: Writer和Reader 基于磁盘操作的I/O接口: File 基于网络操作的I/O接口: S","link":"","raw":null,"photos":[],"categories":[{"name":"Java","slug":"Java","count":21,"path":"api/categories/Java.json"},{"name":"技术","slug":"Java/技术","count":1,"path":"api/categories/Java/技术.json"}],"tags":[{"name":"技术","slug":"技术","count":14,"path":"api/tags/技术.json"},{"name":"Java","slug":"Java","count":21,"path":"api/tags/Java.json"}]}]}