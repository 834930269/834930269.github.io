{"name":"MyBatis","slug":"MyBatis","count":2,"postlist":[{"title":"Spring 黏合 Mybatis (已整合druid前提下)","slug":"spring-cohesive-mybatis","date":"2019-02-04T02:20:51.000Z","updated":"2019-07-03T15:58:55.530Z","comments":true,"path":"api/articles/spring-cohesive-mybatis.json","excerpt":"<h1 id=\"前提-已经创建好了druid\"><a href=\"#前提-已经创建好了druid\" class=\"headerlink\" title=\"前提,已经创建好了druid\"></a>前提,已经创建好了druid</h1><blockquote>\n<p>且druid的id为datasource,作为mybatis的数据源</p>\n</blockquote>\n<h1 id=\"Document\"><a href=\"#Document\" class=\"headerlink\" title=\"Document\"></a>Document</h1><p><a href=\"http://www.mybatis.org/mybatis-3/zh/index.html\" target=\"_blank\" rel=\"noopener\">http://www.mybatis.org/mybatis-3/zh/index.html</a></p>\n<h1 id=\"创建-mybatis-config-xml\"><a href=\"#创建-mybatis-config-xml\" class=\"headerlink\" title=\"创建 mybatis-config.xml\"></a>创建 mybatis-config.xml</h1><blockquote>\n<p>因为已经整合过了druid,所以数据源为datasource,即不用再设置连接数据库等操作,直接从连接池druid中取出即可.</p>\n<blockquote>\n<p>只需要配置几个setting属性</p>\n</blockquote>\n</blockquote>","keywords":null,"cover":null,"content":null,"text":"前提,已经创建好了druid且druid的id为datasource,作为mybatis的数据源Documenthttp://www.mybatis.org/mybatis-3/zh/index.html创建 mybatis-config.xml因为已经整合过了druid,所以数","link":"","raw":null,"photos":[],"categories":[{"name":"MyBatis","slug":"MyBatis","count":2,"path":"api/categories/MyBatis.json"},{"name":"Spring","slug":"MyBatis/Spring","count":1,"path":"api/categories/MyBatis/Spring.json"}],"tags":[{"name":"Spring","slug":"Spring","count":6,"path":"api/tags/Spring.json"},{"name":"MyBatis","slug":"MyBatis","count":2,"path":"api/tags/MyBatis.json"}]},{"title":"MyBatis - 数据持久化","slug":"mybatis","date":"2019-01-18T03:38:26.000Z","updated":"2019-07-03T13:51:36.863Z","comments":true,"path":"api/articles/mybatis.json","excerpt":"","keywords":null,"cover":"http://be-sunshine.cn/wp-content/uploads/2019/01/Lusifer2018061304510002.png","content":"<h1><span id=\"学习网站\">学习网站</span></h1><blockquote>\n<p><a href=\"http://www.funtl.com/zh/mybatis/\" title=\"广州前锋\" target=\"_blank\" rel=\"noopener\">广州前锋</a></p>\n</blockquote>\n<h1><span id=\"脏读脏写\">脏读,脏写</span></h1><blockquote>\n<p>把之前本该不存在的值读,写入数据库</p>\n</blockquote>\n<h1><span id=\"mybatis\">MyBatis</span></h1><blockquote>\n<p>将数据库与应用解耦的中间件. <img src=\"http://be-sunshine.cn/wp-content/uploads/2019/01/Lusifer2018061304510002.png\" alt></p>\n</blockquote>\n<h1><span id=\"druid\">Druid</span></h1><blockquote>\n<p>阿里开源的一款框架,目前(?)连接池中最快.</p>\n</blockquote>\n<h1><span id=\"先放上一组示例\">先放上一组示例</span></h1><h2><span id=\"项目结构\">项目结构</span></h2><p><img src=\"http://be-sunshine.cn/wp-content/uploads/2019/01/%E6%8D%95%E8%8E%B7-1.png\" alt></p>\n<h2><span id=\"1-环境\">1 环境</span></h2><p>Idea + maven3.3.9 + mysql5.7</p>\n<h2><span id=\"2-开发过程\">2 开发过程</span></h2><h3><span id=\"建立数据表\">建立数据表</span></h3><p>在本地mysql数据库中建立名为test的database，并建立user表：</p>\n<pre><code>CREATE DATABASE test default charset=utf8;\n\nCREATE TABLE `user` (\n  `name` varchar(64) DEFAULT NULL,\n  `age` int(11) DEFAULT NULL\n) ENGINE=InnoDB DEFAULT CHARSET=utf8;\n\ninsert  into `user`(`name`,`age`) values (&apos;叶莜落&apos;,27),(&apos;张三丰&apos;,128);</code></pre><h3><span id=\"建立一个maven工程pom文件如下\">建立一个maven工程，POM文件如下：</span></h3><pre><code>&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;\n  &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;\n  &lt;groupId&gt;com.yeyouluo.mybatis.druid&lt;/groupId&gt;\n  &lt;artifactId&gt;mybatis-druid&lt;/artifactId&gt;\n  &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;\n\n  &lt;properties&gt;\n      &lt;myabtis.version&gt;3.4.1&lt;/myabtis.version&gt;\n  &lt;/properties&gt;\n\n  &lt;dependencies&gt;\n       &lt;dependency&gt;\n            &lt;groupId&gt;org.mybatis&lt;/groupId&gt;\n            &lt;artifactId&gt;mybatis&lt;/artifactId&gt;\n            &lt;version&gt;${myabtis.version}&lt;/version&gt;\n        &lt;/dependency&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;mysql&lt;/groupId&gt;\n            &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;\n            &lt;version&gt;5.1.30&lt;/version&gt;\n        &lt;/dependency&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;com.alibaba&lt;/groupId&gt;\n            &lt;artifactId&gt;druid&lt;/artifactId&gt;\n            &lt;version&gt;1.0.14&lt;/version&gt;\n        &lt;/dependency&gt;\n  &lt;/dependencies&gt;\n&lt;/project&gt;</code></pre><h3><span id=\"配置文件\">配置文件</span></h3><p>①db.properties</p>\n<pre><code>driver=com.mysql.jdbc.Driver\nurl=jdbc:mysql://localhost:3306/test\nusername=root\npassword=root</code></pre><p>②mybatis-config.xml</p>\n<pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;\n&lt;!DOCTYPE configuration PUBLIC &quot;-//mybatis.org//DTD Config 3.0//EN&quot;\n        &quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;&gt;\n&lt;configuration&gt;\n    &lt;!-- 引用db.properties配置文件 --&gt;\n    &lt;properties resource=&quot;db.properties&quot; /&gt;\n\n    &lt;typeAliases&gt;\n        &lt;typeAlias type=&quot;com.yeyouluo.mybatis.druid.utils.DruidDataSourceFactory&quot;\n            alias=&quot;DRUID&quot; /&gt;\n    &lt;/typeAliases&gt;\n\n    &lt;!-- development : 开发模式 work : 工作模式 --&gt;\n    &lt;environments default=&quot;work&quot;&gt;\n        &lt;environment id=&quot;work&quot;&gt;\n            &lt;transactionManager type=&quot;JDBC&quot; /&gt;\n            &lt;!-- 配置数据库连接信息 --&gt;\n            &lt;dataSource type=&quot;DRUID&quot;&gt;\n                &lt;!-- value属性值引用db.properties配置文件中配置的值 --&gt;\n                &lt;property name=&quot;driver&quot; value=&quot;${driver}&quot; /&gt;\n                &lt;property name=&quot;url&quot; value=&quot;${url}&quot; /&gt;\n                &lt;property name=&quot;username&quot; value=&quot;${username}&quot; /&gt;\n                &lt;property name=&quot;password&quot; value=&quot;${password}&quot; /&gt;\n            &lt;/dataSource&gt;\n        &lt;/environment&gt;\n    &lt;/environments&gt;\n\n    &lt;!-- mybatis的mapper文件，每个xml配置文件对应一个接口 --&gt;\n    &lt;mappers&gt;\n        &lt;mapper resource=&quot;mapper/userMapper.xml&quot; /&gt;\n    &lt;/mappers&gt;\n&lt;/configuration&gt;</code></pre><p>③在resources目录下建立userMapper.xml</p>\n<pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;  \n&lt;!DOCTYPE mapper PUBLIC &quot;-//ibatis.apache.org//DTD Mapper 3.0//EN&quot;      \n &quot;http://ibatis.apache.org/dtd/ibatis-3-mapper.dtd&quot;&gt;\n&lt;mapper namespace=&quot;com.yeyouluo.mybatis.druid.dao.userDao&quot;&gt;\n    &lt;select id=&quot;findAllUsers&quot; resultType=&quot;com.yeyouluo.mybatis.druid.pojo.User&quot;&gt;\n        select * from user\n    &lt;/select&gt;\n&lt;/mapper&gt;</code></pre><h3><span id=\"实体类-user\">实体类 User</span></h3><pre><code>package com.yeyouluo.mybatis.druid.pojo;\n\npublic class User {\n\n    private String name;\n    private int age;\n\n    public String getName() {\n        return name;\n    }\n\n    public void setName(String name) {\n        this.name = name;\n    }\n\n    public int getAge() {\n        return age;\n    }\n\n    public void setAge(int age) {\n        this.age = age;\n    }\n\n    @Override\n    public String toString() {\n        return &quot;User [name=&quot; + name + &quot;, age=&quot; + age + &quot;]&quot;;\n    }\n\n}</code></pre><h3><span id=\"工具类\">工具类</span></h3><p>①DruidDataSourceFactory.java</p>\n<pre><code>package com.yeyouluo.mybatis.druid.utils;\n\nimport java.sql.SQLException;\nimport java.util.Properties;\nimport javax.sql.DataSource;\nimport org.apache.ibatis.datasource.DataSourceFactory;\nimport com.alibaba.druid.pool.DruidDataSource;\n\npublic class DruidDataSourceFactory implements DataSourceFactory {\n    private Properties props;\n\n    @Override\n    public DataSource getDataSource() {\n        DruidDataSource dds = new DruidDataSource();\n        dds.setDriverClassName(this.props.getProperty(&quot;driver&quot;));\n        dds.setUrl(this.props.getProperty(&quot;url&quot;));\n        dds.setUsername(this.props.getProperty(&quot;username&quot;));\n        dds.setPassword(this.props.getProperty(&quot;password&quot;));\n        // 其他配置可以根据MyBatis主配置文件进行配置\n        try {\n            dds.init();\n        } catch (SQLException e) {\n            e.printStackTrace();\n        }\n        return dds;\n    }\n\n    @Override\n    public void setProperties(Properties props) {\n        this.props = props;\n    }\n}</code></pre><p>②MyBatisUtil.java</p>\n<pre><code>package com.yeyouluo.mybatis.druid.utils;\n\nimport java.io.InputStream;\n\nimport org.apache.ibatis.io.Resources;\nimport org.apache.ibatis.session.SqlSession;\nimport org.apache.ibatis.session.SqlSessionFactory;\nimport org.apache.ibatis.session.SqlSessionFactoryBuilder;\n\npublic class MyBatisUtil {\n    private static final String configFile = &quot;mybatis-config.xml&quot;;\n\n    /**\n     * 创建连接\n     */\n    public static SqlSession getSession() {\n        SqlSession session = null;\n        try {\n            InputStream is = Resources.getResourceAsStream(configFile);\n            SqlSessionFactory factory = new SqlSessionFactoryBuilder().build(is);\n            session = factory.openSession();\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n        return session;\n    }\n\n    public static void closeSession(SqlSession session) {\n        session.close();\n    }\n\n    public static void main(String[] args) {\n        SqlSession session = MyBatisUtil.getSession();\n        System.out.println(session);\n        session.close();\n    }\n}</code></pre><h3><span id=\"dao\">DAO</span></h3><p>①接口IUserDao.java</p>\n<pre><code>package com.yeyouluo.mybatis.druid.dao;\n\nimport java.util.List;\n\nimport com.yeyouluo.mybatis.druid.pojo.User;\n\npublic interface IUserDao {\n    public List&lt;User&gt; findAllUsers();\n}</code></pre><p>②实现类UserDao.java</p>\n<pre><code>package com.yeyouluo.mybatis.druid.dao.impl;\n\nimport java.util.List;\n\nimport org.apache.ibatis.session.SqlSession;\n\nimport com.yeyouluo.mybatis.druid.dao.IUserDao;\nimport com.yeyouluo.mybatis.druid.pojo.User;\nimport com.yeyouluo.mybatis.druid.utils.MyBatisUtil;\n\npublic class UserDao implements IUserDao {\n\n    private static final String namespace = &quot;com.yeyouluo.mybatis.druid.dao.userDao.&quot;;\n\n    @Override\n    public List&lt;User&gt; findAllUsers() {\n        List&lt;User&gt; users = null;\n        SqlSession session = MyBatisUtil.getSession();\n        try {\n            users = session.selectList(namespace + &quot;findAllUsers&quot;, User.class);\n            //注意：此处有陷阱，如果做了更新、插入或删除操作，必须使用：\n            //session.commit();\n        } catch (Exception e) {\n            e.printStackTrace();\n        }finally{\n            MyBatisUtil.closeSession(session);\n        }\n        return users;\n    }\n\n}</code></pre><h3><span id=\"测试类userdaotestjava\">测试类UserDaoTest.java</span></h3><pre><code>package com.yeyouluo.mybatis.druid.dao.test;\n\nimport java.util.List;\n\nimport com.yeyouluo.mybatis.druid.dao.IUserDao;\nimport com.yeyouluo.mybatis.druid.dao.impl.UserDao;\nimport com.yeyouluo.mybatis.druid.pojo.User;\n\npublic class UserDaoTest {\n\n    public static void main(String[] args) {\n        // TODO Auto-generated method stub\n        IUserDao userDao = new UserDao();\n        List&lt;User&gt; users= userDao.findAllUsers();\n\n        for(User user : users){\n            System.out.println(user.toString());\n        }\n    }\n\n}</code></pre>","text":"学习网站广州前锋脏读,脏写把之前本该不存在的值读,写入数据库MyBatis将数据库与应用解耦的中间件.  [Figure] 1 环境Idea + maven3.3.9 + mysql5.72 开发过程建立数据表在本地mysql数据库中建立名为test的database，并建立us","link":"","raw":null,"photos":[],"categories":[{"name":"MyBatis","slug":"MyBatis","count":2,"path":"api/categories/MyBatis.json"}],"tags":[{"name":"MyBatis","slug":"MyBatis","count":2,"path":"api/tags/MyBatis.json"}]}]}