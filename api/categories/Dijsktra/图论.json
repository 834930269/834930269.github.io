{"name":"图论","slug":"Dijsktra/图论","count":1,"postlist":[{"title":"PAT L3-005","slug":"pat-l3-005","date":"2017-04-03T17:18:58.000Z","updated":"2019-07-03T13:51:36.847Z","comments":true,"path":"api/articles/pat-l3-005.json","excerpt":"","keywords":null,"cover":null,"content":"<p><strong>【Tip】</strong> <strong>Dijsktra模板题</strong> <strong>【Code】</strong></p>\n<blockquote>\n<p><strong>#include&lt;bits/stdc++.h&gt;</strong> <strong>#define fill(x) memset(x,0,sizeof(x))</strong> <strong>#define INF 0x3f3f3f3f</strong> <strong>using namespace std;</strong> <strong>const int maxn=30000;</strong> <strong>int N,M,K,D;</strong> <strong>char alpha1[100],alpha2[100];</strong> <strong>int now,goal,di;</strong>  <strong>struct Edge{</strong> <strong>int from,to,dist;</strong> <strong>};</strong> <strong>struct HeapNode{  //Dijkstra算法用到的优先队列的节点</strong> **    int d,u;** **    bool operator&lt;(const HeapNode&amp; rhs)const{** <strong>return d&gt;rhs.d;</strong> <strong>}</strong> <strong>};</strong> <strong>struct Dijkstra{</strong> **    int n,m; //点数和边数** **    vector<edge> edges; //边列表** **    vector<int> G[maxn]; //每个节点出发的边编号(从0开始编号)** **    bool done[maxn];    //是否永久标号** **    int d[maxn];        //s到各个点的距离** <strong>int p[maxn];        //最短路中的上一条边</strong> **    void init(int n){** **        this-&gt;n=n;** **        for(int i=0;i&lt;n;++i) G[i].clear();//清空邻接表** <strong>edges.clear();//清空边表</strong> <strong>}</strong>  **    void AddEdge(int from,int to,int dist){** **        //如果是无向图,每条无向边需调用两次AddEdge** **        edges.push_back((Edge){from,to,dist});** **        m=edges.size();** <strong>G[from].push_back(m-1);</strong> <strong>}</strong>  **    void dijkstra(int s){//求s到所有点的距离** **         priority_queue<heapnode> Q;** **         for(int i=0;i&lt;n;++i) d[i]=INF;** **         d[s]=0;** **         fill(done);** **         Q.push((HeapNode){0,s});** **         while(!Q.empty()){** **             HeapNode x=Q.top(); Q.pop();** **            int u=x.u;** **            if(done[u])continue;** **            done[u]=true;** **            for(int i=0;i&lt;G[u].size();++i){** **                Edge &amp;e=edges[G[u][i]];** **                if(d[e.to]&gt;d[u]+e.dist){** **                    d[e.to]=d[u]+e.dist;** **                    p[e.to]=G[u][i];** <strong>Q.push((HeapNode){d[e.to],e.to});</strong> <strong>}</strong> <strong>}</strong> **         }** <strong>}</strong> <strong>};</strong> <strong>int main(){</strong> **    while(~scanf(“%d%d%d%d”,&amp;N,&amp;M,&amp;K,&amp;D)){** **        Dijkstra dj;** <strong>dj.init(N+M);</strong> **        for(int i=0;i&lt;K;++i){** <strong>scanf(“\\n%s %s %d”,alpha1,alpha2,&amp;di);</strong> **            //因为可能出现G10 123等字符串** **            //所以这里转换必须用atoi或stoi** <strong>//后者是c11的</strong> <strong>if(alpha1[0]==’G’){</strong> <strong>now = N-1 + atoi(alpha1+1);</strong> **            }else** <strong>now = atoi(alpha1)-1;</strong>  <strong>if(alpha2[0]==’G’){</strong> **                goal = N-1 + atoi(alpha2+1);** **            }else** **                goal = atoi(alpha2)-1;**  **            dj.AddEdge(now,goal,di);** <strong>dj.AddEdge(goal,now,di);</strong> <strong>}</strong> **        int ansid=-1,ansdis=INF;** <strong>double ansave=INF;</strong>  **        for(int i=0;i&lt;M;++i){** **            int index=i+N,mindis=INF;** **            bool flag=true;** **            double ave=0.0;** **            dj.dijkstra(index);** **            for(int j=0;j&lt;N;++j){** **                if(dj.d[j]&gt;D){** **                    flag=false;** **                    break;** **                }** **                ave+=1.0<em>dj.d[j];*</em> **                mindis=mindis&gt;dj.d[j]?dj.d[j]:mindis;** <strong>}</strong> **            if(!flag)** **                continue;** **            else{** **                if(ansdis==INF){** **                    ave=ave/N;** **                    ansave=ave;** **                    ansid=i;** **                    ansdis=mindis;** **                }else if(mindis&gt;ansdis){** **                    ave=ave/N;** **                    ansave=ave;** **                    ansid=i;** **                    ansdis=mindis;** **                }else if(ansdis==mindis){** **                    ave=ave/N;** **                    if(ave&lt;ansave){** **                        ansave=ave;** **                        ansid=i;** **                        ansdis=mindis;** **                    }else if(ave==ansave){** **                        ansid=i&gt;ansid?ansid:i;** **                        ansdis=mindis;** **                    }** **                }** **            }** **        }**  **        if(ansid==-1)** **            printf(“No Solution\\n”);** **        else{** **            printf(“G%d\\n”,ansid+1);** <strong>printf(“%.1f %.1f\\n”,1.0*ansdis,ansave);</strong> <strong>}</strong> <strong>}</strong> <strong>return 0;</strong> <strong>}</strong></heapnode></int></edge></p>\n</blockquote>\n","text":"【Tip】 Dijsktra模板题 【Code】#include&lt;bits/stdc++.h&gt; #define fill(x) memset(x,0,sizeof(x)) #define INF 0x3f3f3f3f using namespace std; cons","link":"","raw":null,"photos":[],"categories":[{"name":"Dijsktra","slug":"Dijsktra","count":1,"path":"api/categories/Dijsktra.json"},{"name":"图论","slug":"Dijsktra/图论","count":1,"path":"api/categories/Dijsktra/图论.json"}],"tags":[{"name":"图论","slug":"图论","count":6,"path":"api/tags/图论.json"},{"name":"Dijsktra","slug":"Dijsktra","count":1,"path":"api/tags/Dijsktra.json"}]}]}