{"name":"Spring","slug":"Spring","count":4,"postlist":[{"title":"Bean的装配","slug":"bean","date":"2019-01-25T03:09:02.000Z","updated":"2019-07-03T13:51:36.864Z","comments":true,"path":"api/articles/bean.json","excerpt":"","keywords":null,"cover":null,"content":"<p>对于Bean的获取,完全可以通过Ioc容器来获取.但是这样产生的问题即代码复用率过高.所以使用其他更方便获取Bean的装配方式就显得格外重要.</p>\n<h1 id=\"基于注解的装配方式\"><a href=\"#基于注解的装配方式\" class=\"headerlink\" title=\"基于注解的装配方式\"></a>基于注解的装配方式</h1><h2 id=\"Spring-context-xml配置\"><a href=\"#Spring-context-xml配置\" class=\"headerlink\" title=\"Spring-context.xml配置\"></a>Spring-context.xml配置</h2><blockquote>\n<p>为了告诉Spring你要用这种注解:</p>\n</blockquote>\n<pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;\n&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;\n       xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;\n       xmlns:context=&quot;http://www.springframework.org/schema/context&quot;\n       xsi:schemaLocation=&quot;\n       http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd \n       http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd\n&quot;&gt;\n\n    &lt;context:annotation-config /&gt;\n    &lt;context:component-scan base-package=&quot;com.funtl.leeshop&quot;/&gt;\n&lt;/beans&gt;</code></pre><h2 id=\"注解类型\"><a href=\"#注解类型\" class=\"headerlink\" title=\"注解类型\"></a>注解类型</h2><p>注解</p>\n<p>作用</p>\n<p>@Component(value=”name”)</p>\n<p>类上,value属性用于指定类的id</p>\n<p>@Repository</p>\n<p>用于对DAO实现类进行注解</p>\n<p>@Service</p>\n<p>用于对 Service 实现类进行注解</p>\n<p>@Controller</p>\n<p>用于对 Controller 实现类进行注解</p>\n<p>@Scope</p>\n<p>需要在<code>类</code>上使用注解 @Scope，其 value 属性用于指定作用域。默认为 singleton。</p>\n<p>@Value</p>\n<p>需要在<code>属性</code>上使用注解 @Value，该注解的 value 属性用于指定要注入的值。</p>\n<p>@Autowired</p>\n<p>需要在<code>域属性</code>上使用注解 @Autowired，该注解默认使用 按类型自动装配 Bean 的方式。</p>\n<p>@Resource</p>\n<p>需要在<code>域属性</code>上使用注解 @Resource，该注解有一个 name 属性，可以创建指定的 bean</p>\n<p>@PostConstruct</p>\n<p>在方法上使用 @PostConstruct 相当于初始化</p>\n<h1 id=\"XML配置\"><a href=\"#XML配置\" class=\"headerlink\" title=\"XML配置\"></a>XML配置</h1><blockquote>\n<p>之前讲过,用标签</p>\n<blockquote>\n<p>就自动添加到IoC容器中了.</p>\n</blockquote>\n</blockquote>\n","text":"对于Bean的获取,完全可以通过Ioc容器来获取.但是这样产生的问题即代码复用率过高.所以使用其他更方便获取Bean的装配方式就显得格外重要.基于注解的装配方式Spring-context.xml配置为了告诉Spring你要用这种注解:&lt;?xml version=&quot","link":"","raw":null,"photos":[],"categories":[{"name":"Spring","slug":"Spring","count":4,"path":"api/categories/Spring.json"}],"tags":[{"name":"Spring","slug":"Spring","count":6,"path":"api/tags/Spring.json"}]},{"title":"Spring 注解 @ModelAttribute","slug":"spring-annotation-modelattribute","date":"2019-02-05T09:25:30.000Z","updated":"2019-07-03T16:08:56.030Z","comments":true,"path":"api/articles/spring-annotation-modelattribute.json","excerpt":"","keywords":null,"cover":null,"content":"<h1><span id=\"spring-mvc-表单标签库\">Spring MVC 表单标签库</span></h1><p><a href=\"http://www.funtl.com/zh/spring-mvc/Spring-MVC-%E8%A1%A8%E5%8D%95%E6%A0%87%E7%AD%BE%E5%BA%93.html#%E5%8D%95%E9%80%89%E6%8C%89%E9%92%AE%EF%BC%88%E5%A4%9A%E9%80%89%EF%BC%89\" target=\"_blank\" rel=\"noopener\">http://www.funtl.com/zh/spring-mvc/Spring-MVC-%E8%A1%A8%E5%8D%95%E6%A0%87%E7%AD%BE%E5%BA%93.html#%E5%8D%95%E9%80%89%E6%8C%89%E9%92%AE%EF%BC%88%E5%A4%9A%E9%80%89%EF%BC%89</a></p>\n<h1><span id=\"jquery-validationbootstrap前端验证\">JQuery Validation+Bootstrap(前端验证)</span></h1><p><a href=\"http://www.funtl.com/zh/supplement1/jQuery-Validation.html#%E9%A1%B5%E9%9D%A2%E5%BC%95%E7%94%A8\" target=\"_blank\" rel=\"noopener\">http://www.funtl.com/zh/supplement1/jQuery-Validation.html#%E9%A1%B5%E9%9D%A2%E5%BC%95%E7%94%A8</a></p>\n<h1><span id=\"jquery-icheckbootstrap前端复选框\">JQuery iCheck+Bootstrap(前端复选框)</span></h1><p><a href=\"http://www.funtl.com/zh/supplement1/jQuery-iCheck.html#%E6%BF%80%E6%B4%BB-icheck\" target=\"_blank\" rel=\"noopener\">http://www.funtl.com/zh/supplement1/jQuery-iCheck.html#%E6%BF%80%E6%B4%BB-icheck</a></p>\n<h1><span id=\"什么是-modelattribute\">什么是 @ModelAttribute?</span></h1><ul>\n<li>绑定请求参数到命令对象：放在功能处理方法的入参上时，用于将多个请求参数绑定到一个命令对象，从而简化绑定流程，而且自动暴露为模型数据用于视图页面展示时使用</li>\n<li>暴露 @RequestMapping 方法返回值为模型数据：放在功能处理方法的返回值上时，是暴露功能处理方法的返回值为模型数据，用于视图页面展示时使用</li>\n<li>暴露表单引用对象为模型数据：放在处理器的一般方法（非功能处理方法）上时，是为表单准备要展示的表单引用对象，如注册时需要选择的所在城市等，而且在执行功能处理方法（@RequestMapping 注解的方法）之前，自动添加到模型对象中，用于视图页面展示时使用</li>\n</ul>\n<blockquote>\n<p>即简化AOP编程,不使用拦截器在同一Controller下直接进行拦截或者预处理,其属性会继承给每一个RequestMapping的视图层.</p>\n</blockquote>\n<h1><span id=\"例子\">例子</span></h1><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.funtl.my.shop.web.admin.web.controller;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.funtl.my.shop.commons.dto.BaseResult;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.funtl.my.shop.domain.TbUser;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.funtl.my.shop.web.admin.service.TbUserService;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.beans.factory.<span class=\"keyword\">annotation</span>.Autowired;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.stereotype.Controller;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.ui.Model;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.<span class=\"keyword\">annotation</span>.ModelAttribute;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.<span class=\"keyword\">annotation</span>.RequestMapping;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.<span class=\"keyword\">annotation</span>.RequestMethod;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.servlet.mvc.support.RedirectAttributes;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.List;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Controller</span></span><br><span class=\"line\"><span class=\"meta\">@RequestMapping(value=<span class=\"meta-string\">\"user\"</span>)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UserController</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> TbUserService tbUserService;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@ModelAttribute</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> TbUser getTbUser(<span class=\"built_in\">Long</span> id)&#123;</span><br><span class=\"line\">        TbUser tbUser=<span class=\"literal\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(id!=<span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">            tbUser=tbUserService.getById(id);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            tbUser=new TbUser();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> tbUser;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 跳转到用户列表页</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> model</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@RequestMapping(value=<span class=\"meta-string\">\"list\"</span>,method= RequestMethod.GET)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String list(Model model)&#123;</span><br><span class=\"line\">        List&lt;TbUser&gt; tbUsers=tbUserService.selectAll();</span><br><span class=\"line\">        model.addAttribute(<span class=\"string\">\"tbUsers\"</span>,tbUsers);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"user_list\"</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@RequestMapping(value=<span class=\"meta-string\">\"form\"</span>,method=RequestMethod.GET)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String form()&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"user_form\"</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@RequestMapping(value=<span class=\"meta-string\">\"save\"</span>,method=RequestMethod.POST)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String save(TbUser tbUser, Model model,RedirectAttributes redirectAttributes)&#123;</span><br><span class=\"line\">        BaseResult baseResult=tbUserService.save(tbUser);</span><br><span class=\"line\">        <span class=\"comment\">//保存成功</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(baseResult.getStatus()==<span class=\"number\">200</span>)&#123;</span><br><span class=\"line\">            redirectAttributes.addFlashAttribute(<span class=\"string\">\"baseResult\"</span>,baseResult);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">\"redirect:/user/list\"</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//保存失败</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            model.addAttribute(<span class=\"string\">\"baseResult\"</span>,baseResult);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">\"user_form\"</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n<blockquote>\n<p>这样操作过后可以很轻松的将 预处理的TbUser绑定到Model上.</p>\n</blockquote>\n","text":"Spring MVC 表单标签库http://www.funtl.com/zh/spring-mvc/Spring-MVC-%E8%A1%A8%E5%8D%95%E6%A0%87%E7%AD%BE%E5%BA%93.html#%E5%8D%95%E9%80%89%E6%8C%89","link":"","raw":null,"photos":[],"categories":[{"name":"Spring","slug":"Spring","count":4,"path":"api/categories/Spring.json"}],"tags":[{"name":"Spring","slug":"Spring","count":6,"path":"api/tags/Spring.json"}]},{"title":"使用Spring(胶水框架)粘贴druid","slug":"spring-druid","date":"2019-02-03T09:40:59.000Z","updated":"2019-07-03T16:10:13.718Z","comments":true,"path":"api/articles/spring-druid.json","excerpt":"<h1 id=\"完善druid所需配置-myshop-properties\"><a href=\"#完善druid所需配置-myshop-properties\" class=\"headerlink\" title=\"完善druid所需配置 myshop.properties\"></a>完善druid所需配置 myshop.properties</h1><figure class=\"highlight julia\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#============================#</span></span><br><span class=\"line\"><span class=\"comment\">#==== Database settings ====#</span></span><br><span class=\"line\"><span class=\"comment\">#============================#</span></span><br><span class=\"line\"><span class=\"comment\"># JDBC</span></span><br><span class=\"line\"><span class=\"comment\"># MySQL 8.x: com.mysql.cj.jdbc.Driver</span></span><br><span class=\"line\">jdbc.driverClass=com.mysql.jdbc.Driver</span><br><span class=\"line\">jdbc.connectionURL=jdbc:mysql://<span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span>:<span class=\"number\">3306</span>/myshop?useUnicode=<span class=\"literal\">true</span>&amp;characterEncoding=utf-<span class=\"number\">8</span>&amp;useSSL=<span class=\"literal\">false</span></span><br><span class=\"line\">jdbc.username=你的用户</span><br><span class=\"line\">jdbc.password=你的密码</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># JDBC Pool</span></span><br><span class=\"line\"><span class=\"comment\"># 初始化池的数量</span></span><br><span class=\"line\">jdbc.pool.init=<span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"comment\"># 最小数量</span></span><br><span class=\"line\">jdbc.pool.minIdle=<span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"comment\"># 最大可活动数量</span></span><br><span class=\"line\">jdbc.pool.maxActive=<span class=\"number\">20</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># JDBC Test</span></span><br><span class=\"line\">jdbc.testSql=SELECT <span class=\"string\">'x'</span> FROM DUAL</span><br></pre></td></tr></table></figure>","keywords":null,"cover":"http://be-sunshine.cn/wp-content/uploads/2019/02/QQ%E6%88%AA%E5%9B%BE20190203175906.png","content":null,"text":"完善druid所需配置 myshop.properties1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>","link":"","raw":null,"photos":[],"categories":[{"name":"Spring","slug":"Spring","count":4,"path":"api/categories/Spring.json"}],"tags":[{"name":"Spring","slug":"Spring","count":6,"path":"api/tags/Spring.json"}]},{"title":"基础概念、项目结构和配置","slug":"spring","date":"2019-01-18T11:03:03.000Z","updated":"2019-07-03T13:51:36.863Z","comments":true,"path":"api/articles/spring.json","excerpt":"","keywords":null,"cover":"http://be-sunshine.cn/wp-content/uploads/2019/01/%E6%8D%95%E8%8E%B72.png","content":"<h1 id=\"1-实现简单三层架构单体应用-登入\"><a href=\"#1-实现简单三层架构单体应用-登入\" class=\"headerlink\" title=\"1 - 实现简单三层架构单体应用(登入)\"></a>1 - 实现简单三层架构单体应用(登入)</h1><h2 id=\"项目架构\"><a href=\"#项目架构\" class=\"headerlink\" title=\"项目架构\"></a>项目架构</h2><p><img src=\"http://be-sunshine.cn/wp-content/uploads/2019/01/%E6%8D%95%E8%8E%B72.png\" alt></p>\n<h2 id=\"注意\"><a href=\"#注意\" class=\"headerlink\" title=\"注意\"></a>注意</h2><blockquote>\n<p>不使用新建项目,而采用单独新建文件夹架构项目的方式.</p>\n</blockquote>\n<ol>\n<li>Mark Directory <code>src/main/java</code> as Sources Root</li>\n<li>Mark Directory <code>src/main/resources</code> as Resources Root</li>\n<li>将webapp设置为web目录</li>\n</ol>\n<h2 id=\"宏观流程\"><a href=\"#宏观流程\" class=\"headerlink\" title=\"宏观流程\"></a>宏观流程</h2><blockquote>\n<p>即不深入运行过程,仅从简单逻辑层面来判断.</p>\n</blockquote>\n<p>document.write(“graph TD\\nA[客户端请求] –&gt;|请求到达| B(Controller中 Get/Post处理方法)\\nB –&gt; C(ServiceImpl - extends Service)\\nC –&gt; D(DaoImpl - extends Dao)\\nD –&gt; E(Model实体)\\n”);</p>\n<h2 id=\"xml配置以及基本框架\"><a href=\"#xml配置以及基本框架\" class=\"headerlink\" title=\"xml配置以及基本框架\"></a>xml配置以及基本框架</h2><blockquote>\n<p>对于servlet的配置</p>\n<blockquote>\n<p>WEB-INF下web.xml -&gt; 将Controller映射到某一个Uri上</p>\n</blockquote>\n<p>pom.xml</p>\n<blockquote>\n<p>Maven配置依赖项</p>\n</blockquote>\n<p>spring-context.xml</p>\n<blockquote>\n<p>控制反转,将bean交给SpringIoC容器</p>\n</blockquote>\n</blockquote>\n<h3 id=\"web-xml\"><a href=\"#web-xml\" class=\"headerlink\" title=\"web.xml\"></a>web.xml</h3><pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;\n&lt;web-app xmlns=&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;\n         xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;\n         xsi:schemaLocation=&quot;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd&quot;\n         version=&quot;4.0&quot;&gt;\n&lt;/web-app&gt;</code></pre><h3 id=\"pom-xml\"><a href=\"#pom-xml\" class=\"headerlink\" title=\"pom.xml\"></a>pom.xml</h3><pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;\n&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot;\n         xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;\n         xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;\n    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;\n\n    &lt;groupId&gt;com.funtl&lt;/groupId&gt;\n    &lt;artifactId&gt;spring-demo&lt;/artifactId&gt;\n    &lt;version&gt;1.0.0-SNAPSHOT&lt;/version&gt;\n    &lt;packaging&gt;war&lt;/packaging&gt;\n\n    &lt;dependencies&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.springframework&lt;/groupId&gt;\n            &lt;artifactId&gt;spring-context&lt;/artifactId&gt;\n            &lt;version&gt;4.3.17.RELEASE&lt;/version&gt;\n        &lt;/dependency&gt;\n\n        &lt;dependency&gt;\n            &lt;groupId&gt;junit&lt;/groupId&gt;\n            &lt;artifactId&gt;junit&lt;/artifactId&gt;\n            &lt;version&gt;4.12&lt;/version&gt;\n        &lt;/dependency&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;javax.servlet&lt;/groupId&gt;\n            &lt;artifactId&gt;javax.servlet-api&lt;/artifactId&gt;\n            &lt;version&gt;4.0.1&lt;/version&gt;\n        &lt;/dependency&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.slf4j&lt;/groupId&gt;\n            &lt;artifactId&gt;log4j-over-slf4j&lt;/artifactId&gt;\n            &lt;version&gt;1.7.25&lt;/version&gt;\n        &lt;/dependency&gt;\n    &lt;/dependencies&gt;\n&lt;/project&gt;</code></pre><h3 id=\"spring-context-xml\"><a href=\"#spring-context-xml\" class=\"headerlink\" title=\"spring-context.xml\"></a>spring-context.xml</h3><pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;\n&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;\n       xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;\n       xsi:schemaLocation=&quot;\n       http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;&gt;\n\n&lt;/beans&gt;</code></pre><h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><p><a href=\"https://github.com/834930269/Spring_demo/tree/master/demo/login-demo\" target=\"_blank\" rel=\"noopener\">https://github.com/834930269/Spring_demo/tree/master/demo/login-demo</a></p>\n<hr>\n<h1 id=\"2-理解依赖注入和控制反转\"><a href=\"#2-理解依赖注入和控制反转\" class=\"headerlink\" title=\"2 - 理解依赖注入和控制反转\"></a>2 - 理解依赖注入和控制反转</h1><h2 id=\"项目结构\"><a href=\"#项目结构\" class=\"headerlink\" title=\"项目结构\"></a>项目结构</h2><p><img src=\"http://be-sunshine.cn/wp-content/uploads/2019/01/SPRING-DEMO.png\" alt> Tip: 如果文件名显示,而没有任何错误，大抵是开了版本控制,比如Git.在.idea的vcs.xml文件中将git删掉即可</p>\n<h2 id=\"依赖注入\"><a href=\"#依赖注入\" class=\"headerlink\" title=\"依赖注入\"></a>依赖注入</h2><h3 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h3><p>DI: Dependency injection From Spring实战(第四版) P5</p>\n<blockquote>\n<p>背景: 任何一个实际意义的应用,都会由两个或者更多的类组成.这些类相互协作形成应用.</p>\n<blockquote>\n<p>这样子导致的直接结果是耦合度过高.</p>\n</blockquote>\n<p>DI: 为了解决这一问题,Spring提供了依赖注入这一解决方案.</p>\n</blockquote>\n<h3 id=\"什么叫依赖注入\"><a href=\"#什么叫依赖注入\" class=\"headerlink\" title=\"什么叫依赖注入?\"></a>什么叫依赖注入?</h3><p>举个栗子: 我们想要实现骑士探险这一类,可以自由的为骑士选择探险任务. Knight.java</p>\n<pre><code>package DI;\n\npublic interface Knights {\n    public void embarkOnQuest();\n}</code></pre><p>探险任务</p>\n<pre><code>package DI;\n\npublic class RescueDamselQuest {\n    public void embark(){\n        System.out.println(&quot;已接收&quot;);\n    }\n}</code></pre><p>骑士接受任务</p>\n<pre><code>package DI;\n\npublic class DamselRescuingKnight implements Knights {\n    private RescueDamselQuest quest;\n\n    public DamselRescuingKnight() {\n        quest=new RescueDamselQuest();\n    }\n\n    @Override\n    public void embarkOnQuest() {\n        quest.embark();\n    }\n}</code></pre><p>我们会发现这样写代码使得探险和骑士的耦合度达到了密不可分的地步,写一个探险就要新建一个结合类. 改进措施,提出了依赖注入:</p>\n<blockquote>\n<p>构造器注入</p>\n<blockquote>\n<p>这个比较简单,即将探险类作为构造参数传递进来,但这样依然没有达到代码层面的解耦.</p>\n</blockquote>\n</blockquote>\n<pre><code>public class DamselRescuingKnight implements Knights {\n    private RescueDamselQuest quest;\n\n    public DamselRescuingKnight(Quest quest) {\n        this.quest=quest;\n    }\n\n    @Override\n    public void embarkOnQuest() {\n        quest.embark();\n    }\n}</code></pre><blockquote>\n<p>mock注入</p>\n<blockquote>\n<p>和Spring的依赖注入很像.</p>\n</blockquote>\n</blockquote>\n<h3 id=\"Spring的依赖注入\"><a href=\"#Spring的依赖注入\" class=\"headerlink\" title=\"Spring的依赖注入\"></a>Spring的依赖注入</h3><blockquote>\n<p>接上本小节一开始的那张项目结构图.</p>\n</blockquote>\n<p>Spring是这样做的.你将需要解耦的类交给Spring的容器去保管,需要使用时直接从Spring中取出来即可,而不需要有任何new出来的类.</p>\n<blockquote>\n<p>比如Service,Bean等,都可以交给Spring保管.</p>\n</blockquote>\n<p>举个栗子: UserService.java(接口)</p>\n<pre><code>package com.funtl.spring.service;\n\npublic interface UserService {\n    public void sayhi();\n}</code></pre><p>UserServiceImpl.java</p>\n<pre><code>package com.funtl.spring.service.impl;\n\nimport com.funtl.spring.service.UserService;\n\npublic class UserServiceImpl implements UserService {\n    public void sayhi() {\n        System.out.println(&quot;hello&quot;);\n    }\n}</code></pre><p>resources/spring-context.xml</p>\n<pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;\n&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;\n       xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;\n       xsi:schemaLocation=&quot;\n       http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;&gt;\n\n    &lt;bean id=&quot;userService&quot; class=&quot;com.funtl.spring.service.impl.UserServiceImpl&quot; /&gt;\n&lt;/beans&gt;</code></pre><p>OK,前序工作做完了,我们在运行时就已经将这个类托管给了Spring容器. 那么我们该如何取出来呢? MyTest.java</p>\n<pre><code>package com.funtl.spring;\n\nimport com.funtl.spring.service.UserService;\nimport com.funtl.spring.service.impl.UserServiceImpl;\nimport org.springframework.context.ApplicationContext;\nimport org.springframework.context.support.ClassPathXmlApplicationContext;\n\npublic class MyTest {\n    public static void main(String[] args){\n        //获取Spring容器\n        ApplicationContext applicationContext=new ClassPathXmlApplicationContext(&quot;spring-context.xml&quot;);\n\n        //从Spring容器中获取对象\n        UserService userService= (UserService) applicationContext.getBean(&quot;userService&quot;);\n        userService.sayhi();\n\n    }\n}</code></pre><p>我们可以看到,上面的代码并没有new一个Service,而是从Spring上下文中取出了userService这个对象. 仔细想想,这样是不是就类似于调用静态的工具类那样轻松了呢?</p>\n<blockquote>\n<p>依赖注入的魅力就在于此.</p>\n<blockquote>\n<p>而将类的加载交给容器时,这个容器的模式就叫做 IoC(控制反转)</p>\n</blockquote>\n</blockquote>\n<h1 id=\"最终架构\"><a href=\"#最终架构\" class=\"headerlink\" title=\"最终架构\"></a>最终架构</h1><p><img src=\"http://be-sunshine.cn/wp-content/uploads/2019/01/%E6%8D%95%E8%8E%B73.png\" alt></p>\n","text":"1 - 实现简单三层架构单体应用(登入)项目架构 [Figure] ","link":"","raw":null,"photos":[],"categories":[{"name":"Spring","slug":"Spring","count":4,"path":"api/categories/Spring.json"},{"name":"随笔","slug":"Spring/随笔","count":1,"path":"api/categories/Spring/随笔.json"}],"tags":[{"name":"Spring","slug":"Spring","count":6,"path":"api/tags/Spring.json"}]}]}