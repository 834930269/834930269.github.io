{"name":"ASP.Net","slug":"ASP-Net","count":3,"postlist":[{"title":"ASP.NET MVC Filter 登录限制-类Python装饰器","slug":"asp-net-mvc-filter-python","date":"2017-12-10T10:12:21.000Z","updated":"2019-07-03T13:51:36.859Z","comments":true,"path":"api/articles/asp-net-mvc-filter-python.json","excerpt":"","keywords":null,"cover":null,"content":"<p>想必学过Flask编写Web服务端的都对 <strong>@login_required</strong> 很熟悉吧,一个语句决定了访问者是否有权限访问当前页面. 那么疑问来了,ASP.NET MVC中是否有类似于Python装饰器一类的语法呢? 答案是有的,如果仅仅是权限以及登录确认的判断的话,ASP.NET MVC 有一个 <strong>AuthorizeAttribute</strong> 类,这个类的结构以及用法可以替代 <strong>@login_required</strong>,接下来编写实现代码. 首先新建一个ASP.NET MVC 项目,新建一个Filter文件夹,该文件夹下存放网站允许访问一类的类. 新建<strong>MyAuthorizeAttribute</strong>类,继承<strong>AuthorizeAttribute</strong> 类,重写AuthorizeCore和HandleUnauthorizedRequest方法. 第一个方法是授权检察,第二个方法是权限判断失败时执行的操作. 接下来实现当时间分钟是偶数时允许登录.</p>\n<pre><code>//MyAuthorizeAttribute.cs\n\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Web;\nusing System.Web.Mvc;\n\nnamespace WebApplication3.Filter\n{\n    public class MyAuthorizeAttribute :AuthorizeAttribute\n    {\n        protected override bool AuthorizeCore(HttpContextBase httpContext)\n        {\n            return DateTime.Now.Minute % 2 == 0;  \n        }\n        protected override void HandleUnauthorizedRequest(AuthorizationContext filterContext)\n        {\n            filterContext.HttpContext.Response.Redirect(&quot;/Home/ShowTip&quot;);\n\n            //base.HandleUnauthorizedRequest(filterContext);  \n        }  \n    }\n}\n\n\n//HomeController.cs\n\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Web;\nusing System.Web.Mvc;\nusing WebApplication3.Filter;\n\nnamespace WebApplication3.Controllers\n{\n    public class HomeController : Controller\n    {\n        public ActionResult Index()\n        {\n            return View();\n        }\n\n        [MyAuthorizeAttribute]\n        public ActionResult ShowDetails2()\n        {\n            return View();\n        }\n        public ActionResult ShowTip()\n        {\n            return View();\n        }  \n    }\n}</code></pre>","text":"想必学过Flask编写Web服务端的都对 @login_required 很熟悉吧,一个语句决定了访问者是否有权限访问当前页面. 那么疑问来了,ASP.NET MVC中是否有类似于Python装饰器一类的语法呢? 答案是有的,如果仅仅是权限以及登录确认的判断的话,ASP.NET ","link":"","raw":null,"photos":[],"categories":[{"name":"ASP.Net","slug":"ASP-Net","count":3,"path":"api/categories/ASP-Net.json"},{"name":"C#","slug":"ASP-Net/C","count":2,"path":"api/categories/ASP-Net/C.json"},{"name":"MVC","slug":"ASP-Net/C/MVC","count":1,"path":"api/categories/ASP-Net/C/MVC.json"},{"name":"Web","slug":"ASP-Net/C/MVC/Web","count":1,"path":"api/categories/ASP-Net/C/MVC/Web.json"}],"tags":[{"name":"ASP.NET","slug":"ASP-NET","count":6,"path":"api/tags/ASP-NET.json"},{"name":"C#","slug":"C","count":6,"path":"api/tags/C.json"},{"name":"MVC","slug":"MVC","count":1,"path":"api/tags/MVC.json"},{"name":"Web","slug":"Web","count":7,"path":"api/tags/Web.json"}]},{"title":"ASP.Net 记录贴","slug":"asp-net-recode","date":"2017-09-01T10:01:47.000Z","updated":"2019-07-03T13:51:36.858Z","comments":true,"path":"api/articles/asp-net-recode.json","excerpt":"","keywords":null,"cover":null,"content":"<p>委派: 委托是方法的抽象，它存储的就是一系列具有相同签名和返回回类型的方法的地址。调用委托的时候，委托包含的所有方法将被执行。 1.委托类型的定义 委托是类型，就好像类是类型一样。与类一样，委托类型必须在被用来创建变量以及类型对象之前声明。</p>\n<pre><code>delegate void MyDel(int x);</code></pre><p>委托类型声明： （1） 以deleagate关键字开头。 （2）返回类型+委托类型名+参数列表。 2.声明委托变量</p>\n<pre><code>MyDel del1,del2;</code></pre><p>3.初始化委托变量</p>\n<pre><code>del1 = new MyDel( myInstObj.MyM1 );\ndel2 = new MyDel( SClass.OtherM2 );</code></pre><p>4.组合委托 委托可以使用额外的运算符来组合。这个运算最终会创建一个新的委托，其调用列表是两个操作数的委托调用列表的副本的连接。 委托是恒定的，操作数委托创建后不会被改变。委托组合拷贝的是操作数的副本。</p>\n<pre><code>MyDel del1 = myObj.MyMethod;\nMyDel del2 = SClass.OtherM2;\nMyDel del3 = del1 + del2;   //组合调用列表</code></pre><p>5.委托加减运算 可以使用+=运算符，为委托新增方法。 同样可以使用-=运算符，为委托移除方法。</p>\n<pre><code>MyDel del = myObj.MyMethod;\ndel += SClass.OtherM2; // 增加方法\ndel -= myObj.MyMethod; // 移除方法</code></pre><p>6.委托调用 委托调用跟方法调用类似。委托调用后，调用列表的每个方法将会被执行。 在调用委托前，应判断委托是否为空。调用空委托会抛出异常。</p>\n<pre><code>if(null != del)\n{\n     del();//委托调用\n}</code></pre><p>7.匿名方法 匿名方法是在初始化委托时内联声明的方法。 基本结构：</p>\n<pre><code>deleage( 参数 ) { 语句块 }</code></pre><p>例如：</p>\n<pre><code>delegate int MyDel (int x); //定义一个委托 \n\nMyDel del = delegate( int x){ return x; };</code></pre><p>8.Lambda表达式 Lambda运算符读作”goes to”。</p>\n<pre><code>MyDel del = delegate( int x) { return x; };//匿名方法\nMyDel del2 = (int x) =&gt; {return x;};//Lambda表达式\nMyDel del3 = x =&gt; {return x};//简写的Lambda表达式</code></pre>","text":"委派: 委托是方法的抽象，它存储的就是一系列具有相同签名和返回回类型的方法的地址。调用委托的时候，委托包含的所有方法将被执行。 1.委托类型的定义 委托是类型，就好像类是类型一样。与类一样，委托类型必须在被用来创建变量以及类型对象之前声明。delegate void MyDel(","link":"","raw":null,"photos":[],"categories":[{"name":"ASP.Net","slug":"ASP-Net","count":3,"path":"api/categories/ASP-Net.json"},{"name":"C#","slug":"ASP-Net/C","count":2,"path":"api/categories/ASP-Net/C.json"}],"tags":[{"name":"ASP.NET","slug":"ASP-NET","count":6,"path":"api/tags/ASP-NET.json"},{"name":"C#","slug":"C","count":6,"path":"api/tags/C.json"}]},{"title":"大二ASP课程设计-个人博客","slug":"twick-asp-reg","date":"2017-06-29T06:10:36.000Z","updated":"2019-07-03T13:51:36.848Z","comments":true,"path":"api/articles/twick-asp-reg.json","excerpt":"","keywords":null,"cover":"http://be-sunshine.cn/wp-content/uploads/2017/06/1-e1498717102691.png","content":"<p>怨念深重,第一次一个小组撸的近2000行代码,一个半星期.. 【源代码及数据库】 用的是SQL SERVER 2012 和VS2013 ASP.net 开发的. github仓库:<a href=\"https://github.com/834930269/OurWorld\" target=\"_blank\" rel=\"noopener\">OurWorld On Github</a> 【效果演示】  【效果截图】 <img src=\"http://be-sunshine.cn/wp-content/uploads/2017/06/1-e1498717102691.png\" alt> <img src=\"http://be-sunshine.cn/wp-content/uploads/2017/06/9-e1498717129393.jpg\" alt> <img src=\"http://be-sunshine.cn/wp-content/uploads/2017/06/8-e1498717157154.jpg\" alt> <img src=\"http://be-sunshine.cn/wp-content/uploads/2017/06/7.jpg\" alt> <img src=\"http://be-sunshine.cn/wp-content/uploads/2017/06/6-1.jpg\" alt> <img src=\"http://be-sunshine.cn/wp-content/uploads/2017/06/5.jpg\" alt> <img src=\"http://be-sunshine.cn/wp-content/uploads/2017/06/4-1.jpg\" alt> <img src=\"http://be-sunshine.cn/wp-content/uploads/2017/06/3.jpg\" alt> <img src=\"http://be-sunshine.cn/wp-content/uploads/2017/06/2-1.jpg\" alt></p>\n","text":"怨念深重,第一次一个小组撸的近2000行代码,一个半星期.. 【源代码及数据库】 用的是SQL SERVER 2012 和VS2013 ASP.net 开发的. github仓库:OurWorld On Github 【效果演示】  【效果截图】  [Figure] ","link":"","raw":null,"photos":[],"categories":[{"name":"ASP.Net","slug":"ASP-Net","count":3,"path":"api/categories/ASP-Net.json"}],"tags":[{"name":"ASP.NET","slug":"ASP-NET","count":6,"path":"api/tags/ASP-NET.json"}]}]}