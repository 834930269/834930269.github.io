{"name":"技术","slug":"redis/技术","count":1,"postlist":[{"title":"redis启动","slug":"redis-undo","date":"2018-03-26T06:40:22.000Z","updated":"2019-07-03T13:51:36.863Z","comments":true,"path":"api/articles/redis-undo.json","excerpt":"","keywords":null,"cover":null,"content":"<blockquote>\n<p>cmd-</p>\n<blockquote>\n<p>redis-server.exe (redis.windows.conf) 第二个参数可以写也可以不写</p>\n</blockquote>\n<p>开启</p>\n<blockquote>\n<p>redis-cli.exe -h 127.0.0.1 -p 6379</p>\n</blockquote>\n</blockquote>\n<h1><span id=\"java-springboot使用redis\">Java-SpringBoot使用Redis</span></h1><h2><span id=\"redisconfig\">RedisConfig</span></h2><p>其中Bean代表由Spring管理,当Resouorce的name和Bean的name一样时,就会自动通过Bean创建实例. @Value的字段是在application.properties中,有’.’的话要加${} 这里调用的只是Redis的一个构造函数,传入ip和端口号.</p>\n<pre><code>package com.mall.concurrency.cache;\n\nimport org.springframework.beans.factory.annotation.Value;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\n\nimport redis.clients.jedis.JedisPool;\n\n@Configuration\npublic class RedisConfig {\n\n    @Bean(name=&quot;redisPool&quot;)\n    public JedisPool jedispool(@Value(&quot;${jedis.host}&quot;) String host,@Value(&quot;${jedis.port}&quot;) int port){\n        return new JedisPool(host,port);\n    }\n}</code></pre><h2><span id=\"redisclient\">RedisClient</span></h2><p>类似于Orm的操作方式.用完即扔.</p>\n<pre><code>package com.mall.concurrency.cache;\n\nimport javax.annotation.Resource;\n\nimport org.springframework.stereotype.Component;\n\nimport redis.clients.jedis.Jedis;\nimport redis.clients.jedis.JedisPool;\n\n//http://redis.cn/\n@Component\npublic class RedisClient {\n    @Resource(name=&quot;redisPool&quot;)\n    private JedisPool jedisPool;\n\n    public void set(String key,String value)throws Exception{\n        Jedis jedis=null;\n        try{\n            jedis = jedisPool.getResource();\n            jedis.set(key, value);\n        }finally {\n            if(jedis!=null){\n                jedis.close();\n            }\n        }\n    }\n\n    public String get(String key)throws Exception{\n        Jedis jedis=null;\n        try{\n            jedis = jedisPool.getResource();\n            return jedis.get(key);\n        }finally {\n            if(jedis!=null){\n                jedis.close();\n            }\n        }\n    }\n}</code></pre><h2><span id=\"cachecontroller\">CacheController</span></h2><p>其中@Autowired和@Resource的区别是: - @Resource默认按照名称方式进行bean匹配，@Autowired默认按照类型方式进行bean匹配 - @Resource(import javax.annotation.Resource;)是J2EE的注解，@Autowired( import org.springframework.beans.factory.annotation.Autowired;)是Spring的注解</p>\n<pre><code>package com.mall.concurrency.cache;\n\nimport javax.annotation.Resource;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Controller;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RequestParam;\nimport org.springframework.web.bind.annotation.ResponseBody;\n\n@Controller\n@RequestMapping(&quot;/cache&quot;)\npublic class CacheController {\n    @Autowired\n    private RedisClient redisClient;\n\n    @RequestMapping(&quot;/set&quot;)\n    @ResponseBody\n    public String set(@RequestParam(&quot;k&quot;) String k,@RequestParam(&quot;v&quot;) String v)throws Exception{\n        redisClient.set(k, v);\n        return &quot;SUCCESS&quot;;\n    }\n\n    @RequestMapping(&quot;/get&quot;)\n    @ResponseBody\n    public String get(@RequestParam(&quot;k&quot;) String k)throws Exception{\n        return redisClient.get(k);\n    }\n\n}</code></pre><h2><span id=\"applicationproperties的书写格式\">application.properties的书写格式</span></h2><pre><code># redis\njedis.host=127.0.0.1\njedis.port=6379</code></pre>","text":"cmd-redis-server.exe (redis.windows.conf) 第二个参数可以写也可以不写开启redis-cli.exe -h 127.0.0.1 -p 6379Java-SpringBoot使用RedisRedisConfig其中Bean代表由Spring管","link":"","raw":null,"photos":[],"categories":[{"name":"redis","slug":"redis","count":1,"path":"api/categories/redis.json"},{"name":"技术","slug":"redis/技术","count":1,"path":"api/categories/redis/技术.json"}],"tags":[{"name":"技术","slug":"技术","count":14,"path":"api/tags/技术.json"},{"name":"redis","slug":"redis","count":1,"path":"api/tags/redis.json"}]}]}