{"name":"游戏制作","slug":"pygame/Python/游戏制作","count":3,"postlist":[{"title":"Pygame constants.py","slug":"pygame-constants-py","date":"2018-01-09T08:46:01.000Z","updated":"2019-07-03T13:51:36.860Z","comments":true,"path":"api/articles/pygame-constants-py.json","excerpt":"","keywords":null,"cover":null,"content":"<h1 id=\"一些按键相关-以及一些屏幕处理的常量\"><a href=\"#一些按键相关-以及一些屏幕处理的常量\" class=\"headerlink\" title=\"一些按键相关,以及一些屏幕处理的常量\"></a>一些按键相关,以及一些屏幕处理的常量</h1><pre><code># encoding: utf-8\n# module pygame.constants\n# from D:\\Software\\AnAconda\\lib\\site-packages\\pygame\\constants.cp36-win_amd64.pyd\n# by generator 1.145\n&quot;&quot;&quot; Constants defined by SDL and needed in Pygame. &quot;&quot;&quot;\n# no imports\n\n# Variables with simple values\n\nACTIVEEVENT = 1\n\nANYFORMAT = 268435456\n\nASYNCBLIT = 4\n\nAUDIO_S16 = 32784\nAUDIO_S16LSB = 32784\nAUDIO_S16MSB = 36880\nAUDIO_S16SYS = 32784\nAUDIO_S8 = 32776\nAUDIO_U16 = 16\nAUDIO_U16LSB = 16\nAUDIO_U16MSB = 4112\nAUDIO_U16SYS = 16\nAUDIO_U8 = 8\n\nBIG_ENDIAN = 4321\n\nBLEND_ADD = 1\nBLEND_MAX = 5\nBLEND_MIN = 4\nBLEND_MULT = 3\nBLEND_PREMULTIPLIED = 17\n\nBLEND_RGBA_ADD = 6\nBLEND_RGBA_MAX = 16\nBLEND_RGBA_MIN = 9\nBLEND_RGBA_MULT = 8\nBLEND_RGBA_SUB = 7\n\nBLEND_RGB_ADD = 1\nBLEND_RGB_MAX = 5\nBLEND_RGB_MIN = 4\nBLEND_RGB_MULT = 3\nBLEND_RGB_SUB = 2\n\nBLEND_SUB = 2\n\nBUTTON_X1 = 6\nBUTTON_X2 = 7\n\nDOUBLEBUF = 1073741824\n\nFULLSCREEN = -2147483648\n\nGL_ACCELERATED_VISUAL = 15\n\nGL_ACCUM_ALPHA_SIZE = 11\n\nGL_ACCUM_BLUE_SIZE = 10\n\nGL_ACCUM_GREEN_SIZE = 9\n\nGL_ACCUM_RED_SIZE = 8\n\nGL_ALPHA_SIZE = 3\n\nGL_BLUE_SIZE = 2\n\nGL_BUFFER_SIZE = 4\n\nGL_DEPTH_SIZE = 6\n\nGL_DOUBLEBUFFER = 5\n\nGL_GREEN_SIZE = 1\n\nGL_MULTISAMPLEBUFFERS = 13\nGL_MULTISAMPLESAMPLES = 14\n\nGL_RED_SIZE = 0\n\nGL_STENCIL_SIZE = 7\n\nGL_STEREO = 12\n\nGL_SWAP_CONTROL = 16\n\nHAT_CENTERED = 0\nHAT_DOWN = 4\nHAT_LEFT = 8\nHAT_LEFTDOWN = 12\nHAT_LEFTUP = 9\nHAT_RIGHT = 2\nHAT_RIGHTDOWN = 6\nHAT_RIGHTUP = 3\nHAT_UP = 1\n\nHWACCEL = 256\nHWPALETTE = 536870912\nHWSURFACE = 1\n\nIYUV_OVERLAY = 1448433993\n\nJOYAXISMOTION = 7\nJOYBALLMOTION = 8\nJOYBUTTONDOWN = 10\nJOYBUTTONUP = 11\nJOYHATMOTION = 9\n\nKEYDOWN = 2\nKEYUP = 3\n\nKMOD_ALT = 768\nKMOD_CAPS = 8192\nKMOD_CTRL = 192\nKMOD_LALT = 256\nKMOD_LCTRL = 64\nKMOD_LMETA = 1024\nKMOD_LSHIFT = 1\nKMOD_META = 3072\nKMOD_MODE = 16384\nKMOD_NONE = 0\nKMOD_NUM = 4096\nKMOD_RALT = 512\nKMOD_RCTRL = 128\nKMOD_RMETA = 2048\nKMOD_RSHIFT = 2\nKMOD_SHIFT = 3\n\nK_0 = 48\nK_1 = 49\nK_2 = 50\nK_3 = 51\nK_4 = 52\nK_5 = 53\nK_6 = 54\nK_7 = 55\nK_8 = 56\nK_9 = 57\nK_a = 97\nK_AMPERSAND = 38\nK_ASTERISK = 42\nK_AT = 64\nK_b = 98\nK_BACKQUOTE = 96\nK_BACKSLASH = 92\nK_BACKSPACE = 8\nK_BREAK = 318\nK_c = 99\nK_CAPSLOCK = 301\nK_CARET = 94\nK_CLEAR = 12\nK_COLON = 58\nK_COMMA = 44\nK_d = 100\nK_DELETE = 127\nK_DOLLAR = 36\nK_DOWN = 274\nK_e = 101\nK_END = 279\nK_EQUALS = 61\nK_ESCAPE = 27\nK_EURO = 321\nK_EXCLAIM = 33\nK_f = 102\nK_F1 = 282\nK_F10 = 291\nK_F11 = 292\nK_F12 = 293\nK_F13 = 294\nK_F14 = 295\nK_F15 = 296\nK_F2 = 283\nK_F3 = 284\nK_F4 = 285\nK_F5 = 286\nK_F6 = 287\nK_F7 = 288\nK_F8 = 289\nK_F9 = 290\nK_FIRST = 0\nK_g = 103\nK_GREATER = 62\nK_h = 104\nK_HASH = 35\nK_HELP = 315\nK_HOME = 278\nK_i = 105\nK_INSERT = 277\nK_j = 106\nK_k = 107\nK_KP0 = 256\nK_KP1 = 257\nK_KP2 = 258\nK_KP3 = 259\nK_KP4 = 260\nK_KP5 = 261\nK_KP6 = 262\nK_KP7 = 263\nK_KP8 = 264\nK_KP9 = 265\n\nK_KP_DIVIDE = 267\nK_KP_ENTER = 271\nK_KP_EQUALS = 272\nK_KP_MINUS = 269\nK_KP_MULTIPLY = 268\nK_KP_PERIOD = 266\nK_KP_PLUS = 270\n\nK_l = 108\nK_LALT = 308\nK_LAST = 323\nK_LCTRL = 306\nK_LEFT = 276\nK_LEFTBRACKET = 91\nK_LEFTPAREN = 40\nK_LESS = 60\nK_LMETA = 310\nK_LSHIFT = 304\nK_LSUPER = 311\nK_m = 109\nK_MENU = 319\nK_MINUS = 45\nK_MODE = 313\nK_n = 110\nK_NUMLOCK = 300\nK_o = 111\nK_p = 112\nK_PAGEDOWN = 281\nK_PAGEUP = 280\nK_PAUSE = 19\nK_PERIOD = 46\nK_PLUS = 43\nK_POWER = 320\nK_PRINT = 316\nK_q = 113\nK_QUESTION = 63\nK_QUOTE = 39\nK_QUOTEDBL = 34\nK_r = 114\nK_RALT = 307\nK_RCTRL = 305\nK_RETURN = 13\nK_RIGHT = 275\nK_RIGHTBRACKET = 93\nK_RIGHTPAREN = 41\nK_RMETA = 309\nK_RSHIFT = 303\nK_RSUPER = 312\nK_s = 115\nK_SCROLLOCK = 302\nK_SEMICOLON = 59\nK_SLASH = 47\nK_SPACE = 32\nK_SYSREQ = 317\nK_t = 116\nK_TAB = 9\nK_u = 117\nK_UNDERSCORE = 95\nK_UNKNOWN = 0\nK_UP = 273\nK_v = 118\nK_w = 119\nK_x = 120\nK_y = 121\nK_z = 122\n\nLIL_ENDIAN = 1234\n\nMOUSEBUTTONDOWN = 5\nMOUSEBUTTONUP = 6\nMOUSEMOTION = 4\n\nNOEVENT = 0\nNOFRAME = 32\n\nNUMEVENTS = 32\n\nOPENGL = 2\nOPENGLBLIT = 10\n\nPREALLOC = 16777216\n\nQUIT = 12\n\nRESIZABLE = 16\n\nRLEACCEL = 16384\nRLEACCELOK = 8192\n\nSCRAP_BMP = &apos;image/bmp&apos;\nSCRAP_CLIPBOARD = 0\nSCRAP_PBM = &apos;image/pbm&apos;\nSCRAP_PPM = &apos;image/ppm&apos;\nSCRAP_SELECTION = 1\nSCRAP_TEXT = &apos;text/plain&apos;\n\nSRCALPHA = 65536\nSRCCOLORKEY = 4096\n\nSWSURFACE = 0\n\nSYSWMEVENT = 13\n\nTIMER_RESOLUTION = 10\n\nUSEREVENT = 24\n\nUSEREVENT_DROPFILE = 4096\n\nUYVY_OVERLAY = 1498831189\n\nVIDEOEXPOSE = 17\nVIDEORESIZE = 16\n\nYUY2_OVERLAY = 844715353\n\nYV12_OVERLAY = 842094169\n\nYVYU_OVERLAY = 1431918169\n\n# no functions\n# no classes\n# variables with complex values\n\n__loader__ = None # (!) real value is &apos;&apos;\n\n__spec__ = None # (!) real value is &apos;&apos;</code></pre>","text":"一些按键相关,以及一些屏幕处理的常量# encoding: utf-8# module pygame.constants# from D:\\Software\\AnAconda\\lib\\site-packages\\pygame\\constants.cp36-win_amd64.py","link":"","raw":null,"photos":[],"categories":[{"name":"pygame","slug":"pygame","count":3,"path":"api/categories/pygame.json"},{"name":"Python","slug":"pygame/Python","count":3,"path":"api/categories/pygame/Python.json"},{"name":"游戏制作","slug":"pygame/Python/游戏制作","count":3,"path":"api/categories/pygame/Python/游戏制作.json"}],"tags":[{"name":"Python","slug":"Python","count":65,"path":"api/tags/Python.json"},{"name":"游戏制作","slug":"游戏制作","count":4,"path":"api/tags/游戏制作.json"},{"name":"pygame","slug":"pygame","count":3,"path":"api/tags/pygame.json"}]},{"title":"pygame sprite","slug":"pygame-sprite","date":"2017-12-30T09:20:40.000Z","updated":"2019-07-03T13:51:36.859Z","comments":true,"path":"api/articles/pygame-sprite.json","excerpt":"","keywords":null,"cover":"http://be-sunshine.cn/wp-content/uploads/2017/12/mdm.png","content":"<p>自定义Sprite类: 让嗷大喵动起来! <a href=\"http://be-sunshine.cn/wp-content/uploads/2017/12/mdm.png\" target=\"_blank\" rel=\"noopener\"><img src=\"http://be-sunshine.cn/wp-content/uploads/2017/12/mdm.png\" alt></a> 以上图片叫做帧图,背景为空,和二维数组一样的用法. 这个帧图的行为4,列为1. 对网上别人自定义的MySprite类做了修改,使其变成列行同时循环. 学习项目地址: <a href=\"https://github.com/834930269/Pygame-Learn/tree/master/second\" title=\"pygame-learn-sprite\" target=\"_blank\" rel=\"noopener\">pygame-learn-sprite</a> <code>class MySprite</code></p>\n<pre><code>class MySprite(pygame.sprite.Sprite):\n    def __init__(self,target):\n        pygame.sprite.Sprite.__init__(self)\n        self.target_surface = target\n        self.image = None\n        self.master_image = None\n        self.rect = None\n        self.topleft = 0,0\n        self.frame = 0\n        self.old_frame = -1\n        self.frame_width = 1\n        self.frame_height = 1\n        self.first_frame = 0\n        self.last_frame = 0\n        self.columns = 1\n        self.last_time = 0\n        self.row = 1\n\n    # filename 帧图宽度,帧图高度,帧图行,帧图列\n    def load(self,filename,width,height,columns,row):\n        self.master_image = pygame.image.load(filename).convert_alpha()\n        self.frame_width = width\n        self.frame_height = height\n        self.rect = 0,0,width,height\n        self.columns = columns\n        self.row = row\n        rect = self.master_image.get_rect()\n        self.last_frame = (rect.width // width)*(rect.height // height) - 1\n\n    def update(self,current_time,rate=60):\n        if current_time &gt; self.last_time +rate:\n            self.frame += 1\n            if self.frame &gt; self.last_frame:\n                self.frame = self.first_frame\n            self.last_frame = current_time\n\n        if self.frame != self.old_frame:\n            frame_x = (self.frame % self.columns) * self.frame_width\n            #添加了row以后每次计算对row取余即可计算出当前列数\n            frame_y = (self.frame // self.columns) % self.row * self.frame_height\n            #如果把frame_y置为0,则表示始终都是在位图的第一行\n            # 多行的话,可以通过frame_y来解决,但是要注意,y=0则返回\n            rect = (frame_x, frame_y, self.frame_width, self.frame_height)\n            self.image = self.master_image.subsurface(rect)\n            self.old_frame = self.frame</code></pre><p>让嗷大喵动起来吧!!</p>\n<pre><code>import pygame\nfrom pygame import *\n\nclass MySprite(pygame.sprite.Sprite):\n    def __init__(self,target):\n        pygame.sprite.Sprite.__init__(self)\n        self.target_surface = target\n        self.image = None\n        self.master_image = None\n        self.rect = None\n        self.topleft = 0,0\n        self.frame = 0\n        self.old_frame = -1\n        self.frame_width = 1\n        self.frame_height = 1\n        self.first_frame = 0\n        self.last_frame = 0\n        self.columns = 1\n        self.last_time = 0\n        self.row = 1\n\n    # filename 帧图宽度,帧图高度,帧图行,帧图列\n    def load(self,filename,width,height,columns,row):\n        self.master_image = pygame.image.load(filename).convert_alpha()\n        self.frame_width = width\n        self.frame_height = height\n        self.rect = 0,0,width,height\n        self.columns = columns\n        self.row = row\n        rect = self.master_image.get_rect()\n        self.last_frame = (rect.width // width)*(rect.height // height) - 1\n\n    def update(self,current_time,rate=60):\n        if current_time &gt; self.last_time +rate:\n            self.frame += 1\n            if self.frame &gt; self.last_frame:\n                self.frame = self.first_frame\n            self.last_frame = current_time\n\n        if self.frame != self.old_frame:\n            frame_x = (self.frame % self.columns) * self.frame_width\n            #添加了row以后每次计算对row取余即可计算出当前列数\n            frame_y = (self.frame // self.columns) % self.row * self.frame_height\n            #如果把frame_y置为0,则表示始终都是在位图的第一行\n            # 多行的话,可以通过frame_y来解决,但是要注意,y=0则返回\n            rect = (frame_x, frame_y, self.frame_width, self.frame_height)\n            self.image = self.master_image.subsurface(rect)\n            self.old_frame = self.frame\n\npygame.init()\nscreen = pygame.display.set_mode((800,600),0,32)\npygame.display.set_caption(&quot;精灵测试&quot;)\nfont = pygame.font.Font(None,18)\nframerate = pygame.time.Clock()\n\ncat = MySprite(screen)\ncat.load(&quot;mdm.png&quot;,100,100,4,1)\ngroup = pygame.sprite.Group()\ngroup.add(cat)\n\nwhile True:\n    framerate.tick(100)\n    ticks = pygame.time.get_ticks()\n\n    for event in pygame.event.get():\n        if event.type == pygame.QUIT:\n            pygame.quit()\n            exit()\n    key = pygame.key.get_pressed()\n    if key[pygame.K_ESCAPE]:\n        exit()\n\n    screen.fill((0,0,100))\n\n    group.update(ticks)\n    group.draw(screen)\n    pygame.display.update()</code></pre>","text":"自定义Sprite类: 让嗷大喵动起来!  [Figure]  以上图片叫做帧图,背景为空,和二维数组一样的用法. 这个帧图的行为4,列为1. 对网上别人自定义的MySprite类做了修改,使其变成列行同时循环. 学习项目地址: pygame-learn-sprite class","link":"","raw":null,"photos":[],"categories":[{"name":"pygame","slug":"pygame","count":3,"path":"api/categories/pygame.json"},{"name":"Python","slug":"pygame/Python","count":3,"path":"api/categories/pygame/Python.json"},{"name":"游戏制作","slug":"pygame/Python/游戏制作","count":3,"path":"api/categories/pygame/Python/游戏制作.json"}],"tags":[{"name":"Python","slug":"Python","count":65,"path":"api/tags/Python.json"},{"name":"游戏制作","slug":"游戏制作","count":4,"path":"api/tags/游戏制作.json"},{"name":"pygame","slug":"pygame","count":3,"path":"api/tags/pygame.json"}]},{"title":"pygame 碰撞检测","slug":"pygame-collision-detection","date":"2017-12-30T14:59:50.000Z","updated":"2019-07-03T13:51:36.859Z","comments":true,"path":"api/articles/pygame-collision-detection.json","excerpt":"","keywords":null,"cover":null,"content":"<p>碰撞检测 即两个Sprite是否碰撞-重叠之类的(你懂得) :horse_racing: github: <a href=\"https://github.com/834930269/Pygame-Learn/tree/master/EatApple\" title=\"https://github.com/834930269/Pygame-Learn/tree/master/EatApple\" target=\"_blank\" rel=\"noopener\">https://github.com/834930269/Pygame-Learn/tree/master/EatApple</a> 吃苹果游戏:</p>\n<pre><code># MyLibrary.py\nfrom pygame import *\nimport sys, time, random, math, pygame\n\ndef print_text(font,x,y,text,color=(255,255,255)):\n    imgText = font.render(text,True,color)\n    #req&apos;d when function moved into MyLibrary\n    screen = pygame.display.get_surface()\n    #移动\n    screen.blit(imgText,(x,y))\n\nclass MySprite(pygame.sprite.Sprite):\n    def __init__(self):\n        pygame.sprite.Sprite.__init__(self)\n        self.master_image = None\n        self.frame = 0\n        self.old_frame = -1\n        self.frame_width = 1\n        self.frame_height = 1\n        self.first_frame = 0\n        self.last_frame = 0\n        self.columns = 1\n        self.last_time = 0\n        self.row = 1\n        self.direction = 0\n        self.velocity = Point(0.0,0.0)\n\n    #x property\n    def _getx(self): return self.rect.x\n    def _setx(self,value): self.rect.x = value\n    X = property(_getx,_setx)\n\n    #y property\n    def _gety(self): return self.rect.y\n    def _sety(self,value): self.rect.y = value\n    Y = property(_gety,_sety)\n\n    # position property\n    def _getpos(self): return self.rect.topleft\n    def _setpos(self,pos):self.rect.topleft = pos\n    position = property(_getpos,_setpos)\n\n    # filename 帧图宽度,帧图高度,帧图行,帧图列\n    def load(self,filename,width,height,columns,row):\n        self.master_image = pygame.image.load(filename).convert_alpha()\n        self.frame_width = width\n        self.frame_height = height\n        self.rect = Rect(0,0,width,height)\n        self.columns = columns\n        self.row = row\n        rect = self.master_image.get_rect()\n        self.last_frame = (rect.width // width)*(rect.height // height) - 1\n\n    def update(self,current_time,rate=30):\n        if current_time &gt; self.last_time +rate:\n            self.frame += 1\n            if self.frame &gt; self.last_frame:\n                self.frame = self.first_frame\n            self.last_frame = current_time\n\n        if self.frame != self.old_frame:\n            frame_x = (self.frame % self.columns) * self.frame_width\n            #添加了row以后每次计算对row取余即可计算出当前列数\n            frame_y = (self.frame // self.columns) % self.row * self.frame_height\n            #如果把frame_y置为0,则表示始终都是在位图的第一行\n            # 多行的话,可以通过frame_y来解决,但是要注意,y=0则返回\n            rect = Rect(frame_x, frame_y, self.frame_width, self.frame_height)\n            self.image = self.master_image.subsurface(rect)\n            self.old_frame = self.frame\n\n    def __str__(self):\n        return str(self.frame) + &quot;,&quot; + str(self.first_frame) + \\\n            &quot;,&quot; + str(self.last_frame) + &quot;,&quot; + str(self.frame_width) + \\\n            &quot;,&quot; + str(self.frame_height) + &quot;,&quot; + str(self.columns) + \\\n            &quot;,&quot; + str(self.rect)\n\n#Point class\nclass Point(object):\n    def __init__(self,x,y):\n        self.__x = x\n        self.__y = y\n    #X property\n    def getx(self): return self.__x\n    def setx(self, x): self.__x = x\n    x = property(getx, setx)\n\n    #Y property\n    def gety(self): return self.__y\n    def sety(self, y): self.__y = y\n    y = property(gety, sety)\n\n    def __str__(self):\n        return &quot;{X:&quot; + &quot;{:.0f}&quot;.format(self.__x) + \\\n            &quot;,Y:&quot; + &quot;{:.0f}&quot;.format(self.__y) + &quot;}&quot;\n\n\n#app.py\nimport itertools, sys, time, random, math, pygame\nfrom pygame import *\nfrom MyLibrary import *\n\ndef calc_velocity(direction,vel=1.0):\n    velocity = Point(0,0)\n    if direction == 0 :#上\n        velocity.y = -vel\n    elif direction == 2:#右\n        velocity.x=vel\n    elif direction == 4:#下\n        velocity.y=vel\n    elif direction == 6:#左\n        velocity.x=-vel\n    return velocity\n\npygame.init()\nscreen = pygame.display.set_mode((800,600))\npygame.display.set_caption(&quot;吃苹果&quot;)\nfont = pygame.font.Font(None,36)\ntimer = pygame.time.Clock()\n\n#创建精灵组\nplayer_group = pygame.sprite.Group()\nfood_group = pygame.sprite.Group()\n\n#初始化玩家精灵组\nplayer = MySprite()\nplayer.load(&quot;farmer walk.png&quot;,96,96,8,8)\n#初始位置\nplayer.position = 80,80\n#初始方向\nplayer.direction = 4\n#添加进组\nplayer_group.add(player)\n\n#初始化食物精灵组\nfor n in range(1,50):\n    food = MySprite()\n    food.load(&quot;food_low.png&quot;,35,35,1,1)\n    #随机分布\n    food.position = random.randint(0,780),random.randint(0,580)\n    food_group.add(food)\n\ngame_over=False\nplayer_moving = False\nplayer_health = 0\n\nwhile True:\n    timer.tick(30)\n    ticks = pygame.time.get_ticks()\n\n    for event in pygame.event.get():\n        if event.type == QUIT:\n            pygame.quit()\n            sys.exit()\n    #获取当前按键\n    keys = pygame.key.get_pressed()\n    if keys[K_ESCAPE]:\n        sys.exit()\n    elif keys[K_UP] or keys[K_w]:#上\n        player.direction = 0\n        player_moving = True\n    elif keys[K_RIGHT] or keys[K_d]:#右\n        player.direction = 2\n        player_moving = True\n    elif keys[K_DOWN] or keys[K_s]:#下\n        player.direction = 4\n        player_moving = True\n    elif keys[K_LEFT] or keys[K_a]:#左\n        player.direction = 6\n        player_moving = True\n    else:\n        player_moving = False\n\n    if not game_over:\n        #根据角色方向不同,使用不同的动画帧\n        player.first_frame = player.direction * player.columns\n        player.last_frame = player.first_frame + player.columns-1\n        if player.frame &lt; player.first_frame:\n            player.frame = player.first_frame\n\n        if not player_moving:\n            # 当停止按键（即人物停止移动的时候），停止更新动画帧\n            player.frame = player.first_frame = player.last_frame\n        else:\n            player.velocity = calc_velocity(player.direction,1.5)\n            player.velocity.x *= 1.5\n            player.velocity.y *= 1.5\n\n        #更新玩家精灵组\n        player_group.update(ticks, 50)\n        # 移动玩家\n        if player_moving:\n            player.X += player.velocity.x\n            player.Y += player.velocity.y\n            if player.X &lt; 0:\n                player.X = 0\n            elif player.X &gt; 700:\n                player.X = 700\n            if player.Y &lt; 0:\n                player.Y = 0\n            elif player.Y &gt; 500:\n                player.Y = 500\n\n        attacker = None\n        #判断是否有碰撞产生\n        attacker = pygame.sprite.spritecollideany(player,food_group)\n        if attacker!=None:\n            #有,增加精度\n            if pygame.sprite.collide_circle_ratio(0.65)(player,attacker):\n                player_health += 2\n                food_group.remove(attacker)\n        if player_health &gt; 100:\n            player_health = 100\n        #更新食物精灵组\n        food_group.update(ticks,50)\n        if len(food_group)==0:\n            game_over = True\n\n    #清屏\n    screen.fill((50,50,100))\n    # 绘制精灵\n    food_group.draw(screen)\n    player_group.draw(screen)\n\n    # 绘制玩家血量条\n    pygame.draw.rect(screen, (50, 150, 50, 180), Rect(300, 570, player_health * 2, 25))\n    pygame.draw.rect(screen, (100, 200, 100, 180), Rect(300, 570, 200, 25), 2)\n\n    if game_over:\n        print_text(font, 300, 100, &quot;GAME OVER&quot;)\n\n    pygame.display.update()</code></pre><p>接下来才是难中之难…如果想要实现人物随场景移动. 估计要自己撸框架了. 大体思路如下: 1:近景(左侧)1/2前景不随人物移动 2:1/2以后景随人物移动 3:远景(右侧)1/2前景不随人物移动 4:景采用大地图形式,造可封装类(障碍物,场景地图,宽度,高度等信息) 5:考虑如何移动场景,数学公式想好,-移动方向,移动速度,景中心… 6:加油!</p>\n","text":"碰撞检测 即两个Sprite是否碰撞-重叠之类的(你懂得) :horse_racing: github: https://github.com/834930269/Pygame-Learn/tree/master/EatApple 吃苹果游戏:# MyLibrary.pyfrom","link":"","raw":null,"photos":[],"categories":[{"name":"pygame","slug":"pygame","count":3,"path":"api/categories/pygame.json"},{"name":"Python","slug":"pygame/Python","count":3,"path":"api/categories/pygame/Python.json"},{"name":"游戏制作","slug":"pygame/Python/游戏制作","count":3,"path":"api/categories/pygame/Python/游戏制作.json"}],"tags":[{"name":"Python","slug":"Python","count":65,"path":"api/tags/Python.json"},{"name":"游戏制作","slug":"游戏制作","count":4,"path":"api/tags/游戏制作.json"},{"name":"pygame","slug":"pygame","count":3,"path":"api/tags/pygame.json"}]}]}