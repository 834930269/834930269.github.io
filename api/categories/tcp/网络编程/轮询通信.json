{"name":"轮询通信","slug":"tcp/网络编程/轮询通信","count":1,"postlist":[{"title":"c++ & c 实现 TCP/UDP通讯","slug":"c-c-tcp-udp-tx","date":"2017-11-24T00:37:46.000Z","updated":"2019-07-03T13:51:36.859Z","comments":true,"path":"api/articles/c-c-tcp-udp-tx.json","excerpt":"","keywords":null,"cover":null,"content":"<p>向前链接 Python TCP/UDP 编程: <a href=\"http://be-sunshine.cn/index.php/2017/07/26/python3-udptcp-ip/\" target=\"_blank\" rel=\"noopener\">http://be-sunshine.cn/index.php/2017/07/26/python3-udptcp-ip/</a></p>\n<blockquote>\n<p>三个任务:</p>\n<blockquote>\n<p>实现tcp通信 实现udp通信 使用tcp实现客户加入通知全部客户,使用轮询方法</p>\n</blockquote>\n</blockquote>\n<h2><span id=\"基础知识\">基础知识</span></h2><p>套接字<code>socket(int af,int type,int protocol)</code>函数共三个参数.第一个参数af用来指定地址族,在Windows下可以使用的参数值有多个,但<code>真正</code>可以使用的只有两个,分别是 AF_INET 和 PF_INET。 这两个宏在winsock2.h下是相同的. 为了保证兼容性,尽量使用PF_INET比较好. 第二个参数type是指定新套接字描述符的类型.这里可以用的值通常有3个.分别是SOCK_STREAM,SOCK_DGRAM和SOCK_RAW,分别表示流套接字,数据包套接字和原始协议接口. 第三个参数是协议. 如果第二个参数使用<code>SOCK_STREAM</code>,name第三个参数应该使用<code>IPPROTO_TCP</code>.<code>SOCK_DGRAM</code>:<code>IPPROTO_UDP</code>. 即若第二个参数是这两个,第三个参数可以是0.如果是<code>RAW</code>,则第三个参数必须指定. 调用成功会返回一个新的套接字描述符.如果失败,则返回 INVALID_SOCKET.如果调用失败,想要知道原因,需要调用WSAGetLastError()得到错误码.</p>\n<h2><span id=\"面向连接协议的函数\">面向连接协议的函数</span></h2><p>这里来介绍一些基本的函数:bind(),listen(),accept(),connect(),send()和recv(). socket()只是新建了一个socket描述符,但内部信息尚未完善,,比如在网络通信时本地的端口和IP等. 这些信息需要使用bind()方法来完成. bind()函数定义如下:</p>\n<blockquote>\n<blockquote>\n<p>int bind(SOCKET s,const struct sockaddr FAR *name,int namelen)</p>\n</blockquote>\n</blockquote>\n<p>第一个参数是套接字描述符,也就是我们需要用到的socket 第二个参数是一个sockaddr结构体,提供套接字一个地址和端口信息. 第三个参数是namelen是sockaddr的大小. 其中第二个参数结构体定义如下:</p>\n<p>struct sockaddr{<br>    u_short sa_family;/*address family*/<br>    char sa_data[14];/*up to 14 bytes of direct address.*/<br>};</p>\n<p>但是需要使用转换将sockaddr之前的协议结构体 <code>sockaddr_in</code>转换成sockaddr.</p>\n<p>struct sockaddr_in {<br>    short sin_family;<br>    u_short sin_port;<br>    struct in_addr sin_addr;<br>    char sin_zero[8];<br>}</p>\n<p>struct in_addr{<br>    union{<br>        struct{u_char s_b1,s_b2,s_b3,s_b4;}  S_un_b;<br>        struct{u_short s_w1,s_w2;}  S_un_w;<br>        u_long  S_addr;<br>    }S_un;<br>};</p>\n<p>其中点分十进制ip转换成无符号长整型的函数是 <code>unsigned long inet_addr(const char FAR *cp);</code> 逆函数:转换成点分十进制 <code>char FAR * inet_ntoa(struct in_addr in);</code> sin_port需要的转换函数: <code>htons()和htonl() 逆向:ntohs()和ntohl()</code> 监听端口的函数定义如下:</p>\n<p>int listen(SOCKET s,int backlog);</p>\n<p>第一个参数是描述符,第二个参数是允许进入连接请求队列的个数.backlog的最大值由系统指定. 在winsock2.h中,其最大值由SOMAXCONN表示,该值的定义如下:</p>\n<p>#define SOMAXCONN 0x7fffffff</p>\n<p>接受连接请求的函数定义如下:</p>\n<p>SOCKET accept(SOCKET s,struct sockaddr FAR *addr,int FAR *addrlen);<br>//FAR:近指针</p>\n<h2><span id=\"任务一tcp\">任务一:TCP</span></h2><blockquote>\n<p>服务端</p>\n<blockquote>\n<p>WSAStartup()-&gt;socket()-&gt;bind()-&gt;listen()-&gt;accept()-&gt;send()/recv()-&gt;closesocket()-&gt;WSACleanup()</p>\n</blockquote>\n<p>客户端</p>\n<blockquote>\n<p>WSAStartuo()-&gt;socket()-&gt;connect()-&gt;send()/recv()-&gt;closesocket()-&gt;WSACleanup()</p>\n</blockquote>\n</blockquote>\n<p>Code: 服务端:</p>\n<pre><code>#include&lt;stdio.h&gt;\n#include&lt;winsock2.h&gt;\n#pragma comment (lib,&quot;ws2_32&quot;)\n\nint main(){\n    WSADATA wsaData;\n    WSAStartup(MAKEWORD(2,2),&amp;wsaData);\n\n    //创建套接字\n    SOCKET sLisent = socket(PF_INET,SOCK_STREAM,IPPROTO_TCP);\n\n    //对sockaddr_in结构体填充地址,端口等信息\n    struct sockaddr_in ServerAddr;\n    ServerAddr.sin_family=AF_INET;\n    ServerAddr.sin_addr.S_un.S_addr=inet_addr(&quot;127.0.0.1&quot;);\n    ServerAddr.sin_port=htons(1234);\n\n    //绑定套接字与地址信息\n    bind(sLisent,(SOCKADDR *)&amp;ServerAddr,sizeof(ServerAddr));\n\n    //监听端口\n    listen(sLisent,SOMAXCONN);\n\n    //获取请求连接\n    struct sockaddr_in ClientAddr;\n    int nSize=sizeof(ClientAddr);\n\n    SOCKET sClient=accept(sLisent,(SOCKADDR *)&amp;ClientAddr,&amp;nSize);\n    //输出客户端使用的IP地址和端口号\n    printf(&quot;Client IP=%s:%d\\r\\n&quot;,inet_ntoa(ClientAddr.sin_addr),ntohs(ClientAddr.sin_port));\n\n    //发送消息\n    char szMsg[MAXBYTE]={0};\n    lstrcpy(szMsg,&quot;hello Client!\\r\\n&quot;);\n    send(sClient,szMsg,strlen(szMsg)+sizeof(char),0);\n\n    //接收消息\n    recv(sClient,szMsg,MAXBYTE,0);\n    printf(&quot;Client Msg : %s \\r\\n&quot;,szMsg);\n\n    WSACleanup();\n\n    getchar();\n\n    return 0;\n}</code></pre><p>客户端:</p>\n<pre><code>#include&lt;stdio.h&gt;\n#include&lt;winsock2.h&gt;\n#pragma comment (lib,&quot;ws2_32&quot;)\n\nint main(){\n    WSADATA wsaData;\n    WSAStartup(MAKEWORD(2,2),&amp;wsaData);\n\n    //创建套接字\n    SOCKET sServer = socket(PF_INET,SOCK_STREAM,IPPROTO_TCP);\n\n    //对sockaddr_in结构体填充地址,端口等信息\n    struct sockaddr_in ServerAddr;\n    ServerAddr.sin_family=AF_INET;\n    ServerAddr.sin_addr.S_un.S_addr=inet_addr(&quot;127.0.0.1&quot;);\n    ServerAddr.sin_port=htons(1234);\n\n    //连接服务器\n    connect(sServer,(SOCKADDR *)&amp;ServerAddr,sizeof(ServerAddr));\n\n    char szMsg[MAXBYTE]={0};\n\n    //接收消息\n    recv(sServer,szMsg,MAXBYTE,0);\n    printf(&quot;Server Msg: %s \\r\\n&quot;,szMsg);\n\n    //发送消息\n    lstrcpy(szMsg,&quot;hello Server!\\r\\n&quot;);\n    send(sServer,szMsg,strlen(szMsg)+sizeof(char),0);\n\n    WSACleanup();\n\n    getchar();\n\n    return 0;\n}</code></pre><h2><span id=\"任务二udp\">任务二:UDP</span></h2><blockquote>\n<p>服务端</p>\n<blockquote>\n<p>socket()-&gt;bind()-&gt;sendto()/recvfrom()-&gt;closesocket()</p>\n</blockquote>\n<p>客户端</p>\n<blockquote>\n<p>socket()-&gt;sendto()/recvfrom()-&gt;closesocket()</p>\n</blockquote>\n</blockquote>\n<p>code: 服务端:</p>\n<pre><code>#include&lt;stdio.h&gt;\n#include&lt;winsock2.h&gt;\n#pragma comment (lib,&quot;ws2_32&quot;)\n\nint main(){\n    WSADATA wsaData;\n    WSAStartup(MAKEWORD(2,2),&amp;wsaData);\n\n    //创建套接字\n    SOCKET sServer = socket(PF_INET,SOCK_DGRAM,IPPROTO_UDP);\n\n    //对socketaddr_in填充\n    struct sockaddr_in ServerAddr;\n    ServerAddr.sin_family=AF_INET;\n    ServerAddr.sin_addr.S_un.S_addr=inet_addr(&quot;127.0.0.1&quot;);\n    ServerAddr.sin_port=htons(1234);\n\n    //绑定套接字与地址信息\n    bind(sServer,(SOCKADDR *)&amp;ServerAddr,sizeof(ServerAddr));\n\n    //接收消息\n    char szMsg[MAXBYTE]={0};\n    struct sockaddr_in ClientAddr;\n    int nSize=sizeof(ClientAddr);\n    recvfrom(sServer,szMsg,MAXBYTE,0,(SOCKADDR*)&amp;ClientAddr,&amp;nSize);\n    printf(&quot;Client Msg: %s \\r\\n&quot;,szMsg);\n    printf(&quot;Client IP=%s: %d\\r\\n&quot;,inet_ntoa(ClientAddr.sin_addr),ntohs(ClientAddr.sin_port));\n\n    //发送消息\n    lstrcpy(szMsg,&quot;hello Client!\\r\\n&quot;);\n    nSize=sizeof(ClientAddr);\n    sendto(sServer,szMsg,strlen(szMsg)+sizeof(char),0,(SOCKADDR*)&amp;ClientAddr,nSize);\n\n    WSACleanup();\n    getchar();\n\n\n    return 0;\n}</code></pre><p>客户端:</p>\n<pre><code>#include&lt;stdio.h&gt;\n#include&lt;winsock2.h&gt;\n#pragma comment (lib,&quot;ws2_32&quot;)\n\nint main(){\n    WSADATA wsaData;\n    WSAStartup(MAKEWORD(2,2),&amp;wsaData);\n\n    //创建套接字\n    SOCKET sClient = socket(PF_INET,SOCK_DGRAM,IPPROTO_UDP);\n\n    //对socketaddr_in填充\n    struct sockaddr_in ServerAddr;\n    ServerAddr.sin_family=AF_INET;\n    ServerAddr.sin_addr.S_un.S_addr=inet_addr(&quot;127.0.0.1&quot;);\n    ServerAddr.sin_port=htons(1234);\n\n    //发送消息\n    char szMsg[MAXBYTE]={0};\n    lstrcpy(szMsg,&quot;Hello Server!\\r\\n&quot;);\n    int nSize=sizeof(ServerAddr);\n    sendto(sClient,szMsg,strlen(szMsg)+sizeof(char),0,(SOCKADDR *)&amp;ServerAddr,nSize);\n\n    //接收消息\n    nSize=sizeof(ServerAddr);\n    recvfrom(sClient,szMsg,MAXBYTE,0,(SOCKADDR *)&amp;ServerAddr,&amp;nSize);\n    printf(&quot;Server Msg : %s\\r\\n&quot;,szMsg);\n\n    WSACleanup();\n\n    getchar();\n    return 0;\n}</code></pre><h2><span id=\"任务三轮询式多客户端连接\">任务三:轮询式多客户端连接</span></h2><p>code: 服务端:</p>\n<pre><code>#include&lt;stdio.h&gt;\n#include&lt;winsock2.h&gt;\n#include &lt;windows.h&gt;\n#include&lt;vector&gt;\n#pragma comment (lib,&quot;ws2_32&quot;)\nusing namespace std;\n\nint main(){\n    WSADATA wsaData;\n    WSAStartup(MAKEWORD(2,2),&amp;wsaData);\n\n    //创建套接字\n    SOCKET sLisent = socket(PF_INET,SOCK_STREAM,IPPROTO_TCP);\n\n    //对sockaddr_in结构体填充地址,端口等信息\n    struct sockaddr_in ServerAddr;\n    ServerAddr.sin_family=AF_INET;\n    ServerAddr.sin_addr.S_un.S_addr=inet_addr(&quot;127.0.0.1&quot;);\n    ServerAddr.sin_port=htons(1234);\n\n    //绑定套接字与地址信息\n    bind(sLisent,(SOCKADDR *)&amp;ServerAddr,sizeof(ServerAddr));\n\n    vector&lt;SOCKET&gt; cStack;\n\n    while(1){\n        //监听端口\n        listen(sLisent,SOMAXCONN);\n\n        //获取请求连接\n        struct sockaddr_in ClientAddr;\n        int nSize=sizeof(ClientAddr);\n\n        SOCKET sClient=accept(sLisent,(SOCKADDR *)&amp;ClientAddr,&amp;nSize);\n        cStack.push_back(sClient);\n        //输出客户端使用的IP地址和端口号\n        printf(&quot;Client IP=%s:%d\\r\\n&quot;,inet_ntoa(ClientAddr.sin_addr),ntohs(ClientAddr.sin_port));\n\n        //向全部客户端发送消息\n        for(int i=0;i&lt;cStack.size();++i){\n            char szMsg[MAXBYTE]={0};\n            lstrcpy(szMsg,&quot;hello Client!\\r\\n&quot;);\n            send(cStack[i],szMsg,strlen(szMsg)+sizeof(char),0);\n\n            //接收消息\n            recv(cStack[i],szMsg,MAXBYTE,0);\n            printf(&quot;Client Msg : %s \\r\\n&quot;,szMsg);\n        }\n    }\n    WSACleanup();\n\n    getchar();\n\n    return 0;\n}</code></pre><p>客户端:</p>\n<pre><code>#include&lt;stdio.h&gt;\n#include&lt;winsock2.h&gt;\n#include&lt;windows.h&gt;\n#pragma comment (lib,&quot;ws2_32&quot;)\n\nint main(){\n    WSADATA wsaData;\n    WSAStartup(MAKEWORD(2,2),&amp;wsaData);\n\n    //创建套接字\n    SOCKET sServer = socket(PF_INET,SOCK_STREAM,IPPROTO_TCP);\n\n    //对sockaddr_in结构体填充地址,端口等信息\n    struct sockaddr_in ServerAddr;\n    ServerAddr.sin_family=AF_INET;\n    ServerAddr.sin_addr.S_un.S_addr=inet_addr(&quot;127.0.0.1&quot;);\n    ServerAddr.sin_port=htons(1234);\n    while(1){\n        //连接服务器\n        connect(sServer,(SOCKADDR *)&amp;ServerAddr,sizeof(ServerAddr));\n\n        char szMsg[MAXBYTE]={0};\n\n        //接收消息\n        printf(&quot;接收消息\\n&quot;);\n        recv(sServer,szMsg,MAXBYTE,0);\n        printf(&quot;Server Msg: %s \\r\\n&quot;,szMsg);\n\n        //发送消息\n        lstrcpy(szMsg,&quot;hello Server!\\r\\n&quot;);\n        send(sServer,szMsg,strlen(szMsg)+sizeof(char),0);\n\n    }\n    WSACleanup();\n\n    getchar();\n\n    return 0;\n}</code></pre><p>以上代码编译连接以后直接运行<code>.exe</code>即可,注意,需要在IDE中添加依赖库<code>libws2_32.a</code></p>\n","text":"向前链接 Python TCP/UDP 编程: http://be-sunshine.cn/index.php/2017/07/26/python3-udptcp-ip/三个任务:实现tcp通信 实现udp通信 使用tcp实现客户加入通知全部客户,使用轮询方法基础知识套接字soc","link":"","raw":null,"photos":[],"categories":[{"name":"tcp","slug":"tcp","count":2,"path":"api/categories/tcp.json"},{"name":"网络编程","slug":"tcp/网络编程","count":2,"path":"api/categories/tcp/网络编程.json"},{"name":"轮询通信","slug":"tcp/网络编程/轮询通信","count":1,"path":"api/categories/tcp/网络编程/轮询通信.json"}],"tags":[{"name":"网络编程","slug":"网络编程","count":4,"path":"api/tags/网络编程.json"},{"name":"tcp","slug":"tcp","count":3,"path":"api/tags/tcp.json"},{"name":"轮询通信","slug":"轮询通信","count":1,"path":"api/tags/轮询通信.json"}]}]}