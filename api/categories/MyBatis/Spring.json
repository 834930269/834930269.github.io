{"name":"Spring","slug":"MyBatis/Spring","count":1,"postlist":[{"title":"Spring 黏合 Mybatis (已整合druid前提下)","slug":"spring-cohesive-mybatis","date":"2019-02-04T02:20:51.000Z","updated":"2019-07-03T13:51:36.864Z","comments":true,"path":"api/articles/spring-cohesive-mybatis.json","excerpt":"","keywords":null,"cover":null,"content":"<h1 id=\"前提-已经创建好了druid\"><a href=\"#前提-已经创建好了druid\" class=\"headerlink\" title=\"前提,已经创建好了druid\"></a>前提,已经创建好了druid</h1><blockquote>\n<p>且druid的id为datasource,作为mybatis的数据源</p>\n</blockquote>\n<h1 id=\"Document\"><a href=\"#Document\" class=\"headerlink\" title=\"Document\"></a>Document</h1><p><a href=\"http://www.mybatis.org/mybatis-3/zh/index.html\" target=\"_blank\" rel=\"noopener\">http://www.mybatis.org/mybatis-3/zh/index.html</a></p>\n<h1 id=\"创建-mybatis-config-xml\"><a href=\"#创建-mybatis-config-xml\" class=\"headerlink\" title=\"创建 mybatis-config.xml\"></a>创建 mybatis-config.xml</h1><blockquote>\n<p>因为已经整合过了druid,所以数据源为datasource,即不用再设置连接数据库等操作,直接从连接池druid中取出即可.</p>\n<blockquote>\n<p>只需要配置几个setting属性</p>\n</blockquote>\n</blockquote>\n<pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;\n&lt;!DOCTYPE configuration PUBLIC &quot;-//mybatis.org//DTD Config 3.0//EN&quot; &quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;&gt;\n&lt;configuration&gt;\n    &lt;!-- 全局参数 --&gt;\n    &lt;settings&gt;\n        &lt;!-- 打印 SQL 语句 --&gt;\n        &lt;setting name=&quot;logImpl&quot; value=&quot;STDOUT_LOGGING&quot; /&gt;\n\n        &lt;!-- 使全局的映射器启用或禁用缓存。 --&gt;\n        &lt;setting name=&quot;cacheEnabled&quot; value=&quot;false&quot;/&gt;\n\n        &lt;!-- 全局启用或禁用延迟加载。当禁用时，所有关联对象都会即时加载。 --&gt;\n        &lt;setting name=&quot;lazyLoadingEnabled&quot; value=&quot;true&quot;/&gt;\n\n        &lt;!-- 当启用时，有延迟加载属性的对象在被调用时将会完全加载任意属性。否则，每种属性将会按需要加载。 --&gt;\n        &lt;setting name=&quot;aggressiveLazyLoading&quot; value=&quot;true&quot;/&gt;\n\n        &lt;!-- 是否允许单条 SQL 返回多个数据集 (取决于驱动的兼容性) default:true --&gt;\n        &lt;setting name=&quot;multipleResultSetsEnabled&quot; value=&quot;true&quot;/&gt;\n\n        &lt;!-- 是否可以使用列的别名 (取决于驱动的兼容性) default:true --&gt;\n        &lt;setting name=&quot;useColumnLabel&quot; value=&quot;true&quot;/&gt;\n\n        &lt;!-- 允许 JDBC 生成主键。需要驱动器支持。如果设为了 true，这个设置将强制使用被生成的主键，有一些驱动器不兼容不过仍然可以执行。 default:false  --&gt;\n        &lt;setting name=&quot;useGeneratedKeys&quot; value=&quot;false&quot;/&gt;\n\n        &lt;!-- 指定 MyBatis 如何自动映射 数据基表的列 NONE：不映射 PARTIAL：部分 FULL:全部  --&gt;\n        &lt;setting name=&quot;autoMappingBehavior&quot; value=&quot;PARTIAL&quot;/&gt;\n\n        &lt;!-- 这是默认的执行类型 （SIMPLE: 简单； REUSE: 执行器可能重复使用prepared statements语句；BATCH: 执行器可以重复执行语句和批量更新） --&gt;\n        &lt;setting name=&quot;defaultExecutorType&quot; value=&quot;SIMPLE&quot;/&gt;\n\n        &lt;!-- 使用驼峰命名法转换字段。 --&gt;\n        &lt;setting name=&quot;mapUnderscoreToCamelCase&quot; value=&quot;true&quot;/&gt;\n\n        &lt;!-- 设置本地缓存范围 session:就会有数据的共享 statement:语句范围 (这样就不会有数据的共享 ) defalut:session --&gt;\n        &lt;setting name=&quot;localCacheScope&quot; value=&quot;SESSION&quot;/&gt;\n\n        &lt;!-- 设置 JDBC 类型为空时,某些驱动程序 要指定值, default:OTHER，插入空值时不需要指定类型 --&gt;\n        &lt;setting name=&quot;jdbcTypeForNull&quot; value=&quot;NULL&quot;/&gt;\n    &lt;/settings&gt;\n&lt;/configuration&gt;</code></pre><h1 id=\"创建-spring-context-mybatis-xml\"><a href=\"#创建-spring-context-mybatis-xml\" class=\"headerlink\" title=\"创建 spring-context-mybatis.xml\"></a>创建 spring-context-mybatis.xml</h1><pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;\n&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;\n       xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd&quot;&gt;\n\n    &lt;!-- 配置 SqlSession --&gt;\n    &lt;bean id=&quot;sqlSessionFactory&quot; class=&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;&gt;\n        &lt;property name=&quot;dataSource&quot; ref=&quot;dataSource&quot;/&gt;\n        &lt;!-- 用于配置对应实体类所在的包，多个 package 之间可以用 &apos;,&apos; 号分割 --&gt;\n        &lt;property name=&quot;typeAliasesPackage&quot; value=&quot;com.funtl.my.shop.domain&quot;/&gt;\n        &lt;!-- 用于配置对象关系映射配置文件所在目录 --&gt;\n        &lt;property name=&quot;mapperLocations&quot; value=&quot;classpath:/mapper/**/*.xml&quot;/&gt;\n        &lt;property name=&quot;configLocation&quot; value=&quot;classpath:/mybatis-config.xml&quot;&gt;&lt;/property&gt;\n    &lt;/bean&gt;\n\n    &lt;!-- 扫描 Mapper --&gt;\n    &lt;bean class=&quot;org.mybatis.spring.mapper.MapperScannerConfigurer&quot;&gt;\n        &lt;property name=&quot;basePackage&quot; value=&quot;com.funtl.my.shop.web.admin.dao&quot; /&gt;\n    &lt;/bean&gt;\n&lt;/beans&gt;</code></pre><h1 id=\"然后\"><a href=\"#然后\" class=\"headerlink\" title=\"然后\"></a>然后</h1><blockquote>\n<p>只需要创建Dao接口即可,SQL语句放在Mapper中,Service中调用接口即可. 其中关于mapper.xml的标签和OOP原则都在最上面Document中可以查到.</p>\n</blockquote>\n","text":"前提,已经创建好了druid且druid的id为datasource,作为mybatis的数据源Documenthttp://www.mybatis.org/mybatis-3/zh/index.html创建 mybatis-config.xml因为已经整合过了druid,所以数","link":"","raw":null,"photos":[],"categories":[{"name":"MyBatis","slug":"MyBatis","count":2,"path":"api/categories/MyBatis.json"},{"name":"Spring","slug":"MyBatis/Spring","count":1,"path":"api/categories/MyBatis/Spring.json"}],"tags":[{"name":"Spring","slug":"Spring","count":6,"path":"api/tags/Spring.json"},{"name":"MyBatis","slug":"MyBatis","count":2,"path":"api/tags/MyBatis.json"}]}]}