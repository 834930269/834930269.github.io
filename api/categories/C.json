{"name":"C#","slug":"C","count":2,"postlist":[{"title":"C# Fluent Interface","slug":"c-fluent-interface","date":"2017-08-29T01:46:17.000Z","updated":"2019-07-03T13:51:36.851Z","comments":true,"path":"api/articles/c-fluent-interface.json","excerpt":"","keywords":null,"cover":null,"content":"<p>因为每个Enumerable所包含的LINQ拓展方法,都返回了IEnumerable,这也就代表可以使用串接的方式调用多个LINQ函数,然后实现多条件筛选. 例:</p>\n<pre><code>var query=list.Where(c=&gt; c&lt;10000).Where(c=&gt;c&gt;1000);</code></pre><p>或是提取需要的数据结构:</p>\n<pre><code>var query=list.Where(c=&gt;c&lt;10000).Select(c=&gt;new {id=c});</code></pre>","text":"因为每个Enumerable所包含的LINQ拓展方法,都返回了IEnumerable,这也就代表可以使用串接的方式调用多个LINQ函数,然后实现多条件筛选. 例:var query=list.Where(c=&gt; c&lt;10000).Where(c=&gt;c&gt;10","link":"","raw":null,"photos":[],"categories":[{"name":"C#","slug":"C","count":2,"path":"api/categories/C.json"}],"tags":[{"name":"C#","slug":"C","count":6,"path":"api/tags/C.json"}]},{"title":"DotNet","slug":"dotnet","date":"2018-03-20T11:12:35.000Z","updated":"2019-07-03T13:51:36.863Z","comments":true,"path":"api/articles/dotnet.json","excerpt":"","keywords":null,"cover":null,"content":"<p>SQL:<br>    工厂模式创建DbCommand<br>        /// <summary><br>        /// 创建新的连接对象<br>        /// </summary><br>        /// <returns></returns><br>        public static DbCommand CreateCommand()<br>        {<br>            string dataProviderName = BalloonShopConfiguration.DbProviderName;<br>            string connectionString = BalloonShopConfiguration.DbConnectionString;<br>            ///工厂模式下新建名字为dataProviderName的连接<br>            DbProviderFactory factory = DbProviderFactories.GetFactory(dataProviderName);<br>            DbConnection conn = factory.CreateConnection();<br>            ///项数据工厂设置连接字符串<br>            conn.ConnectionString = connectionString;<br>            ///创建特定于某数据库的command对象<br>            DbCommand comm = conn.CreateCommand();<br>            comm.CommandType = CommandType.StoredProcedure;<br>            return comm;<br>        }</p>\n<pre><code>执行查询:\n    /// &lt;summary&gt;\n    /// 执行查询语句\n    /// &lt;/summary&gt;\n    /// &lt;param name=&quot;command&quot;&gt;&lt;/param&gt;\n    /// &lt;returns&gt;&lt;/returns&gt;\n    public static DataTable ExecuteSelectCommand(DbCommand command)\n    {\n        ///将返回的Datatable\n        DataTable table;\n        try\n        {\n            //执行该命令\n            command.Connection.Open();\n            DbDataReader dr = command.ExecuteReader();\n            table = new DataTable();\n            table.Load(dr);\n            dr.Close();\n        }\n        catch (Exception e)\n        {\n            Utilities.LogError(e);\n            throw;\n        }\n        finally\n        {\n            command.Connection.Close();\n        }\n        return table;\n    }</code></pre><blockquote>\n<p>返回Datatable是因为可以使用更少的时间</p>\n</blockquote>\n","text":"SQL:<br>    工厂模式创建DbCommand<br>        /// <br>        /// 创建新的连接对象<br>        /// <br>        /// <br>        public static DbCommand Creat","link":"","raw":null,"photos":[],"categories":[{"name":"C#","slug":"C","count":2,"path":"api/categories/C.json"}],"tags":[{"name":"C#","slug":"C","count":6,"path":"api/tags/C.json"}]}]}