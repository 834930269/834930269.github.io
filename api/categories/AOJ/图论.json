{"name":"图论","slug":"AOJ/图论","count":1,"postlist":[{"title":"AOJ \tALDS1_11_D Connected Components","slug":"1464","date":"2017-11-19T13:15:58.000Z","updated":"2019-07-03T13:51:36.859Z","comments":true,"path":"api/articles/1464.json","excerpt":"","keywords":null,"cover":null,"content":"<p>MathJax.Hub.Config({ tex2jax: { inlineMath: [[“$”,”$”], [“\\(“,”\\)“]], processEscapes: true }});</p>\n<h1><span id=\"connected-components\">Connected Components</span></h1><p>Write a program which reads relations in a SNS (Social Network Service), and judges that given pairs of users are reachable each other through the network.</p>\n<h2><span id=\"input\">Input</span></h2><p>In the first line, two integer $n$ and $m$ are given. $n$ is the number of users in the SNS and $m$ is the number of relations in the SNS. The users in the SNS are identified by IDs $0, 1, …, n-1$. In the following $m$ lines, the relations are given. Each relation is given by two integers $s$ and $t$ that represents $s$ and $t$ are friends (and reachable each other). In the next line, the number of queries $q$ is given. In the following $q$ lines, $q$ queries are given respectively. Each query consists of two integers $s$ and $t$ separated by a space character.</p>\n<h2><span id=\"output\">Output</span></h2><p>For each query, print “yes” if $t$ is reachable from $s$ through the social network, “no” otherwise.</p>\n<h2><span id=\"constraints\">Constraints</span></h2><ul>\n<li>$2 \\leq n \\leq 100,000$</li>\n<li>$0 \\leq m \\leq 100,000$</li>\n<li>$1 \\leq q \\leq 10,000$</li>\n</ul>\n<h2><span id=\"sample-input\">Sample Input</span></h2><p>10 9<br>0 1<br>0 2<br>3 4<br>5 7<br>5 6<br>6 7<br>6 8<br>7 8<br>8 9<br>3<br>0 1<br>5 9<br>1 3</p>\n<h2><span id=\"sample-output\">Sample Output</span></h2><p>yes<br>yes<br>no</p>\n<p>求连通分量,对每一个连通分量进行染色.不在同一个联通分量的肯定无法联系.</p>\n<pre><code>#include&lt;iostream&gt;\n#include&lt;algorithm&gt;\n#include&lt;vector&gt;\n#include&lt;stack&gt;\n#include&lt;cstdio&gt;\nusing namespace std;\nconst int maxn=100000;\nconst int NIL=-1;\nint n;\nvector&lt;int&gt; G[maxn];\nint color[maxn];\n\nvoid dfs(int r,int c){\n    stack&lt;int&gt; S;\n    S.push(r);\n    color[r]=c;\n    while(!S.empty()){\n        int u=S.top();S.pop();\n        for(int i=0;i&lt;G[u].size();++i){\n            int v=G[u][i];\n            if(color[v]==NIL){\n                color[v]=c;\n                S.push(v);\n            }\n        }\n    }\n}\n\nvoid setColor(){\n    int id=1;\n    for(int i=0;i&lt;n;++i){\n        color[i]=NIL;\n    }\n    for(int u=0;u&lt;n;++u){\n        if(color[u]==NIL) dfs(u,id++);\n    }\n}\n\nint main(){\n    int s,t,m,q;\n\n    cin&gt;&gt;n&gt;&gt;m;\n\n    for(int i=0;i&lt;m;++i){\n        cin&gt;&gt;s&gt;&gt;t;\n        G[s].push_back(t);\n        G[t].push_back(s);\n    }\n\n    setColor();\n\n    cin&gt;&gt;q;\n    for(int i=0;i&lt;q;++i){\n        cin&gt;&gt;s&gt;&gt;t;\n        if(color[s]==color[t]){\n            puts(&quot;yes&quot;);\n        }else{\n            puts(&quot;no&quot;);\n        }\n    }\n\n    return 0;\n}</code></pre>","text":"MathJax.Hub.Config({ tex2jax: { inlineMath: [[“$”,”$”], [“\\(“,”\\)“]], processEscapes: true }});Connected ComponentsWrite a program which rea","link":"","raw":null,"photos":[],"categories":[{"name":"AOJ","slug":"AOJ","count":5,"path":"api/categories/AOJ.json"},{"name":"图论","slug":"AOJ/图论","count":1,"path":"api/categories/AOJ/图论.json"},{"name":"连通分量","slug":"AOJ/图论/连通分量","count":1,"path":"api/categories/AOJ/图论/连通分量.json"}],"tags":[{"name":"AOJ","slug":"AOJ","count":5,"path":"api/tags/AOJ.json"},{"name":"图论","slug":"图论","count":6,"path":"api/tags/图论.json"},{"name":"连通分量","slug":"连通分量","count":2,"path":"api/tags/连通分量.json"}]}]}