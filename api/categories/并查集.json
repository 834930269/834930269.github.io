{"name":"并查集","slug":"并查集","count":1,"postlist":[{"title":"POJ 1182","slug":"poj-1182","date":"2017-04-12T10:10:17.000Z","updated":"2019-07-03T13:51:36.847Z","comments":true,"path":"api/articles/poj-1182.json","excerpt":"","keywords":null,"cover":null,"content":"<p><strong>【类型】</strong> <strong>并查集</strong> <strong>【Code】</strong></p>\n<blockquote>\n<p><strong>#include<cstdio></cstdio></strong> <strong>#include<cstring></cstring></strong> <strong>using namespace std;</strong> <strong>const int MAX_N=150000+10;</strong> <strong>int N,K;</strong> <strong>int T[MAX_N],X[MAX_N],Y[MAX_N];</strong> <strong>//并查集</strong> <strong>int par[MAX_N];//父亲</strong> <strong>int rank[MAX_N];//树的高度</strong> <strong>void init(int n){</strong> **    for(int i=0;i&lt;n;++i){** **        par[i]=i;** **        rank[i]=0;** **    }** <strong>}</strong> <strong>//查询树的根</strong> <strong>int find(int x){</strong> **    if(par[x]==x){** **        return x;** **    }else{** **        return par[x]=find(par[x]);** **    }** <strong>}</strong> <strong>//合并x和y所属集合</strong> <strong>void unite(int x,int y){</strong> **    x=find(x);** **    y=find(y);** **    if(x==y) return;** **    if(rank[x]&lt;rank[y]){** **        par[x]=y;** **    }else{** **        par[y]=x;** **        if(rank[x]==rank[y]) rank[x]++;** **    }** <strong>}</strong> <strong>//判断x和y是否属于同一个集合</strong> <strong>bool same(int x,int y){</strong> **    return find(x)==find(y);** <strong>}</strong> <strong>void solve(){</strong> **    //初始化并查集** **    //元素X,X+N,X+2N分别代表X-A,X-B,X-C** **    init(N<em>3);*</em> **    int ans=0;** **    for(int i=0;i&lt;K;++i){** **        int t=T[i];** **        int x=X[i]-1,y=Y[i]-1;//将x,y转换为从下标为0开始编号的号码** **        if(x&lt;0||x&gt;=N||y&lt;0||y&gt;=N){//不满足条件2** **            ans++;** **            continue;** **        }** **        if(t==1){** **            if(same(x,y+N)||same(x,y+2<em>N)){*</em> **                ans++;** **            }else{** **                unite(x,y);** **                unite(x+N,y+N);** **                unite(x+2*N,y+2*N);** **            }** **        }else{** **            if(same(x,y) || same(x,y+2<em>N)){*</em> **                ans++;** **            }else{** **                unite(x,y+N);** **                unite(x+N,y+2<em>N);*</em> **                unite(x+2<em>N,y);*</em> **            }** **        }** **    }** **    printf(“%d\\n”,ans);** <strong>}</strong> <strong>int main(){</strong> **    scanf(“%d%d”,&amp;N,&amp;K);** **    for(int i=0;i&lt;K;++i){** **        scanf(“%d%d%d”,&amp;T[i],&amp;X[i],&amp;Y[i]);** **    }** **    solve();** **    return 0;** <strong>}</strong></p>\n</blockquote>\n","text":"【类型】 并查集 【Code】#include #include using namespace std; const int MAX_N=150000+10; int N,K; int T[MAX_N],X[MAX_N],Y[MAX_N]; //并查集 int par[MAX_","link":"","raw":null,"photos":[],"categories":[{"name":"并查集","slug":"并查集","count":1,"path":"api/categories/并查集.json"},{"name":"数据结构","slug":"并查集/数据结构","count":1,"path":"api/categories/并查集/数据结构.json"}],"tags":[{"name":"并查集","slug":"并查集","count":5,"path":"api/tags/并查集.json"}]}]}